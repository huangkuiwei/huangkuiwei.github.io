<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微信小程序 - 获取和设置cookie</title>
      <link href="/2019/08/21/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20%E8%8E%B7%E5%8F%96%E5%92%8C%E8%AE%BE%E7%BD%AEcookie/"/>
      <url>/2019/08/21/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20%E8%8E%B7%E5%8F%96%E5%92%8C%E8%AE%BE%E7%BD%AEcookie/</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>小程序开发中我们需要获取到后端给的cookie进行请求验证,但是微信并没有帮我们保存cookie,那么我们要维持会话需要自己来保存cookie,并且请求的时候加上cookie</p><h3 id="2-获取cookie"><a href="#2-获取cookie" class="headerlink" title="2. 获取cookie"></a>2. 获取cookie</h3><p>在登录请求后读取返回值的header的cookie,并本地存储。其实一般情况下这里的cookie存的就是一个sessionId。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// request 是已经封装好了的请求方法</span>    <span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'登录接口/地址'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ... 请求参数</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获取到接口返回的 sessionId</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> sessionId <span class="token operator">=</span> data<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        wx<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">'sessionId'</span><span class="token punctuation">,</span> sessionId<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>datas    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-请求带上cookie"><a href="#3-请求带上cookie" class="headerlink" title="3. 请求带上cookie"></a>3. 请求带上cookie</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// request.js</span> wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...其它参数省略</span>  <span class="token comment" spellcheck="true">// 发送请求时，要将 cookie 同请求发送到后台</span>  header<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'cookie'</span><span class="token punctuation">:</span> wx<span class="token punctuation">.</span><span class="token function">getStorageSync</span><span class="token punctuation">(</span><span class="token string">"sessionId"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP状态码</title>
      <link href="/2019/07/10/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"/>
      <url>/2019/07/10/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="1-HTTP状态码"><a href="#1-HTTP状态码" class="headerlink" title="1. HTTP状态码"></a>1. HTTP状态码</h3><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。</p><p>HTTP状态码的英文为HTTP Status Code。</p><p>下面是常见的HTTP状态码：</p><blockquote><ol><li>200 - 请求成功</li><li>301 - 资源（网页等）被永久转移到其它URL</li><li>404 - 请求的资源（网页等）不存在</li><li>500 - 内部服务器错误</li></ol></blockquote><h3 id="2-HTTP状态码分类"><a href="#2-HTTP状态码分类" class="headerlink" title="2. HTTP状态码分类"></a>2. HTTP状态码分类</h3><p>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型：</p><table><thead><tr><th>分类</th><th>分类描述</th></tr></thead><tbody><tr><td>1**</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td>2**</td><td>成功，操作被成功接收并处理</td></tr><tr><td>3**</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4**</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5**</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><h3 id="3-HTTP状态码列表"><a href="#3-HTTP状态码列表" class="headerlink" title="3. HTTP状态码列表:"></a>3. HTTP状态码列表:</h3><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td>继续。客户端应继续其请求</td></tr><tr><td>101</td><td>Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td></tr><tr><td>300</td><td>Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td>408</td><td>Request Time-ou</td><td>服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td>409</td><td>Conflict</td><td>服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td>410</td><td>Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td>411</td><td>Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td>412</td><td>Precondition Failed</td><td>客户端请求信息的先决条件错误</td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td>414</td><td>Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td></tr><tr><td>416</td><td>Requested range not satisfiable</td><td>客户端请求的范围无效</td></tr><tr><td>417</td><td>Expectation Failed</td><td>服务器无法满足Expect的请求头信息</td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td>Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td>505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><p>原文地址：<a href="https://www.jianshu.com/p/c86b9350ab17" target="_blank" rel="noopener">https://www.jianshu.com/p/c86b9350ab17</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack 常用的插件以及作用 - clean-webpack-plugin</title>
      <link href="/2019/06/19/webpack%20%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E4%BB%A5%E5%8F%8A%E4%BD%9C%E7%94%A8%20-%20clean-webpack-plugin/"/>
      <url>/2019/06/19/webpack%20%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E4%BB%A5%E5%8F%8A%E4%BD%9C%E7%94%A8%20-%20clean-webpack-plugin/</url>
      
        <content type="html"><![CDATA[<p><code>clean-webpack-plugin</code>是我们在配置webpack自动化构建工具的时候常用的创建，它的作用就是每次重新打包的时候都会先删除掉<code>dist</code>目录下的文件再生成新的文件。</p><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><pre class=" language-html"><code class="language-html">npm install clean-webpack-plugin -D</code></pre><p>这个插件只有我们在开发的时候才会用到，到了线上不会用到。</p><h4 id="2-用法"><a href="#2-用法" class="headerlink" title="2. 用法"></a>2. 用法</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> CleanWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 引进插件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...代码</span>  plugin<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>上面的代码在我之前用的项目里面没有问题，clean-webpack-plugin 用的是1.0.X版本，今天我升级到了最新的版本：3.0，发现上面的代码报错了(<code>“CleanWebpackPlugin is not a constructor”</code>)，我查了官方的收藏发现我这旧版本的写法已经不兼容新版本了，新版本的写法如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...相关配置</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node.js </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序 - WXS响应事件</title>
      <link href="/2019/06/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20WXS%E5%93%8D%E5%BA%94%E4%BA%8B%E4%BB%B6/"/>
      <url>/2019/06/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20WXS%E5%93%8D%E5%BA%94%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>使用 WXS 函数用来响应小程序事件，目前只能响应内置组件的事件，<code>不支持自定义组件事件</code>。WXS 函数的除了纯逻辑的运算，还可以通过封装好的ComponentDescriptor 实例来访问以及设置组件的 class 和样式，对于交互动画，设置 style 和 class 足够了。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> wxsFunction <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> ownerInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> instance <span class="token operator">=</span> ownerInstance<span class="token punctuation">.</span><span class="token function">selectComponent</span><span class="token punctuation">(</span><span class="token string">'.classSelector'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回组件的实例</span>    instance<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">"font-size"</span><span class="token punctuation">:</span> <span class="token string">"14px"</span> <span class="token comment" spellcheck="true">// 支持rpx</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    instance<span class="token punctuation">.</span><span class="token function">getDataset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    instance<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 不往上冒泡，相当于调用了同时调用了stopPropagation和preventDefault</span><span class="token punctuation">}</span></code></pre><p>中入参 event 是小程序事件对象基础上多了 <code>event.instance 来表示触发事件的组件的 ComponentDescriptor 实例</code>。<code>ownerInstance 表示的是触发事件的组件所在的组件的 ComponentDescriptor 实例</code>，<code>如果触发事件的组件是在页面内的，ownerInstance 表示的是页面实例</code>。</p><table><thead><tr><th>方法</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>selectComponent</code></td><td>selector对象</td><td>返回组件的 ComponentDescriptor 实例。</td></tr><tr><td><code>selectAllComponents</code></td><td>selector对象数组</td><td>返回组件的 ComponentDescriptor 实例数组。</td></tr><tr><td><code>setStyle</code></td><td>Object/string</td><td>设置组件样式，支持rpx。设置的样式优先级比组件 wxml 里面定义的样式高。不能设置最顶层页面的样式。</td></tr><tr><td><code>addClass/removeClass/ hasClass</code></td><td>string</td><td>设置组件的 class。设置的 class 优先级比组件 wxml 里面定义的 class 高。不能设置最顶层页面的 class。</td></tr><tr><td><code>getDataset</code></td><td>无</td><td>返回当前组件/页面的 dataset 对象</td></tr><tr><td><code>callMethod</code></td><td>(funcName:string, args:object)</td><td>调用当前组件/页面在逻辑层（App Service）定义的函数。funcName表示函数名称，args表示函数的参数。</td></tr><tr><td><code>requestAnimationFrame</code></td><td>Function</td><td>和原生 requestAnimationFrame 一样。用于设置动画。</td></tr><tr><td><code>getState</code></td><td>无</td><td>返回一个object对象，当有局部变量需要存储起来后续使用的时候用这个方法。</td></tr><tr><td><code>triggerEvent</code></td><td>(eventName, detail)</td><td>和组件的triggerEvent一致。</td></tr></tbody></table><p>WXS 运行在视图层（Webview），里面的逻辑毕竟能做的事件比较少，需要有一个机制和逻辑层（App Service）开发者的代码通信，上面的 callMethod 是 WXS 里面调用逻辑层（App Service）开发者的代码的方法，而 WxsPropObserver 是逻辑层（App Service）开发者的代码调用 WXS 逻辑的机制。</p><p><strong>使用方法</strong><br>WXML定义事件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>wxs</span> <span class="token attr-name">module</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./test.wxs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>wxs</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">change:</span>prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{test.propObserver}}<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{propValue}}<span class="token punctuation">"</span></span> <span class="token attr-name">bindtouchmove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{test.touchmove}}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>上面的change:prop（属性前面带change:前缀）是在 prop 属性被设置的时候触发 WXS 函数，值必须用双大括号括起来。类似 Component 定义的 properties 里面的 observer 属性，在setData({propValue: newValue})调用之后会触发。</p><p><strong>注意：WXS函数必须用双大括号括起来。当 prop 的值被设置 WXS 函数就会触发，而不只是值发生改变，所以在页面初始化的时候会调用一次WxsPropObserver的函数。</strong></p><p>WXS文件test.wxs里面定义并导出事件处理函数和属性改变触发的函数：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    touchmove<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'log event'</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    propObserver<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> ownerInstance<span class="token punctuation">,</span> instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'prop observer'</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><ol><li>目前还不支持原生组件的事件、input和textarea组件的 bindinput 事件</li><li>1.02.1901170及以后版本的开发者工具上支持交互动画，最低版本基础库是2.4.4</li><li>目前在WXS函数里面仅支持console.log方式打日志定位问题，注意连续的重复日志会被过滤掉。</li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 - 迭代器</title>
      <link href="/2019/05/19/ES6%20-%20%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>/2019/05/19/ES6%20-%20%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>迭代器在<code>MDN</code>中的定义：</p><blockquote><p>在 JavaScript 中，迭代器是一个对象，它定义一个序列，并在终止时可能返回一个返回值。 更具体地说，迭代器是通过使用 next() 方法实现 Iterator protocol 的任何一个对象，该方法返回具有两个属性的对象： value，这是序列中的 next 值；和 done ，如果已经迭代到序列中的最后一个值，则它为 true 。如果 value 和 done 一起存在，则它是迭代器的返回值。</p></blockquote><p>一旦创建，迭代器对象可以通过重复调用next（）显式地迭代。 迭代一个迭代器被称为消耗了这个迭代器，因为它通常只能执行一次。 在产生终止值之后，对next（）的额外调用应该继续返回{done：true}。</p><p><strong>用ES5模拟一个迭代器</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> makeIterator <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> nextIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回一个迭代器方法</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        next<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nextIndex <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>value<span class="token punctuation">:</span> arr<span class="token punctuation">[</span>nextIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> done<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>done<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> it <span class="token operator">=</span> <span class="token function">makeIterator</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1:'</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// {value: 1, done: false}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2:'</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// {value: 2, done: false}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3:'</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// {value: 3, done: false}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end:'</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// {done: true}</span></code></pre><p>ES5中遍历集合通常都是 for循环，数组还有 forEach 方法，对象就是 for-in，ES6 中又添加了 Map 和 Set，而迭代器可以统一处理所有集合数据的方法。迭代器是一个接口，只要你这个数据结构暴露了一个iterator的接口，那就可以完成迭代。ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费。</p><p>数据结构只要部署了 Iterator 接口，我们就成这种数据结构为“可遍历”（Iterable）。ES6 规定，默认的 Iterator 接口部署在数据结构的 Symbol.iterator 属性，或者说，一个数据结构只要具有 Symbol.iterator 数据，就可以认为是“可遍历的”（iterable）。</p><p><strong>可以供 for…of 消费的原生数据结构：</strong></p><blockquote><ol><li>Array</li><li>Map</li><li>Set</li><li>String</li><li>TypedArray（一种通用的固定长度缓冲区类型，允许读取缓冲区中的二进制数据）</li><li>函数中的 arguments 对象</li><li>NodeList 对象</li></ol></blockquote><p>可以看上面的原生数据结构中并没有对象（Object），为什么呢？<br>那是因为对象属性的遍历先后顺序是不确定的，需要开发者手动指定。本质上，遍历器是一种线性处理，对于任何非线性的数据结构，部署遍历器接口就等于部署一种线性变换。<br><strong>做如下处理，可以使对象供 for…of 消费：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'huang'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 直接使用 for...of...循环，报错</span> <span class="token comment" spellcheck="true">// for(let item of obj){</span> <span class="token comment" spellcheck="true">//   console.log(item)     // 报错</span> <span class="token comment" spellcheck="true">// }</span>obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">let</span> num <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">{</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> num<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        value<span class="token punctuation">:</span> num<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        done<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        value<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>        done<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 每次遍历都会调用返回的遍历器对象的 next() 方法，item 的值就是返回的 value 值。</span><span class="token comment" spellcheck="true">// 一旦遇到 done 为 true的时候就停止遍历。</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// huang 24</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack 常用的插件以及作用 - html-webpack-plugin</title>
      <link href="/2019/05/08/webpack%20%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E4%BB%A5%E5%8F%8A%E4%BD%9C%E7%94%A8%20-%20html-webpack-plugin/"/>
      <url>/2019/05/08/webpack%20%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E4%BB%A5%E5%8F%8A%E4%BD%9C%E7%94%A8%20-%20html-webpack-plugin/</url>
      
        <content type="html"><![CDATA[<p><code>html-webpack-plugin</code>插件的主要作用有两个：</p><blockquote><ol><li>为html文件中引入的外部资源如script、link动态添加每次compile后的hash，防止引用缓存的外部文件问题</li><li>可以生成创建html入口文件，比如单页面可以生成一个html文件入口，配置N个html-webpack-plugin可以生成N个页面入口</li></ol></blockquote><p><strong>用法示例</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// webpack.config.js 配置</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 插件选项</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 打包输出HTML</span>    title<span class="token punctuation">:</span> <span class="token string">'Hello World app'</span><span class="token punctuation">,</span>    minify<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 压缩HTML文件</span>      removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 移除HTML中的注释</span>      collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 删除空白符与换行符</span>      minifyCSS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token comment" spellcheck="true">// 压缩内联css</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token string">'index.html'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p><strong>相关属性</strong></p><h5 id="1-title：生成html文件的标题"><a href="#1-title：生成html文件的标题" class="headerlink" title="1. title：生成html文件的标题"></a>1. title：生成html文件的标题</h5><h5 id="2-filename：输出的html的文件名称"><a href="#2-filename：输出的html的文件名称" class="headerlink" title="2. filename：输出的html的文件名称"></a>2. filename：输出的html的文件名称</h5><h5 id="3-template：html模板所在的文件路径"><a href="#3-template：html模板所在的文件路径" class="headerlink" title="3. template：html模板所在的文件路径"></a>3. template：html模板所在的文件路径</h5><blockquote><ol><li>html模板所在的文件路径</li><li>根据自己的指定的模板文件来生成特定的 html 文件。这里的模板类型可以是任意你喜欢的模板，可以是 html, jade, ejs, hbs, 等等，但是要注意的是，使用自定义的模板文件时，需要提前安装对应的 loader， 否则webpack不能正确解析。</li><li>如果你设置的 title 和 filename于模板中发生了冲突，那么以你的title 和 filename 的配置值为准。</li></ol></blockquote><h5 id="4-inject：注入选项。有四个选项值-true-body-head-false"><a href="#4-inject：注入选项。有四个选项值-true-body-head-false" class="headerlink" title="4. inject：注入选项。有四个选项值 true, body, head, false."></a>4. inject：注入选项。有四个选项值 true, body, head, false.</h5><blockquote><ol><li>true：默认值，script标签位于html文件的 body 底部</li><li>body：script标签位于html文件的 body 底部（同 true）</li><li>head：script 标签位于 head 标签内</li><li>false：不插入生成的 js 文件，只是单纯的生成一个 html 文件</li></ol></blockquote><h5 id="5-favicon：给生成的-html-文件生成一个-favicon。属性值为-favicon-文件所在的路径名"><a href="#5-favicon：给生成的-html-文件生成一个-favicon。属性值为-favicon-文件所在的路径名" class="headerlink" title="5. favicon：给生成的 html 文件生成一个 favicon。属性值为 favicon 文件所在的路径名"></a>5. favicon：给生成的 html 文件生成一个 favicon。属性值为 favicon 文件所在的路径名</h5><h5 id="6-minify：minify-的作用是对-html-文件进行压缩，minify-的属性值是一个压缩选项或者-false-。默认值为false-不对生成的-html-文件进行压缩。"><a href="#6-minify：minify-的作用是对-html-文件进行压缩，minify-的属性值是一个压缩选项或者-false-。默认值为false-不对生成的-html-文件进行压缩。" class="headerlink" title="6. minify：minify 的作用是对 html 文件进行压缩，minify 的属性值是一个压缩选项或者 false 。默认值为false, 不对生成的 html 文件进行压缩。"></a>6. minify：minify 的作用是对 html 文件进行压缩，minify 的属性值是一个压缩选项或者 false 。默认值为false, 不对生成的 html 文件进行压缩。</h5><pre class=" language-javascript"><code class="language-javascript">plugins<span class="token punctuation">:</span><span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//部分省略，具体看minify的配置</span>  minify<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//是否对大小写敏感，默认false</span>    caseSensitive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//是否简写boolean格式的属性如：disabled="disabled" 简写为disabled  默认false</span>    collapseBooleanAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//是否去除空格，默认false</span>    collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//是否压缩html里的css（使用clean-css进行的压缩） 默认值false；</span>    minifyCSS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//是否压缩html里的js（使用uglify-js进行的压缩）</span>    minifyJS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//Prevents the escaping of the values of attributes</span>    preventAttributesEscaping<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//是否移除属性的引号 默认false</span>    removeAttributeQuotes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//是否移除注释 默认false</span>    removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//从脚本和样式删除的注释 默认false</span>    removeCommentsFromCDATA<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//是否删除空属性，默认false</span>    removeEmptyAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//  若开启此项，生成的html中没有 body 和 head，html也未闭合</span>    removeOptionalTags<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//删除多余的属性</span>    removeRedundantAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//删除script的类型属性，在h5下面script的type默认值：text/javascript 默认值false</span>    removeScriptTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//删除style的类型属性， type="text/css" 同上</span>    removeStyleLinkTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//使用短的文档类型，默认false</span>    useShortDoctype<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h5 id="7-hash：hash选项的作用是-给生成的-js-文件一个独特的-hash-值，该-hash-值是该次-webpack-编译的-hash-值。默认值为-false-。"><a href="#7-hash：hash选项的作用是-给生成的-js-文件一个独特的-hash-值，该-hash-值是该次-webpack-编译的-hash-值。默认值为-false-。" class="headerlink" title="7.hash：hash选项的作用是 给生成的 js 文件一个独特的 hash 值，该 hash 值是该次 webpack 编译的 hash 值。默认值为 false 。"></a>7.hash：hash选项的作用是 给生成的 js 文件一个独特的 hash 值，该 hash 值是该次 webpack 编译的 hash 值。默认值为 false 。</h5><pre class=" language-javascript"><code class="language-javascript">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    hash<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>编译打包后</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>text/javascript</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>bundle.js?22b9692e22e7be37b57e</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>执行 webpack 命令后，你会看到你的生成的 html 文件的 script 标签内引用的 js 文件，是不是有点变化了。<br>bundle.js 文件后跟的一串 hash 值就是此次 webpack 编译对应的 hash 值。</p><h5 id="8-cache：默认是true的，表示内容变化的时候生成一个新的文件。"><a href="#8-cache：默认是true的，表示内容变化的时候生成一个新的文件。" class="headerlink" title="8.cache：默认是true的，表示内容变化的时候生成一个新的文件。"></a>8.cache：默认是true的，表示内容变化的时候生成一个新的文件。</h5><h5 id="9-showErrors：这个我们自运行项目的时候经常会用到，showErrors-的作用是，如果-webpack-编译出现错误，webpack会将错误信息包裹在一个-pre-标签内，属性的默认值为-true-，也就是显示错误信息。开启这个，方便定位错误"><a href="#9-showErrors：这个我们自运行项目的时候经常会用到，showErrors-的作用是，如果-webpack-编译出现错误，webpack会将错误信息包裹在一个-pre-标签内，属性的默认值为-true-，也就是显示错误信息。开启这个，方便定位错误" class="headerlink" title="9.showErrors：这个我们自运行项目的时候经常会用到，showErrors 的作用是，如果 webpack 编译出现错误，webpack会将错误信息包裹在一个 pre 标签内，属性的默认值为 true ，也就是显示错误信息。开启这个，方便定位错误"></a>9.showErrors：这个我们自运行项目的时候经常会用到，showErrors 的作用是，如果 webpack 编译出现错误，webpack会将错误信息包裹在一个 pre 标签内，属性的默认值为 true ，也就是显示错误信息。开启这个，方便定位错误</h5><h5 id="10-chunks：chunks主要用于多入口文件，当你有多个入口文件，那就回编译后生成多个打包后的文件，那么chunks-就能选择你要使用那些js文件"><a href="#10-chunks：chunks主要用于多入口文件，当你有多个入口文件，那就回编译后生成多个打包后的文件，那么chunks-就能选择你要使用那些js文件" class="headerlink" title="10.chunks：chunks主要用于多入口文件，当你有多个入口文件，那就回编译后生成多个打包后的文件，那么chunks 就能选择你要使用那些js文件"></a>10.chunks：chunks主要用于多入口文件，当你有多个入口文件，那就回编译后生成多个打包后的文件，那么chunks 就能选择你要使用那些js文件</h5><pre class=" language-javascript"><code class="language-javascript">entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>  index<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  devor<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/devor.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  main<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">httpWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">,</span><span class="token string">'main'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>那么编译后：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>text/javascript</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>text/javascript</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>而如果没有指定 chunks 选项，默认会全部引用。</p><h5 id="11-excludeChunks：排除掉一些js"><a href="#11-excludeChunks：排除掉一些js" class="headerlink" title="11.excludeChunks：排除掉一些js,"></a>11.excludeChunks：排除掉一些js,</h5><pre class=" language-javascript"><code class="language-javascript">entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>  index<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  devor<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/devor.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  main<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">httpWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   excludeChunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'devor.js'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//和的等等效</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>那么编译后：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>text/javascript</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>text/javascript</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node.js </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>setTimeout模拟setInterval</title>
      <link href="/2019/04/23/setTimeout%E6%A8%A1%E6%8B%9FsetInterval/"/>
      <url>/2019/04/23/setTimeout%E6%A8%A1%E6%8B%9FsetInterval/</url>
      
        <content type="html"><![CDATA[<p><code>setTimeout</code>和<code>setInterval</code>都是js中的定时器，使用的基本语法相同。它们都有两个参数，一个是将要执行的代码字符串，还有一个是以毫秒为单位的时间间隔。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>区别：</strong>setInterval在执行完一次代码之后，经过指定的时间间隔，执行代码，而setTimeout只执行一次那段代码。</p><p><strong>注意：</strong>假设setTimeout定时器指定时间为1秒，而函数的执行时间是2秒，则setTimeout的总运行总时长为3秒。而setInterval不会被调用的函数所束缚，它只是简单地每隔一定时间就重复执行一次指定的函数。所以在函数的逻辑比较复杂，所处理的时间较长时，setInterval有可能会产生连续干扰的问题。若要避免这一问题，建议通过setTimeout来模拟一个setInterval。</p><p><strong>实现：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 可避免setInterval因执行时间导致的间隔执行时间不一致</span>setTimeout <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// do something</span>  setTimeout <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span></code></pre><p>这里主要用到了<code>arguments.callee</code>，这个属性返回当前正在执行的函数。<br>这里外层的 setTimeout 不要用箭头函数，因为箭头函数没有 arguments 属性。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS模块规范：AMD、UMD、CMD、commonJS、ES6 module</title>
      <link href="/2019/04/18/JS%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83%EF%BC%9AAMD%E3%80%81UMD%E3%80%81CMD%E3%80%81commonJS%E3%80%81ES6%20module/"/>
      <url>/2019/04/18/JS%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83%EF%BC%9AAMD%E3%80%81UMD%E3%80%81CMD%E3%80%81commonJS%E3%80%81ES6%20module/</url>
      
        <content type="html"><![CDATA[<h2 id="1-commonJS"><a href="#1-commonJS" class="headerlink" title="1. commonJS"></a>1. commonJS</h2><p><strong>特点：</strong></p><blockquote><ol><li>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。</li><li>模块加载会阻塞接下来代码的执行，需要等到模块加载完成才能继续执行——同步加载。</li></ol></blockquote><p><strong>环境：</strong>服务器环境<br><strong>应用：</strong>nodejs的模块规范是参照commonJS实现的。<br><strong>语法：</strong></p><blockquote><ol><li>导入：require(‘路径’)</li><li>导出：module.exports和exports</li></ol></blockquote><p><strong>注意：</strong>module.exports和exports的的区别是exports只是对module.exports的一个引用，相当于Node为每个模块提供一个exports变量，指向module.exports。这等同在每个模块头部，有一行var exports = module.exports;这样的命令。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// a.js</span><span class="token comment" spellcheck="true">// 相当于这里还有一行：var exports = module.exports;代码</span>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">'Hello world'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 相当于：module.exports.a = 'Hello world';</span><span class="token comment" spellcheck="true">// b.js</span><span class="token keyword">let</span> moduleA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moduleA<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 打印出hello world</span></code></pre><h2 id="2-AMD"><a href="#2-AMD" class="headerlink" title="2. AMD"></a>2. AMD</h2><p><strong>特点：</strong></p><blockquote><ol><li>异步加载</li><li>管理模块之间的依赖性，便于代码的编写和维护。</li></ol></blockquote><p><strong>环境：</strong>浏览器环境<br><strong>应用：</strong>requireJS是参照AMD规范实现的<br><strong>语法：</strong></p><blockquote><ol><li>导入：require([‘模块名称’], function (‘模块变量引用’){// 代码});</li><li>导出：define(function (){return ‘值’);</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// a.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　<span class="token keyword">return</span> <span class="token punctuation">{</span>　　　a<span class="token punctuation">:</span><span class="token string">'hello world'</span>　　<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// b.js</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./a.js'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>moduleA<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moduleA<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印出：hello world</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-CMD"><a href="#3-CMD" class="headerlink" title="3. CMD"></a>3. CMD</h2><p><strong>特点：</strong>CMD是在AMD基础上改进的一种规范，和AMD不同在于对依赖模块的执行时机处理不同，CMD是就近依赖，而AMD是前置依赖。<br><strong>环境：</strong>浏览器环境<br><strong>应用：</strong>seajs是参照UMD规范实现的，requireJS的最新的几个版本也是部分参照了UMD规范的实现<br><strong>语法：</strong></p><blockquote><ol><li>导入：define(function(require, exports, module) {});</li><li>导出：define(function (){return ‘值’);</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// a.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">{</span>　　exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// b.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> moduleA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moduleA<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印出：hello world</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4-UMD"><a href="#4-UMD" class="headerlink" title="4. UMD"></a>4. UMD</h2><p><strong>特点：</strong>兼容AMD和commonJS规范的同时，还兼容全局引用的方式<br><strong>环境：</strong>浏览器或服务器环境<br><strong>应用：</strong>无<br><strong>语法：</strong>无导入导出规范，只有如下的一个常规写法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>root<span class="token punctuation">,</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//AMD</span>        <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jquery'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Node, CommonJS之类的</span>        module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jquery'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//浏览器全局变量(root 即 window)</span>        root<span class="token punctuation">.</span>returnExports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方法</span>    <span class="token keyword">function</span> <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//暴露公共方法</span>    <span class="token keyword">return</span> myFunc<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="5-ES6-module"><a href="#5-ES6-module" class="headerlink" title="5.ES6 module"></a>5.ES6 module</h2><p><strong>特点：</strong></p><blockquote><ol><li>按需加载（编译时加载）</li><li>import和export命令只能在模块的顶层，不能在代码块之中（如：if语句中）,import()语句可以在代码块中实现异步动态按需动态加载</li></ol></blockquote><p><strong>环境：</strong>浏览器或服务器环境（以后可能支持）<br><strong>应用：</strong>ES6的最新语法支持规范<br><strong>语法：</strong></p><blockquote><ol><li>导入：import {模块名A，模块名B…} from ‘模块路径’</li><li>导出：export和export default</li><li>import(‘模块路径’).then()方法</li></ol></blockquote><p><strong>注意：</strong>export只支持对象形式导出，不支持值的导出，export default命令用于指定模块的默认输出，只支持值导出，但是只能指定一个，本质上它就是输出一个叫做default的变量或方法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*错误的写法*/</span><span class="token comment" spellcheck="true">// 写法一</span><span class="token keyword">export</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写法二</span><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> m<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写法三</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">import</span> MyModual <span class="token keyword">from</span> <span class="token string">'./myModual'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*正确的三种写法*/</span><span class="token comment" spellcheck="true">// 写法一</span><span class="token keyword">export</span> <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写法二</span><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span>m<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写法三</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span>n <span class="token keyword">as</span> m<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写法四</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写法五</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./myModule.js'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span>export1<span class="token punctuation">,</span> export2<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...·</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 写法六</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./module1.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./module2.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./module3.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>module1<span class="token punctuation">,</span> module2<span class="token punctuation">,</span> module3<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   ···<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6中的export、import、export default详解</title>
      <link href="/2019/04/08/ES6%E4%B8%AD%E7%9A%84export%E3%80%81import%E3%80%81export%20default%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/04/08/ES6%E4%B8%AD%E7%9A%84export%E3%80%81import%E3%80%81export%20default%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在ES5中，如果你的js文件是依赖于其他js文件（例如：jquery、bootsrap.js等），那么你必须在html中先加载这些依赖，也就是要控制好每个js的加载顺序。想想为什么不能像java和Python中的import方式来解决呢？</p><p>其实在ES6中就引入了export与import概念，将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。</p><h2 id="二、export"><a href="#二、export" class="headerlink" title="二、export"></a>二、export</h2><p>官方对export的解释是：</p><blockquote><p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。</p></blockquote><p>这句话的意思其实可以这样理解，一个模块可以理解为一个类，引用这个类的文件无法获取类里面的所有变量（类似于类属性设置为private），想要让引用它的文件可以访问内部变量必须用export关键字输出（类似于类属性设置为public），总之一句话，要使用引用文件内部变量只能使用export关键字输出。<br>那么应该如何使用export？<br><strong>1、示例用法：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 输出变量用法1</span><span class="token keyword">export</span> <span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token string">'Michael'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> lastName <span class="token operator">=</span> <span class="token string">'Jackson'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> year <span class="token operator">=</span> <span class="token number">1958</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出变量用法2</span><span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token string">'Michael'</span><span class="token punctuation">;</span><span class="token keyword">let</span> lastName <span class="token operator">=</span> <span class="token string">'Jackson'</span><span class="token punctuation">;</span><span class="token keyword">let</span> year <span class="token operator">=</span> <span class="token number">1958</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> year<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出函数用法1</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出函数用法2</span><span class="token keyword">function</span> <span class="token function">v1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">v2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span>  v1 <span class="token keyword">as</span> streamV1<span class="token punctuation">,</span>  v2 <span class="token keyword">as</span> streamV2<span class="token punctuation">,</span>  v2 <span class="token keyword">as</span> streamLatestVersion<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出类</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span></code></pre><p><strong>2、错误示例：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">export</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> m<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上面两种写法都会报错，因为没有提供对外的接口，两种错误其实都是因为直接输出值了</span><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">export</span> f<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以上错误跟上面的相同，必须提供的是接口</span><span class="token comment" spellcheck="true">//报错</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">'bar'</span> <span class="token comment" spellcheck="true">// SyntaxError</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这种错误是因为export命令必须处于模块顶层才可以，也就是不能出现在代码块里面</span></code></pre><h2 id="三、import"><a href="#三、import" class="headerlink" title="三、import"></a>三、import</h2><p>使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。<br><strong>1、用法示例</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// main.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> year<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./profile'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">setName</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>  element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><ol><li>上面代码的import命令，用于加载profile.js文件，并从中输入变量。import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。</li><li>如果想为输入的变量重新取一个名字，import命令要使用as关键字，将输入的变量重命名。</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> lastName <span class="token keyword">as</span> surname <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./profile'</span><span class="token punctuation">;</span></code></pre><p><strong>2、提升效果</strong><br>import命令具有提升效果，会提升到整个模块的头部，首先执行。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'my_module'</span><span class="token punctuation">;</span></code></pre><p>上面的代码不会报错，因为import的执行早于foo的调用。这种行为的本质是，import命令是编译阶段执行的，在代码运行之前。</p><p><strong>3、不能使用表达式和变量</strong><br>由于import是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">/</span> 报错<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token string">'f'</span> <span class="token operator">+</span> <span class="token string">'oo'</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'my_module'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token string">'my_module'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> module<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'module1'</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'module2'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面三种写法都会报错，因为它们用到了表达式、变量和if结构。在静态分析阶段，这些语法都是没法得到值的。</p><p><strong>4、不重复加载</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'my_module'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> bar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'my_module'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">import</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'my_module'</span><span class="token punctuation">;</span></code></pre><p>上面代码中，虽然foo和bar在两个语句中加载，但是它们对应的是同一个my_module实例。也就是说，import语句是 Singleton 模式。</p><p><strong>5、同export一样的import不能出现在代码块</strong><br>由于import是编译时加载</p><h2 id="四、export-default"><a href="#四、export-default" class="headerlink" title="四、export default"></a>四、export default</h2><p>从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。</p><p>为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到export default命令，为模块指定默认输出。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// export-default.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面代码是一个模块文件export-default.js，它的默认输出是一个函数。<br>其他模块加载该模块时，import命令可以为该匿名函数指定任意名字。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// import-default.js</span><span class="token keyword">import</span> customName <span class="token keyword">from</span> <span class="token string">'./export-default'</span><span class="token punctuation">;</span><span class="token function">customName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'foo'</span></code></pre><p>上面代码的import命令，可以用任意名称指向export-default.js输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时import命令后面，不使用大括号。<br>export default命令用在非匿名函数前，也是可以的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// export-default.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 或者写成</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> foo<span class="token punctuation">;</span></code></pre><p>上面代码中，foo函数的函数名foo，在模块外部是无效的。加载的时候，视同匿名函数加载。<br>下面比较一下默认输出和正常输出。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 第一组</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">crc32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 输出</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">import</span> crc32 <span class="token keyword">from</span> <span class="token string">'crc32'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入</span><span class="token comment" spellcheck="true">// 第二组</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">crc32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 输出</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>crc32<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'crc32'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入</span></code></pre><p>上面代码的两组写法，第一组是使用export default时，对应的import语句不需要使用大括号；第二组是不使用export default时，对应的import语句需要使用大括号。</p><p>export default命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此export default命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能对应一个方法。</p><p>本质上，export default就是输出一个叫做default的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// modules.js</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span>add <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token comment" spellcheck="true">// export default add;</span><span class="token comment" spellcheck="true">// app.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> xxx <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'modules'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token comment" spellcheck="true">// import xxx from 'modules';</span><span class="token comment" spellcheck="true">// 正是因为export default命令其实只是输出一个叫做default的变量，所以它后面不能跟变量声明语句。</span><span class="token comment" spellcheck="true">// 正确</span><span class="token keyword">export</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 正确</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 错误</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>上面代码中，export default a的含义是将变量a的值赋给变量default。所以，最后一种写法会报错。</p><p>同样地，因为export default本质是将该命令后面的值，赋给default变量以后再默认，所以直接将一个值写在export default之后。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 正确</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">export</span> <span class="token number">42</span><span class="token punctuation">;</span></code></pre><p>上面代码中，后一句报错是因为没有指定对外的接口，而前一句指定外对接口为default。</p><p>有了export default命令，输入模块时就非常直观了，以输入 lodash 模块为例。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> _ <span class="token keyword">from</span> ‘lodash’<span class="token punctuation">;</span></code></pre><p>如果想在一条import语句中，同时输入默认方法和其他变量，可以写成下面这样。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> _<span class="token punctuation">,</span> <span class="token punctuation">{</span> each <span class="token punctuation">}</span> <span class="token keyword">from</span> ‘lodash’<span class="token punctuation">;</span></code></pre><p>对应上面代码的export语句如下。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">each</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span> each <span class="token keyword">as</span> forEach <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>上面代码的最后一行的意思是，暴露出forEach接口，默认指向each接口，即forEach和each指向同一个方法。</p><p>export default也可以用来输出类。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// MyClass.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// main.js</span><span class="token keyword">import</span> MyClass <span class="token keyword">from</span> <span class="token string">'MyClass'</span><span class="token punctuation">;</span><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ES6是未来，虽然现在很多浏览器都还不支持（现在可以通过babel将es6转成es5），但是有些很好的框架已经运用es6语法了，比如Vue，所以了解es6语法还是很有必要的。比如Vue组件化开发就采用export default去构建一个组件</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js当中的全局成员与path模块的使用总结</title>
      <link href="/2019/03/12/Node.js%E5%BD%93%E4%B8%AD%E7%9A%84%E5%85%A8%E5%B1%80%E6%88%90%E5%91%98%E4%B8%8Epath%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/12/Node.js%E5%BD%93%E4%B8%AD%E7%9A%84%E5%85%A8%E5%B1%80%E6%88%90%E5%91%98%E4%B8%8Epath%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、node-js全局成员"><a href="#一、node-js全局成员" class="headerlink" title="一、node.js全局成员"></a>一、node.js全局成员</h2><h3 id="1、global"><a href="#1、global" class="headerlink" title="1、global"></a>1、global</h3><p>在浏览器的平台环境当中，全局对象为window，即任何一个定义在全局环境当中的变量都可以用window这个对象获取到。node环境当中的全局对象为global,它类似于客户端javascript运行环境当中的window。<br><img src="/medias/postimages/27.png" alt="效果图" title="效果图"></p><h3 id="2、process"><a href="#2、process" class="headerlink" title="2、process"></a>2、process</h3><p>该对象用于获取当前Node进程的信息，一般用于获取环境变量之类的信息。<br><strong>2.1、process.env</strong><br>该属性用于获取当前操作系统当中配置的环境变量，为一个对象，其中每一个成员以键值对的形式出现。当使用process.env.PATH，则可以打印出环境变量当中PATH对应的值。<br><img src="/medias/postimages/28.png" alt="效果图" title="效果图"></p><p><strong>2.2、process.argv</strong><br>该属性用于获取当前在命令行当中传入的参数，以字符串数组的形式打印出argv当中的所有成员。<br><img src="/medias/postimages/29.png" alt="效果图" title="效果图"><br>在用node来运行某个js文件时，传递的参数紧跟其后，各个参数之间用空格相隔。在任何情况下，argv当中的第一个成员都是node.exe所在的绝对物理路径，第二个成员为正在执行的这个js文件的绝对物理路径，从第三个成员开始才是用户在命令行当中传入的各个参数。故我们可用process.argv.slice(2)的方式去掉前两个成员。</p><p><strong>2.3、process.stdout</strong><br>该属性用于在控制台进行标准输出的操作。<br><img src="/medias/postimages/30.png" alt="效果图" title="效果图"></p><h3 id="3、两个常用的模块内部的伪全局成员"><a href="#3、两个常用的模块内部的伪全局成员" class="headerlink" title="3、两个常用的模块内部的伪全局成员"></a>3、两个常用的模块内部的伪全局成员</h3><p><strong>3.1、 __dirname</strong><br>该成员用于获取当前这个js文件所在目录（所在文件夹）的完成的绝对物理路径。该成员只在模块内部有效，在REPL环境当中失效。</p><p><strong>3.2、__filename</strong><br>该成员用于获取当前这个js文件的完成的绝对物理路径。该成员只在模块内部有效，在REPL环境当中失效。<br><img src="/medias/postimages/31.png" alt="效果图" title="效果图"><br>由于在node当中所有的文件操作，为了避免出错，所有的文件路径都必须使用绝对物理路径，故这两个成员应用十分广泛。</p><h2 id="二、node-js当中的path模块"><a href="#二、node-js当中的path模块" class="headerlink" title="二、node.js当中的path模块"></a>二、node.js当中的path模块</h2><h3 id="1、path-join-p1-p2"><a href="#1、path-join-p1-p2" class="headerlink" title="1、path.join(p1,p2)"></a>1、path.join(p1,p2)</h3><p>该方法用于完成路径的拼接，用多个字符串来表示多个路径，各个元素之间用逗号相隔。<br><img src="/medias/postimages/32.png" alt="效果图" title="效果图"></p><h3 id="2、path-basename-p-ext"><a href="#2、path-basename-p-ext" class="headerlink" title="2、path.basename(p[,ext])"></a>2、path.basename(p[,ext])</h3><p>该方法用于获取一个完成的文件路径当中的文件名部分，若传入第二个后缀名参数，则可以得到没有后缀名的文件名。<br><img src="/medias/postimages/33.png" alt="效果图" title="效果图"></p><h3 id="3、path-dirname-p"><a href="#3、path-dirname-p" class="headerlink" title="3、path.dirname(p)"></a>3、path.dirname(p)</h3><p>该方法用于获取一个完整的文件路径当中的文件所在的目录（文件夹）的路径地址。<br><img src="/medias/postimages/34.png" alt="效果图" title="效果图"></p><h3 id="4、path-delimiter"><a href="#4、path-delimiter" class="headerlink" title="4、path.delimiter"></a>4、path.delimiter</h3><p>该属性用于获取当前操作系统当中默认的路径分隔符，在windows下默认的路径分割符为”;”,而在linux系统下的默认的路径分隔符为”:”。<br><img src="/medias/postimages/35.png" alt="效果图" title="效果图"></p><h3 id="5、path-extname-p"><a href="#5、path-extname-p" class="headerlink" title="5、path.extname(p)"></a>5、path.extname(p)</h3><p>该方法用于获取一个完整的文件路径当中文件的后缀名（扩展名）。<br><img src="/medias/postimages/36.png" alt="效果图" title="效果图"></p><h3 id="6、path-parse-pathString"><a href="#6、path-parse-pathString" class="headerlink" title="6、path.parse(pathString)"></a>6、path.parse(pathString)</h3><p>该方法用于将一个字符串类型的路径转化为一个路径对象（pathObject）。该路径对象当中包括文件目录，文件名，扩展名等。<br><img src="/medias/postimages/37.png" alt="效果图" title="效果图"></p><h3 id="7、path-format-pathObject"><a href="#7、path-format-pathObject" class="headerlink" title="7、path.format(pathObject)"></a>7、path.format(pathObject)</h3><p>该方法用于将一个路径对象转化为一个字符串类型的路径（pathString）。<br><img src="/medias/postimages/38.png" alt="效果图" title="效果图"></p><h3 id="8、path-isAbsolute-p"><a href="#8、path-isAbsolute-p" class="headerlink" title="8、path.isAbsolute(p)"></a>8、path.isAbsolute(p)</h3><p>该方法用于传入的路径字符串对应的路径是绝对路径还是相对路径，返回值为true或false。（这里只是对路径进行判断，不涉及文件操作，所以该路径当中的文件是否存在并不会影响其判断结果）。<br><img src="/medias/postimages/39.png" alt="效果图" title="效果图"></p><h3 id="9、path-normalize-p"><a href="#9、path-normalize-p" class="headerlink" title="9、path.normalize(p)"></a>9、path.normalize(p)</h3><p>该方法用于常规化一个路径字符串，它会判断当前操作系统为windows还是linux，从而来选择正斜杠还是反斜杠来常规化这个路径。同时也会处理路径当中出现多个路径分割符的问题。<br><img src="/medias/postimages/40.png" alt="效果图" title="效果图"></p><h3 id="10、path-relative-from-to"><a href="#10、path-relative-from-to" class="headerlink" title="10、path.relative(from,to)"></a>10、path.relative(from,to)</h3><p>该方法用于获取to相对于from的相对路径，其中要求传入的from和to的参数均为路径字符串，并且都要求为绝对路径。<br><img src="/medias/postimages/41.png" alt="效果图" title="效果图"></p><h3 id="11、path-resolve-from…-to"><a href="#11、path-resolve-from…-to" class="headerlink" title="11、path.resolve([from…],to)"></a>11、path.resolve([from…],to)</h3><p>该方法类似于path.join()，可以传入多个绝对路径字符串或相对路径字符串，最后完成路径拼接。<br><img src="/medias/postimages/42.png" alt="效果图" title="效果图"></p><h3 id="12、path-sep"><a href="#12、path-sep" class="headerlink" title="12、path.sep"></a>12、path.sep</h3><p>该属性用于获取当前操作系统当中默认使用的路径成员分隔符。windows系统和linux系统当中默认的路径成员分隔符是不同的。<br><img src="/medias/postimages/43.png" alt="效果图" title="效果图"></p><h3 id="13、path-win32和path-posix"><a href="#13、path-win32和path-posix" class="headerlink" title="13、path.win32和path.posix"></a>13、path.win32和path.posix</h3><p>这两个均为属性。</p><blockquote><ol><li>path：会根据当前操作系统来确定是使用windows的方式来操作路径，还是使用linux的方式来操作路径。</li><li>path.win32：允许在任意操作系统上使用windows的方式来操作路径。</li><li>path.posix：允许在任意操作系统上使用linux的方式来操作路径。</li></ol></blockquote><p>故在windows系统中，path==path.win32，而在linux系统当中，path==path.posix。<br><img src="/medias/postimages/44.png" alt="效果图" title="效果图"><br><img src="/medias/postimages/45.png" alt="效果图" title="效果图"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（搬运）30道Vue面试题</title>
      <link href="/2019/03/01/(%E6%90%AC%E8%BF%90)30%E9%81%93Vue%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/03/01/(%E6%90%AC%E8%BF%90)30%E9%81%93Vue%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1、说说你对-SPA-单页面的理解，它的优缺点分别是什么？"><a href="#1、说说你对-SPA-单页面的理解，它的优缺点分别是什么？" class="headerlink" title="1、说说你对 SPA 单页面的理解，它的优缺点分别是什么？"></a>1、说说你对 SPA 单页面的理解，它的优缺点分别是什么？</h2><p>SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。</p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><blockquote><ol><li>用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；</li><li>基于上面一点，SPA 相对对服务器压力小；</li><li>前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；</li></ol></blockquote><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><blockquote><ol><li>初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；</li><li>前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；</li><li>SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。</li></ol></blockquote><h2 id="2、v-show-与-v-if-有什么区别？"><a href="#2、v-show-与-v-if-有什么区别？" class="headerlink" title="2、v-show 与 v-if 有什么区别？"></a>2、v-show 与 v-if 有什么区别？</h2><p><code>v-if</code> 是真正的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p><code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 “display” 属性进行切换。</p><p>所以，<code>v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；v-show 则适用于需要非常频繁切换条件的场景。</code></p><h2 id="3、Class-与-Style-如何动态绑定？"><a href="#3、Class-与-Style-如何动态绑定？" class="headerlink" title="3、Class 与 Style 如何动态绑定？"></a>3、Class 与 Style 如何动态绑定？</h2><p><code>Class 可以通过对象语法和数组语法进行动态绑定：</code></p><h5 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{class1: class1, class2: class2}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    class1<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    class2<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>渲染结果：<code>&lt;div class=&quot;class1&quot;&gt;&lt;/div&gt;</code></p><h5 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>class1<span class="token punctuation">'</span>, class2 ? <span class="token punctuation">'</span>class2<span class="token punctuation">'</span> : <span class="token punctuation">'</span><span class="token punctuation">'</span>, class3]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    class2<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    class3<span class="token punctuation">:</span> class3  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>渲染结果：<code>&lt;div class=&quot;class1 class2 class3&quot;&gt;&lt;/div&gt;</code><br><code>style 也可以通过对象语法和数组语法进行动态绑定：</code></p><h5 id="对象语法-1"><a href="#对象语法-1" class="headerlink" title="对象语法"></a>对象语法</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">fontSize</span><span class="token punctuation">:</span> fontSize, <span class="token property">color</span><span class="token punctuation">:</span> color<span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 或者 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">divStyle</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    fontSize<span class="token punctuation">:</span> <span class="token string">'30px'</span><span class="token punctuation">,</span>    color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>    divStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>      fontSize<span class="token punctuation">:</span> <span class="token string">'30px'</span><span class="token punctuation">,</span>      color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="数组语法-1"><a href="#数组语法-1" class="headerlink" title="数组语法"></a>数组语法</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">[fontStyle, colorStyle]</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    fontStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>      fontSize<span class="token punctuation">:</span> <span class="token string">'30px'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    colorStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>      color<span class="token punctuation">:</span> <span class="token string">'red'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="4、怎样理解-Vue-的单向数据流？"><a href="#4、怎样理解-Vue-的单向数据流？" class="headerlink" title="4、怎样理解 Vue 的单向数据流？"></a>4、怎样理解 Vue 的单向数据流？</h2><p>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：<code>父级 prop 的更新会向下流动到子组件中，但是反过来则不行。</code>这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p><p>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。子组件想修改时，<code>只能通过 $emit 派发一个自定义事件，父组件接收到后，由父组件修改</code>。</p><h5 id="有三种常见的试图改变一个-prop-的情形"><a href="#有三种常见的试图改变一个-prop-的情形" class="headerlink" title="有三种常见的试图改变一个 prop 的情形 :"></a>有三种常见的试图改变一个 prop 的情形 :</h5><ol><li><p><code>这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。</code> 在这种情况下，最好定义一个本地的 data 属性并将这个 prop 用作其初始值。</p><pre class=" language-javascript"><code class="language-javascript"> Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'child-com'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>   props<span class="token punctuation">:</span> <span class="token punctuation">{</span>     message<span class="token punctuation">:</span> String   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span>       myMessage<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>这个 prop 以一种原始的值传入且需要进行转换。 在这种情况下，最好使用这个 prop 的值来定义一个计算属性。</p><pre class=" language-javascript"><code class="language-javascript"> Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'child-com'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>   props<span class="token punctuation">:</span> <span class="token punctuation">{</span>     message<span class="token punctuation">:</span> String   <span class="token punctuation">}</span><span class="token punctuation">,</span>   computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token function">myMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>父组件在传递数据时可以配合使用修饰符<code>sync</code></p><pre class=" language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!-- 父组件html --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-com</span> <span class="token attr-name">:message.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-com</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 父组件javascript</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>   <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span>       message<span class="token punctuation">:</span> <span class="token string">'hello world'</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!-- child-com--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeMessage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改父组件message的值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// child-com</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>   methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token function">changeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'update:message'</span><span class="token punctuation">,</span> <span class="token string">'message is changed'</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ol><h2 id="5、computed-和-watch-的区别和运用的场景？"><a href="#5、computed-和-watch-的区别和运用的场景？" class="headerlink" title="5、computed 和 watch 的区别和运用的场景？"></a>5、computed 和 watch 的区别和运用的场景？</h2><p><code>computed</code>： 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；</p><p><code>watch</code>： 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</p><h5 id="运用场景："><a href="#运用场景：" class="headerlink" title="运用场景："></a>运用场景：</h5><blockquote><ol><li>当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</li><li>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li></ol></blockquote><h2 id="6、直接给一个数组项赋值，Vue-能检测到变化吗？"><a href="#6、直接给一个数组项赋值，Vue-能检测到变化吗？" class="headerlink" title="6、直接给一个数组项赋值，Vue 能检测到变化吗？"></a>6、直接给一个数组项赋值，Vue 能检测到变化吗？</h2><p>由于 JavaScript 的限制，Vue 不能检测到以下数组的变动：</p><blockquote><ol><li>当你利用索引直接设置一个数组项时，例如：vm.items[indexOfItem] = newValue</li><li>当你修改数组的长度时，例如：vm.items.length = newLength</li></ol></blockquote><p>解决办法：使用 Vue 提供的<code>Vue.set</code>、<code>vm.$set</code>或者是<code>数组的变异方法</code><br>数组的变异方法有：</p><blockquote><ol><li>Array.prototype.push</li><li>Array.prototype.pop</li><li>Array.prototype.unshift</li><li>Array.prototype.shift</li><li>Array.prototype.splice</li><li>Array.prototype.reverse</li><li>Array.prototype.sort</li></ol></blockquote><h2 id="7、谈谈你对-Vue-生命周期的理解？"><a href="#7、谈谈你对-Vue-生命周期的理解？" class="headerlink" title="7、谈谈你对 Vue 生命周期的理解？"></a>7、谈谈你对 Vue 生命周期的理解？</h2><p>生命周期可以理解为一个对象的生老病死，每一个状态。<br>Vue也是一样的，Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模版、挂载 Dom -&gt; 渲染、更新 -&gt; 渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。</p><h2 id="8、Vue-的父组件和子组件生命周期钩子函数执行顺序？"><a href="#8、Vue-的父组件和子组件生命周期钩子函数执行顺序？" class="headerlink" title="8、Vue 的父组件和子组件生命周期钩子函数执行顺序？"></a>8、Vue 的父组件和子组件生命周期钩子函数执行顺序？</h2><p><strong>Vue 的父组件和子组件生命周期钩子函数执行顺序可以归类为以下 4 部分：</strong><br><strong>加载渲染过程</strong></p><blockquote><p>父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</p></blockquote><p><strong>子组件更新过程</strong></p><blockquote><p>父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</p></blockquote><p><strong>父组件更新过程</strong></p><blockquote><p>父 beforeUpdate -&gt; 父 updated</p></blockquote><p><strong>销毁过程</strong></p><blockquote><p>父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</p></blockquote><h2 id="9、在哪个生命周期内调用异步请求？"><a href="#9、在哪个生命周期内调用异步请求？" class="headerlink" title="9、在哪个生命周期内调用异步请求？"></a>9、在哪个生命周期内调用异步请求？</h2><p>可以在钩子函数 <code>created、beforeMount、mounted</code> 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。但是本人推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：</p><blockquote><ol><li>能更快获取到服务端数据，减少页面 loading 时间；</li><li>ssr 不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；</li></ol></blockquote><h2 id="10、在什么阶段才能访问操作DOM？"><a href="#10、在什么阶段才能访问操作DOM？" class="headerlink" title="10、在什么阶段才能访问操作DOM？"></a>10、在什么阶段才能访问操作DOM？</h2><p>在钩子函数 mounted 被调用前，Vue 已经将编译好的模板挂载到页面上，所以在 <code>mounted</code> 中可以访问操作 DOM。</p><h2 id="11、父组件可以监听到子组件的生命周期吗？"><a href="#11、父组件可以监听到子组件的生命周期吗？" class="headerlink" title="11、父组件可以监听到子组件的生命周期吗？"></a>11、父组件可以监听到子组件的生命周期吗？</h2><pre class=" language-html"><code class="language-html">// Parent.vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">@mounted</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>// Child.vuemounted() {  this.$emit("mounted");}</code></pre><p>以上需要手动通过 $emit 触发父组件的事件，更简单的方式可以在父组件引用子组件时通过 @hook 来监听即可，如下所示：</p><pre class=" language-html"><code class="language-html">//  Parent.vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name"><span class="token namespace">@hook:</span>mounted</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child</span><span class="token punctuation">></span></span>doSomething() {   console.log('父组件监听到 mounted 钩子函数 ...');},//  Child.vuemounted(){   console.log('子组件触发 mounted 钩子函数 ...');},    // 以上输出顺序为：// 子组件触发 mounted 钩子函数 ...// 父组件监听到 mounted 钩子函数 ...     </code></pre><p>当然 @hook 方法不仅仅是可以监听 mounted，经实测，在单文件组件中，其它所有的生命周期事件都可以监听。</p><h2 id="12、谈谈你对-keep-alive-的了解？"><a href="#12、谈谈你对-keep-alive-的了解？" class="headerlink" title="12、谈谈你对 keep-alive 的了解？"></a>12、谈谈你对 keep-alive 的了解？</h2><p>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：</p><blockquote><ol><li>一般结合路由和动态组件一起使用，用于缓存组件；</li><li>提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高；</li><li>对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。</li></ol></blockquote><h2 id="13、组件中-data-为什么是一个函数？"><a href="#13、组件中-data-为什么是一个函数？" class="headerlink" title="13、组件中 data 为什么是一个函数？"></a>13、组件中 data 为什么是一个函数？</h2><p>为什么组件中的 data 必须是一个函数，然后 return 一个对象，而 new Vue 实例里，data 可以直接是一个对象？</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// data</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">"子组件"</span><span class="token punctuation">,</span>        childName<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>name    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// new Vue</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>App<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>因为组件是用来复用的，且 JS 里对象是引用关系，如果组件中 data 是一个对象，那么这样作用域没有隔离，子组件中的 data 属性值会相互影响，如果组件中 data 选项是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的 data 属性值不会互相影响；而 new Vue 的实例，是不会被复用的，因此不存在引用对象的问题。</p><h2 id="14、v-model-的原理？"><a href="#14、v-model-的原理？" class="headerlink" title="14、v-model 的原理？"></a>14、v-model 的原理？</h2><p>我们在 vue 项目中主要使用 v-model 指令在表单 <code>input、textarea、select</code> 等元素上创建双向数据绑定，我们知道 v-model 本质上不过是语法糖，v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p><blockquote><ol><li>text 和 textarea 元素使用 value 属性和 input 事件；</li><li>checkbox 和 radio 使用 checked 属性和 change 事件；</li><li>select 字段将 value 作为 prop 并将 change 作为事件。</li></ol></blockquote><p><strong>以 input 表单元素为例：</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>something<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--相当于--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>something<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>something <span class="token punctuation">=</span> $event.target.value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>如果在自定义组件中，v-model 默认会利用名为 value 的 prop 和名为 input 的事件，如下所示：</p><pre class=" language-html"><code class="language-html">父组件：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ModelChild</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ModelChild</span><span class="token punctuation">></span></span>子组件：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{value}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>props:{    value: String},methods: {  test1(){     this.$emit('input', '小红')  }}</code></pre><h2 id="15、Vue-组件间通信有哪几种方式？"><a href="#15、Vue-组件间通信有哪几种方式？" class="headerlink" title="15、Vue 组件间通信有哪几种方式？"></a>15、Vue 组件间通信有哪几种方式？</h2><p>Vue 组件间通信是面试常考的知识点之一，这题有点类似于开放题，你回答出越多方法当然越加分，表明你对 Vue 掌握的越熟练。Vue 组件间通信只要指以下 3 类通信：父子组件通信、隔代组件通信、兄弟组件通信，下面我们分别介绍每种通信方式且会说明此种方法可适用于哪类组件间通信。<br><strong>（1）props / $emit 适用 父子组件通信</strong></p><blockquote><p>这种方法是 Vue 组件的基础，相信大部分同学耳闻能详，所以此处就不举例展开介绍。</p></blockquote><p><strong>（2）ref 与 $parent / $children 适用 父子组件通信</strong></p><blockquote><ol><li>ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</li><li>$parent / $children：访问父 / 子实例</li></ol></blockquote><p><strong>（3）EventBus （$emit / $on） 适用于 父子、隔代、兄弟组件通信</strong></p><blockquote><p>这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。</p></blockquote><p><strong>（4）$attrs/$listeners 适用于 隔代组件通信</strong></p><blockquote><ol><li>$attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class 和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过 v-bind=”$attrs” 传入内部组件。通常配合 inheritAttrs 选项一起使用。</li><li>$listeners：包含了父作用域中的 (不含 .native 修饰器的)  v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件</li></ol></blockquote><p><strong>（5）provide / inject 适用于 隔代组件通信</strong></p><blockquote><p>祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。 provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。</p></blockquote><p><strong>（6）Vuex 适用于 父子、隔代、兄弟组件通信</strong></p><blockquote><ol><li>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</li><li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li><li>改变 store 中的状态的唯一途径就是显式地提交  (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</li></ol></blockquote><h2 id="16、你使用过-Vuex-吗？"><a href="#16、你使用过-Vuex-吗？" class="headerlink" title="16、你使用过 Vuex 吗？"></a>16、你使用过 Vuex 吗？</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</p><p>（1）Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p><p>（2）改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</p><p>主要包括以下几个模块：</p><blockquote><ol><li>State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。</li><li>Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。</li><li>Mutation：是唯一更改 store 中状态的方法，且必须是同步函数。</li><li>Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。</li><li>Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。</li></ol></blockquote><h2 id="17、使用过-Vue-SSR-吗？说说-SSR？"><a href="#17、使用过-Vue-SSR-吗？说说-SSR？" class="headerlink" title="17、使用过 Vue SSR 吗？说说 SSR？"></a>17、使用过 Vue SSR 吗？说说 SSR？</h2><p>Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记”激活”为客户端上完全可交互的应用程序。<br>即：SSR大致的意思就是vue在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的html 片段直接返回给客户端这个过程就叫做服务端渲染。</p><h2 id="18、vue-router-路由模式有几种？"><a href="#18、vue-router-路由模式有几种？" class="headerlink" title="18、vue-router 路由模式有几种？"></a>18、vue-router 路由模式有几种？</h2><p>vue-router 有 3 种路由模式：hash、history、abstract，对应的源码如下所示：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token string">'history'</span><span class="token punctuation">:</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTML5History</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>base<span class="token punctuation">)</span>    <span class="token keyword">break</span>  <span class="token keyword">case</span> <span class="token string">'hash'</span><span class="token punctuation">:</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashHistory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>base<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fallback<span class="token punctuation">)</span>    <span class="token keyword">break</span>  <span class="token keyword">case</span> <span class="token string">'abstract'</span><span class="token punctuation">:</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbstractHistory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>base<span class="token punctuation">)</span>    <span class="token keyword">break</span>  <span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">assert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`invalid mode: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中，3 种路由模式的说明如下：</p><blockquote><ol><li>hash:  使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器；</li><li>history :  依赖 HTML5 History API 和服务器配置。具体可以查看 HTML5 History 模式；</li><li>abstract :  支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.</li></ol></blockquote><h2 id="19、能说下-vue-router-中常用的-hash-和-history-路由模式实现原理吗？"><a href="#19、能说下-vue-router-中常用的-hash-和-history-路由模式实现原理吗？" class="headerlink" title="19、能说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？"></a>19、能说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？</h2><p><strong>（1）hash 模式的实现原理</strong><br>早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 ‘#search’：</p><pre class=" language-text"><code class="language-text">https://www.word.com#search</code></pre><p><strong>hash  路由模式的实现主要是基于下面几个特性：</strong></p><blockquote><ol><li>URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；</li><li>hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制hash 的切换；</li><li>可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变；或者使用  JavaScript 来对 loaction.hash 进行赋值，改变 URL 的 hash 值；</li><li>我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。</li></ol></blockquote><p><strong>（2）history 模式的实现原理</strong><br>HTML5 提供了 History API 来实现 URL 的变化。其中做最主要的 API 有以下两个：history.pushState() 和 history.repalceState()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：</p><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>history 路由模式的实现主要基于存在下面几个特性：</strong></p><blockquote><ol><li>pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；</li><li>我们可以使用 popstate  事件来监听 url 的变化，从而对页面进行跳转（渲染）；</li><li>history.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。</li></ol></blockquote><h2 id="20、什么是-MVVM？"><a href="#20、什么是-MVVM？" class="headerlink" title="20、什么是 MVVM？"></a>20、什么是 MVVM？</h2><p>Model–View–ViewModel （MVVM） 是一个软件架构设计模式，由微软 WPF 和 Silverlight 的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的事件驱动编程方式。由 John Gossman（同样也是 WPF 和 Silverlight 的架构师）于2005年在他的博客上发表</p><p>MVVM 源自于经典的 Model–View–Controller（MVC）模式  ，MVVM 的出现促进了前端开发与后端业务逻辑的分离，极大地提高了前端开发效率，MVVM 的核心是 ViewModel 层，它就像是一个中转站（value converter），负责转换 Model 中的数据对象来让数据变得更容易管理和使用，该层向上与视图层进行双向数据绑定，向下与 Model 层通过接口请求进行数据交互，起呈上启下作用。</p><p><strong>（1）View 层</strong><br>View 是视图层，也就是用户界面。前端主要由 HTML 和 CSS 来构建 。</p><p><strong>（2）Model 层</strong><br>Model 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，对于前端来说就是后端提供的 api 接口。</p><p><strong>（3）ViewModel 层</strong><br>ViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的，比如页面的这一块展示什么，而页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互），视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层。</p><p>MVVM 框架实现了双向绑定，这样 ViewModel 的内容会实时展现在 View 层，前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图，MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新。这样 View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环。</p><h2 id="21、Vue-是如何实现数据双向绑定的？"><a href="#21、Vue-是如何实现数据双向绑定的？" class="headerlink" title="21、Vue 是如何实现数据双向绑定的？"></a>21、Vue 是如何实现数据双向绑定的？</h2><p>Vue 主要通过以下 4 个步骤来实现数据双向绑定的：</p><blockquote><ol><li>实现一个监听器 Observer：对数据对象进行遍历，包括子属性对象的属性，利用 Object.defineProperty() 对属性都加上 setter 和 getter。这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化。</li><li>实现一个解析器 Compile：解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。</li><li>实现一个订阅者 Watcher：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁 ，主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 Compile 中对应的更新函数。</li><li>实现一个订阅器 Dep：订阅器采用 发布-订阅 设计模式，用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理。</li></ol></blockquote><h2 id="22、Vue-框架怎么实现对象和数组的监听？"><a href="#22、Vue-框架怎么实现对象和数组的监听？" class="headerlink" title="22、Vue 框架怎么实现对象和数组的监听？"></a>22、Vue 框架怎么实现对象和数组的监听？</h2><p>如果被问到 Vue 怎么实现数据双向绑定，大家肯定都会回答 通过 Object.defineProperty() 对数据进行劫持，但是  Object.defineProperty() 只能对属性进行数据劫持，不能对整个对象进行劫持，同理无法对数组进行劫持，但是我们在使用 Vue 框架中都知道，Vue 能检测到对象和数组（部分方法的操作）的变化，那它是怎么实现的呢？我们查看相关代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Observe a list of Array items. */</span>observeArray <span class="token punctuation">(</span>items<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">observe</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// observe 功能为监测数据的变化</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 对属性进行递归遍历 */</span><span class="token keyword">let</span> childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// observe 功能为监测数据的变化</span></code></pre><p>通过以上 Vue 源码部分查看，我们就能知道 Vue 框架是通过遍历数组 和递归遍历对象，从而达到利用 Object.defineProperty() 也能对对象和数组（部分方法的操作）进行监听。</p><h2 id="23、Proxy-与-Object-defineProperty-优劣对比"><a href="#23、Proxy-与-Object-defineProperty-优劣对比" class="headerlink" title="23、Proxy 与 Object.defineProperty 优劣对比"></a>23、Proxy 与 Object.defineProperty 优劣对比</h2><p>Proxy 的优势如下:</p><blockquote><ol><li>Proxy 可以直接监听对象而非属性；</li><li>Proxy 可以直接监听数组的变化；</li><li>Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；</li><li>Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；</li><li>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；</li></ol></blockquote><p>Object.defineProperty 的优势如下:</p><blockquote><p>兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。</p></blockquote><h2 id="24、Vue-怎么用-vm-set-解决对象新增属性不能响应的问题-？"><a href="#24、Vue-怎么用-vm-set-解决对象新增属性不能响应的问题-？" class="headerlink" title="24、Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？"></a>24、Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？</h2><blockquote><ol><li>如果目标是数组，直接使用数组的 splice 方法触发相应式；</li><li>如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用   defineReactive 方法进行响应式处理（ defineReactive 方法就是  Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和 setter 的功能所调用的方法）</li></ol></blockquote><h2 id="25、虚拟-DOM-的优缺点？"><a href="#25、虚拟-DOM-的优缺点？" class="headerlink" title="25、虚拟 DOM 的优缺点？"></a>25、虚拟 DOM 的优缺点？</h2><p><strong>优点：</strong></p><blockquote><ol><li>保证性能下限： 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；</li><li>无需手动操作 DOM： 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；</li><li>跨平台： 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。</li></ol></blockquote><p><strong>缺点:</strong></p><blockquote><p>无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。</p></blockquote><h2 id="26、虚拟-DOM-实现原理？"><a href="#26、虚拟-DOM-实现原理？" class="headerlink" title="26、虚拟 DOM 实现原理？"></a>26、虚拟 DOM 实现原理？</h2><p>虚拟 DOM 的实现原理主要包括以下 3 部分：</p><blockquote><ol><li>用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；</li><li>diff 算法 — 比较两棵虚拟 DOM 树的差异；</li><li>pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。</li></ol></blockquote><h2 id="27、Vue-中的-key-有什么作用？"><a href="#27、Vue-中的-key-有什么作用？" class="headerlink" title="27、Vue 中的 key 有什么作用？"></a>27、Vue 中的 key 有什么作用？</h2><p>key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速。Vue 的 diff 过程可以概括为：oldCh 和 newCh 各有两个头尾的变量 oldStartIndex、oldEndIndex 和 newStartIndex、newEndIndex，它们会新节点和旧节点会进行两两对比，即一共有4种比较方式：newStartIndex 和oldStartIndex 、newEndIndex 和  oldEndIndex 、newStartIndex 和 oldEndIndex 、newEndIndex 和 oldStartIndex，如果以上 4 种比较都没匹配，如果设置了key，就会用 key 再进行比较，在比较的过程中，遍历会往中间靠，一旦 StartIdx &gt; EndIdx 表明 oldCh 和 newCh 至少有一个已经遍历完了，就会结束比较。具体有无 key 的 diff 过程，可以查看作者写的另一篇详解虚拟 DOM 的文章《深入剖析：Vue核心之虚拟DOM》</p><p>所以 Vue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速</p><p>更准确：因为带 key 就不是就地复用了，在 sameNode 函数 a.key === b.key 对比中可以避免就地复用的情况。所以会更加准确。</p><h2 id="28、你有对-Vue-项目进行哪些优化？"><a href="#28、你有对-Vue-项目进行哪些优化？" class="headerlink" title="28、你有对 Vue 项目进行哪些优化？"></a>28、你有对 Vue 项目进行哪些优化？</h2><p><strong>（1）代码层面的优化</strong></p><blockquote><ol><li>v-if 和 v-show 区分使用场景</li><li>computed 和 watch  区分使用场景</li><li>v-for 遍历必须为 item 添加 key，且避免同时使用 v-if</li><li>长列表性能优化</li><li>事件的销毁</li><li>图片资源懒加载</li><li>路由懒加载</li><li>第三方插件的按需引入</li><li>优化无限列表性能</li><li>服务端渲染 SSR or 预渲染</li></ol></blockquote><p><strong>（2）Webpack 层面的优化</strong></p><blockquote><ol><li>Webpack 对图片进行压缩</li><li>减少 ES6 转为 ES5 的冗余代码</li><li>提取公共代码</li><li>模板预编译</li><li>提取组件的 CSS</li><li>优化 SourceMap</li><li>构建结果输出分析</li><li>Vue 项目的编译优化</li></ol></blockquote><p><strong>（3）基础的 Web 技术的优化</strong></p><blockquote><ol><li>开启 gzip 压缩</li><li>浏览器缓存</li><li>CDN 的使用</li><li>使用 Chrome Performance 查找性能瓶颈</li></ol></blockquote><h2 id="29、对于即将到来的-vue3-0-特性你有什么了解的吗？"><a href="#29、对于即将到来的-vue3-0-特性你有什么了解的吗？" class="headerlink" title="29、对于即将到来的 vue3.0 特性你有什么了解的吗？"></a>29、对于即将到来的 vue3.0 特性你有什么了解的吗？</h2><p>Vue 3.0 正走在发布的路上，Vue 3.0 的目标是让 Vue 核心变得更小、更快、更强大，因此 Vue 3.0 增加以下这些新特性：</p><p><strong>（1）监测机制的改变</strong></p><blockquote><ol><li>3.0 将带来基于代理 Proxy 的 observer 实现，提供全语言覆盖的反应性跟踪。这消除了 Vue 2 当中基于 Object.defineProperty 的实现所存在的很多限制：</li><li>只能监测属性，不能监测对象</li><li>检测属性的添加和删除；</li><li>检测数组索引和长度的变更；</li><li>支持 Map、Set、WeakMap 和 WeakSet。</li><li>新的 observer 还提供了以下特性：</li><li>用于创建 observable 的公开 API。这为中小规模场景提供了简单轻量级的跨组件状态管理解决方案。</li><li>默认采用惰性观察。在 2.x 中，不管反应式数据有多大，都会在启动时被观察到。如果你的数据集很大，这可能会在应用启动时带来明显的开销。在 3.x 中，只观察用于渲染应用程序最初可见部分的数据。</li><li>更精确的变更通知。在 2.x 中，通过 Vue.set 强制添加新属性将导致依赖于该对象的 watcher 收到变更通知。在 3.x 中，只有依赖于特定属性的 watcher 才会收到通知。</li><li>不可变的 observable：我们可以创建值的“不可变”版本（即使是嵌套属性），除非系统在内部暂时将其“解禁”。这个机制可用于冻结 prop 传递或 Vuex 状态树以外的变化。</li><li>更好的调试功能：我们可以使用新的 renderTracked 和 renderTriggered 钩子精确地跟踪组件在什么时候以及为什么重新渲染。</li></ol></blockquote><p><strong>（2）模板</strong></p><blockquote><ol><li>模板方面没有大的变更，只改了作用域插槽，2.x 的机制导致作用域插槽变了，父组件会重新渲染，而 3.0 把作用域插槽改成了函数的方式，这样只会影响子组件的重新渲染，提升了渲染的性能。</li><li>同时，对于 render 函数的方面，vue3.0 也会进行一系列更改来方便习惯直接使用 api 来生成 vdom 。</li></ol></blockquote><p><strong>（3）对象式的组件声明方式</strong></p><blockquote><ol><li>vue2.x 中的组件是通过声明的方式传入一系列 option，和 TypeScript 的结合需要通过一些装饰器的方式来做，虽然能实现功能，但是比较麻烦。3.0 修改了组件的声明方式，改成了类式的写法，这样使得和 TypeScript 的结合变得很容易。</li><li>此外，vue 的源码也改用了 TypeScript 来写。其实当代码的功能复杂之后，必须有一个静态类型系统来做一些辅助管理。现在 vue3.0 也全面改用 TypeScript 来重写了，更是使得对外暴露的 api 更容易结合 TypeScript。静态类型系统对于复杂代码的维护确实很有必要。</li></ol></blockquote><p><strong>（4）其它方面的更改</strong></p><blockquote><ol><li>vue3.0 的改变是全面的，上面只涉及到主要的 3 个方面，还有一些其他的更改：</li><li>支持自定义渲染器，从而使得 weex 可以通过自定义渲染器的方式来扩展，而不是直接 fork 源码来改的方式。</li><li>支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。</li><li>基于 treeshaking 优化，提供了更多的内置功能。</li></ol></blockquote><h2 id="30、说说你使用-Vue-框架踩过最大的坑是什么？怎么解决的？"><a href="#30、说说你使用-Vue-框架踩过最大的坑是什么？怎么解决的？" class="headerlink" title="30、说说你使用 Vue 框架踩过最大的坑是什么？怎么解决的？"></a>30、说说你使用 Vue 框架踩过最大的坑是什么？怎么解决的？</h2><p>本题为开放题目，欢迎大家在评论区畅所欲言，分享自己的踩坑、填坑经历，提供前车之鉴，避免大伙再次踩坑 ~~~</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序 - 自定义tabbar</title>
      <link href="/2019/02/09/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20%E8%87%AA%E5%AE%9A%E4%B9%89tabbar/"/>
      <url>/2019/02/09/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20%E8%87%AA%E5%AE%9A%E4%B9%89tabbar/</url>
      
        <content type="html"><![CDATA[<p>现在微信支持自定义 <code>tabbar</code> 了，这对于那些需要自己定义 tab 栏的开发者来说时一个大好事，因为可以不要再使用这万年不变的 tabbar 样式了。</p><h4 id="1-配置信息：custom-true"><a href="#1-配置信息：custom-true" class="headerlink" title="1. 配置信息：custom: true"></a>1. 配置信息：custom: true</h4><blockquote><ol><li>在 app.json 中的 tabBar 项指定 <code>custom</code> 字段，同时其余 tabBar 相关配置（<code>主要是 list 字段要完整</code>）也补充完整。</li><li>所有 tab 页的 json 里需声明 usingComponents 项，也可以在 app.json 全局开启。</li></ol></blockquote><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"tabbar"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"custom"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"list"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"pagePath"</span><span class="token operator">:</span> <span class="token string">"pages/index/index"</span><span class="token punctuation">,</span>        <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"栏目1"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"pagePath"</span><span class="token operator">:</span> <span class="token string">"pages/logs/logs"</span><span class="token punctuation">,</span>        <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"栏目2"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-新建-tabbar-代码文件"><a href="#2-新建-tabbar-代码文件" class="headerlink" title="2. 新建 tabbar 代码文件"></a>2. 新建 tabbar 代码文件</h4><blockquote><ol><li>custom-tab-bar/index.js</li><li>custom-tab-bar/index.json</li><li>custom-tab-bar/index.wxml</li><li>custom-tab-bar/index.wxss</li></ol></blockquote><p>上面的文件以及命名是不能自己去更改的，否则小程序找不到对应的 tabbar 代码文件。</p><h4 id="3-编写代码"><a href="#3-编写代码" class="headerlink" title="3. 编写代码"></a>3. 编写代码</h4><p>编写代码和常规的方式差不多，不过还是有些地方要注意：</p><blockquote><ol><li>开发者需要提供一个<code>自定义组件</code>来渲染 tabBar，所有 tabBar 的样式都由该自定义组件渲染。</li><li>推荐用 fixed（实测：<code>不使用 fixed 定位把组件固定在在页面的话，会存在一些问题</code>） 在底部的 <code>cover-view + cover-image</code> 组件渲染样式，以保证 tabBar 层级相对较高。</li><li>如需实现 tab 选中态，要在当前页面下，通过 <code>getTabBar</code> 接口获取组件实例，并调用 setData 更新选中态。</li><li><code>getTabBar 接口只有在自定义 tabbar 的时候才能正常调用</code>。</li></ol></blockquote><p>实现 tab 选中态实例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// tabbar: custom-tab-bar/index.js</span><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 默认选中的 tabbar</span>    selected<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    list<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        pagePath<span class="token punctuation">:</span> <span class="token string">'/pages/index/index'</span><span class="token punctuation">,</span>        text<span class="token punctuation">:</span> <span class="token string">'栏目一'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        pagePath<span class="token punctuation">:</span> <span class="token string">'/pages/logs/logs'</span><span class="token punctuation">,</span>        text<span class="token punctuation">:</span> <span class="token string">'栏目二'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">switchTab</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> url <span class="token operator">=</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>path<span class="token punctuation">;</span>      wx<span class="token punctuation">.</span><span class="token function">switchTab</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- tabbar: custom-tab-bar/index.wxml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cover-view</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 这里 class 为 active 的时候为该 tab 的选中态，样式和别的 tab 不一样，默认就是 selected 为 0，就是第一个 tab 栏 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cover-view</span>     <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>switchTab<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{list}}<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>     <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{selected <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> index ? <span class="token punctuation">'</span>active<span class="token punctuation">'</span> : <span class="token punctuation">'</span><span class="token punctuation">'</span>}}<span class="token punctuation">"</span></span>    <span class="token attr-name">data-path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.pagePath}}<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>    {{item.text}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cover-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cover-view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* tabbar: custom-tab-bar/index.wxss */</span><span class="token comment" spellcheck="true">/* 样式就省略了，要记得使用 position: fixed */</span></code></pre><p>其它 tab 页面：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取当前 tabbar 实例，配合 setData 修改 tab 的选择态</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTabBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 将 selected 修改为要打开页面的 index</span>      selected<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序 - 获取图片页面上展示的宽高</title>
      <link href="/2019/01/14/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E9%A1%B5%E9%9D%A2%E4%B8%8A%E5%B1%95%E7%A4%BA%E7%9A%84%E5%AE%BD%E9%AB%98/"/>
      <url>/2019/01/14/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E9%A1%B5%E9%9D%A2%E4%B8%8A%E5%B1%95%E7%A4%BA%E7%9A%84%E5%AE%BD%E9%AB%98/</url>
      
        <content type="html"><![CDATA[<p>今天要做一个广告轮播图，我第一时间就想到了使用 swiper 组件，这个组件用来做轮播图简直不要太方便，于是我就顺手写下了这写代码。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper</span> <span class="token attr-name">indicator-dots</span> <span class="token attr-name">autoplay</span> <span class="token attr-name">interval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{3000}}<span class="token punctuation">"</span></span> <span class="token attr-name">circular</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://XXX.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://XXX.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://XXX.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper</span><span class="token punctuation">></span></span></code></pre><p>几行代码就搞定，我看了看效果。感觉还不错，效果时这样的：<br><img src="/medias/postimages/14.gif" alt="效果图" title="效果图"><br>于是我切换到小屏幕的 iPhone5 上看看，应该没问题吧，于是看到了这个：<br><img src="/medias/postimages/15.gif" alt="效果图" title="效果图"><br>什么鬼！这些指示点怎么跑那个下面去了，一点也不协调啊喂，我思考片刻，感觉这个事情并不简单，我想了想这个 swiper 组件有什么特性，于是我想起了这个组件有一个 height 为 150px 的 css 属性，没错，就是它造成的，在小屏幕上，图片的高度会变小，但是 swiper 组件时固定的，就会出现上面的情况，所以我们要解决这个问题才行。<br>这个时候我又想起了一个 api，wx.createSelectorQuery()，这个 api 可以让我们像 h5 一样选择一个 DOM元素，于是我又写下了代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">onReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// #swiper-img 是 swiper-item 组件里面的一个 image 组件的 id</span>    wx<span class="token punctuation">.</span><span class="token function">createSelectQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">'#swiper-img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boundingClientRect</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exce</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>先看看图片的信息，打印出来的结果如下：<br><img src="/medias/postimages/16.png" alt="效果图" title="效果图"><br>咦，怎么这个图片的高度怎么是 240px？我在添加了 mode=”widthFix” 属性后应该会变化啊，240px 是图片的默认高度，所以我知道我肯定又是哪里做的不对了，于是我百度了一下，果然找到问题了，错就错在我把获取图片高度的方法写在 onReady 生命周期函数里面，这个时候获取到的组件信息不一定是准确的，所以我们要通过另外一种途径来得到正确的信息。<br>image 组件有一个事件，<code>bindload</code> 这个事件在图片加载完成的时候自动触发，没错，就是它了。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    swiperHeight<span class="token punctuation">:</span> <span class="token string">'150px'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">imageLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    wx<span class="token punctuation">.</span><span class="token function">createSelectQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">'#swiper-img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boundingClientRect</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        swiperHeight<span class="token punctuation">:</span> res<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token string">'px'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token selector">height: </span><span class="token punctuation">{</span><span class="token punctuation">{</span>swiperHeight<span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">indicator-dots</span> <span class="token attr-name">autoplay</span> <span class="token attr-name">interval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{3000}}<span class="token punctuation">"</span></span> <span class="token attr-name">circular</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>swiper-img<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">bindload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageLoad<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://XXX.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://XXX.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://XXX.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper</span><span class="token punctuation">></span></span></code></pre><p>到这里，就算是结束了。</p><p><strong>2019.02.03更新：</strong></p><p>今天发现还有一种更加简单的方法：这里的目的是要获取图片在页面的实际高度，然后将 swiper 组件的高度也设置成为这个高度，这样轮播图看起来就很协调了。<br>在我们将 image 组件的 mode=”widthFix” 之后，image 会加上一个 height 的属性：如图所示：<br><img src="/medias/postimages/26.png" alt="效果图" title="效果图"><br>这里的高度是 210px，也就是说图片的高度自适应之后的高度为210px，这个高度就是 swiper 组件需要的高度，但是有一点，如果直接将这个高度写给 swiper 组件，那么在别的设备中又会出现问题，因为别的设备中，图片的高度又会发生变化，所以，这里应该将 px 转换为 rpx，这样就可以适用所有的屏幕，我们测试用的是 iphone6，所以转化为 rpx，就是 420rpx。<br>此时，只需要将 swiper 组件的高度设置为 420rpx 就可以了，不需要做其它的计算。</p><pre class=" language-css"><code class="language-css"><span class="token selector">swiper </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">420</span>rpx<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样做比上面那种方法要简单很多，不过有一点，如果你换了其它尺寸的图片，那么你又要重新去换算一下，不过这样也很简单，省时间。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序 - 常用的接口和功能</title>
      <link href="/2019/01/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%8A%9F%E8%83%BD/"/>
      <url>/2019/01/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="1-微信小程序版本控制：-wx-getUpdateManage"><a href="#1-微信小程序版本控制：-wx-getUpdateManage" class="headerlink" title="1. 微信小程序版本控制： wx.getUpdateManage()"></a>1. 微信小程序版本控制： wx.getUpdateManage()</h4><p>微信小程序的版本控制一般情况下微信会自动为我们做出调整，不过如果我们需要自己马上更新应用的最新版本，就可以使用 <code>wx.getUpdateManage()</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">onLaunch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取版本更新管理器</span>    <span class="token keyword">const</span> updateManage <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">getUpdateManage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 监听向微信后台请求检查更新结果事件。微信在小程序冷启动时自动检查更新，不需由开发者主动触发。（可不写该步骤）</span>    updateManage<span class="token punctuation">.</span><span class="token function">onCheckForUpdate</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 请求完新版本信息的回调</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 监听小程序有版本更新事件。客户端主动触发下载（无需开发者触发），下载成功后回调</span>    updateManage<span class="token punctuation">.</span><span class="token function">onUpdateReady</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            wx<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'更新提示'</span><span class="token punctuation">,</span>        content<span class="token punctuation">:</span> <span class="token string">'新版本已经准备好，是否重启应用？'</span><span class="token punctuation">,</span>        success<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 用户点了 确定 按钮</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>confirm<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 新的版本已经下载好，调用 applyUpdate 应用新版本并重启</span>           updateManager<span class="token punctuation">.</span><span class="token function">applyUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>cancel<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 用户点了 取消 按钮</span>           <span class="token comment" spellcheck="true">// ...</span>         <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="2-检测用户设备的网络状态：wx-getNetworkType-Object-object"><a href="#2-检测用户设备的网络状态：wx-getNetworkType-Object-object" class="headerlink" title="2. 检测用户设备的网络状态：wx.getNetworkType(Object object)"></a>2. 检测用户设备的网络状态：wx.getNetworkType(Object object)</h4><p>获取网络类型，主要是用于用户在无网络的情况下进入小程序，然后给与用户提示。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">onLaunch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// api</span>    wx<span class="token punctuation">.</span><span class="token function">getNetworkType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 接口调用成功的回调</span>      success<span class="token punctuation">:</span> res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 网络状态</span>        <span class="token keyword">const</span> networkType <span class="token operator">=</span> res<span class="token punctuation">.</span>networkType<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 'none' => 无网络</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>networkType <span class="token operator">===</span> <span class="token string">'none'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 提示，可以改用其它方式</span>          wx<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'当前无网络'</span><span class="token punctuation">,</span>            icon<span class="token punctuation">:</span> <span class="token string">'loading'</span><span class="token punctuation">,</span>            duration<span class="token punctuation">:</span> <span class="token number">2000</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="3-监听网络状态变化：wx-onNetworkStatusChange-function-callback"><a href="#3-监听网络状态变化：wx-onNetworkStatusChange-function-callback" class="headerlink" title="3. 监听网络状态变化：wx.onNetworkStatusChange(function callback)"></a>3. 监听网络状态变化：wx.onNetworkStatusChange(function callback)</h4><p>用户在使用小程序过程中，网络状态改变，特别是没有连接网络的情况下，可调用此接口对用户进行提示。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">onLaunch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    wx<span class="token punctuation">.</span><span class="token function">onNetworkStatusChange</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 未联网状态下进行提示</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span>isConnected<span class="token punctuation">)</span> <span class="token punctuation">{</span>        wx<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          title<span class="token punctuation">:</span> <span class="token string">'网络已断开'</span><span class="token punctuation">,</span>          icon<span class="token punctuation">:</span> <span class="token string">'loading'</span><span class="token punctuation">,</span>          duration<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>          complete<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 接口完成时操作，退出小程序或者退回首页等</span>            <span class="token comment" spellcheck="true">// ...</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 检测到重新联网就将提示去除</span>        wx<span class="token punctuation">.</span><span class="token function">hideToast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="4-微信本地存储能力：wx-setStorage-Object-object-，wx-setStorageSync-string-key-any-data"><a href="#4-微信本地存储能力：wx-setStorage-Object-object-，wx-setStorageSync-string-key-any-data" class="headerlink" title="4. 微信本地存储能力：wx.setStorage(Object object)，wx.setStorageSync(string key, any data)"></a>4. 微信本地存储能力：wx.setStorage(Object object)，wx.setStorageSync(string key, any data)</h4><blockquote><p>将数据存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。数据存储生命周期跟小程序本身一致，即除用户主动删除或超过一定时间被自动清理，否则数据都一直可用。单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。</p></blockquote><p>这个是必须掌握的，经常用到的 api，有同步和异步，酌情使用即可。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">onLaunch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    wx<span class="token punctuation">.</span><span class="token function">setStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      key<span class="token punctuation">:</span> <span class="token string">'userInfo'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 本地缓存中指定的 key</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 需要存储的内容。只支持原生类型、Date、及能够通过JSON.stringify序列化的对象。</span>        name<span class="token punctuation">:</span> <span class="token string">'huang'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>        address<span class="token punctuation">:</span> <span class="token string">'长沙市'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      success<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 接口调用成功的回调函数</span>      fail<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// 接口调用失败的回调函数</span>      complete<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 接口调用结束的回调函数（调用成功、失败都会执行）</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>wx.setStorageSync</code>是<code>wx.setStorage</code>的同步版本，用法有一点差异。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">onLaunch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    wx<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'huang'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 接下来其它操作...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="5-微信本地存储能力：wx-getStorage-Object-object-，wx-getStorageSync-string-key"><a href="#5-微信本地存储能力：wx-getStorage-Object-object-，wx-getStorageSync-string-key" class="headerlink" title="5. 微信本地存储能力：wx.getStorage(Object object)，wx.getStorageSync(string key)"></a>5. 微信本地存储能力：wx.getStorage(Object object)，wx.getStorageSync(string key)</h4><p>从本地缓存中异步获取指定 key 的内容。不介绍了，可看官方文档。</p><h4 id="6-全屏预览图片，对图片进行操作：wx-previewImage-Object-object"><a href="#6-全屏预览图片，对图片进行操作：wx-previewImage-Object-object" class="headerlink" title="6. 全屏预览图片，对图片进行操作：wx.previewImage(Object object)"></a>6. 全屏预览图片，对图片进行操作：wx.previewImage(Object object)</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{imageList}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.src}}<span class="token punctuation">"</span></span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>previewImage<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.src}}<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    imageList<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> src<span class="token punctuation">:</span> <span class="token string">'/images/01.png'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> src<span class="token punctuation">:</span> <span class="token string">'/images/02.png'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> src<span class="token punctuation">:</span> <span class="token string">'/images/03.png'</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">previewImage</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取当前用户点击的图片</span>    <span class="token keyword">let</span> src <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// api</span>    wx<span class="token punctuation">.</span><span class="token function">previewImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      urls<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>imageList<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 图片数组</span>      current<span class="token punctuation">:</span> src                  <span class="token comment" spellcheck="true">// 当前的图片src</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="7-小程序分享转发功能：onShareAppMessage-Object-object"><a href="#7-小程序分享转发功能：onShareAppMessage-Object-object" class="headerlink" title="7. 小程序分享转发功能：onShareAppMessage(Object object)"></a>7. 小程序分享转发功能：onShareAppMessage(Object object)</h4><p>监听用户点击页面内转发按钮（button 组件 <code>open-type=&quot;share&quot;</code>）或右上角菜单“转发”按钮的行为，并自定义转发内容。</p><blockquote><p>注意：只有定义了此事件处理函数，右上角菜单才会显示“转发”按钮</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 监听用户分享行为</span>  <span class="token function">onShareAppMessage</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// options.webViewUrl: 页面中包含web-view组件时，返回当前web-view的url</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>form <span class="token operator">===</span> <span class="token string">'button'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 此时 options.target 就是触发转发的 button 元素</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'转发事件来源于button'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token keyword">from</span> <span class="token operator">===</span> <span class="token string">'menu'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 此时 options.target 为 undefined</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'转发事件来源于右上角菜单'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回一个对象，存放的就是要转发的信息</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当前小程序名称</span>      title<span class="token punctuation">:</span> <span class="token string">'分享的标题'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 当前页面 path ，必须是以 / 开头的完整路径</span>      path<span class="token punctuation">:</span> <span class="token string">'/pages/index/index'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 自定义图片路径，可以是本地文件路径、代码包文件路径或者网络图片路径。支持PNG及JPG。显示图片长宽比是 5:4。默认显示使用默认截图</span>      <span class="token comment" spellcheck="true">// imageUrl: ...</span>      <span class="token comment" spellcheck="true">// 分享的回调因为被滥用，已经被取消了。</span>      <span class="token comment" spellcheck="true">// success: res => {</span>      <span class="token comment" spellcheck="true">//   console.log('分享成功啦')</span>      <span class="token comment" spellcheck="true">// },</span>      <span class="token comment" spellcheck="true">// fail: error => {</span>      <span class="token comment" spellcheck="true">//   console.log('分享失败')</span>      <span class="token comment" spellcheck="true">// }</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>这只是最简单的小程序转发示例，可以配合微信其它转发api进行动态操作。</p></blockquote><h4 id="8-几个路由-api"><a href="#8-几个路由-api" class="headerlink" title="8. 几个路由 api"></a>8. 几个路由 api</h4><p>这个是是必选要掌握的基础 api。要记住他们的区别，灵活运用。<br><strong>① wx.navigateTo(Object object)</strong></p><blockquote><p>保留当前页面，跳转到应用内的某个页面。但是<code>不能跳到 tabbar 页面</code>。使用 wx.navigateBack 可以返回到原页面。小程序中页面栈<code>最多十层</code>。可以携带参数。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    wx<span class="token punctuation">.</span><span class="token function">navigateTO</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 需要跳转的应用内非 tabBar 的页面的路径, 路径后可以带参数。</span>      url<span class="token punctuation">:</span> <span class="token string">'/pages/path1/path1?id=1&amp;name=huang'</span><span class="token punctuation">,</span>      success<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      fail<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      complete<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在这个方法执行后，页面就会跳转到 <code>/pages/path1/path1</code> 路径，后面的参数也会携带过去。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// /pages/path1/path2 页面</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">onLoad</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>name<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// huang</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>② wx.switchTab(Object, object)</strong></p><blockquote><p>跳转到 <code>tabBar</code> 页面，并关闭其他所有非 tabBar 页面，路径后不能带参数。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    wx<span class="token punctuation">.</span><span class="token function">switchTab</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 需要跳转的 tabBar 页面的路径（需在 app.json 的 tabBar 字段定义的页面），路径后不能带参数。</span>      url<span class="token punctuation">:</span> <span class="token string">'/pages/path1/path1'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 回调函数省略...</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>总结：这个 api 只能打开小程序 tab 页面，url 也不能带参数。</p><p><strong>③ wx.reLaunch(Object object)</strong></p><blockquote><p>关闭<code>所有</code>页面，打开到应用内的某个页面，可以带参数（包括打开 tab 页面）</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    wx<span class="token punctuation">.</span><span class="token function">reLaunch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 需要跳转的应用内页面路径，路径后可以带参数。</span>      url<span class="token punctuation">:</span> <span class="token string">'/pages/path1/path1?id=1&amp;name=huang'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 回调函数省略...</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>④ wx.redirectTo(Object object)</strong></p><blockquote><p>关闭<code>当前</code>页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    wx<span class="token punctuation">.</span><span class="token function">redirectTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 需要跳转的应用内页面路径，路径后可以带参数。</span>      url<span class="token punctuation">:</span> <span class="token string">'/pages/path1/path1?id=1&amp;name=huang'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 回调函数省略...</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p> <strong>⑤ wx.navigateBack(Object object)</strong></p><blockquote><p>关闭<code>当前</code>页面，返回上一页面或多级页面。可通过 getCurrentPages 获取当前的页面栈，决定需要返回几层。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">goBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    wx<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 返回的页面数，如果 delta 大于现有页面数，则返回到首页。</span>      delta<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 回调函数省略...</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p> <strong>⑤ wx.navigateToMiniProgram(Object object)</strong></p><blockquote><p>打开另一个小程序</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    wx<span class="token punctuation">.</span><span class="token function">navigateToMiniProgram</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//要打开的小程序 appId</span>      appId<span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 打开的页面路径，如果为空则打开首页。path 中 ? 后面的部分会成为 query。在小程序的 App.onLaunch、App.onShow 和 Page.onLoad 的回调函数</span>      path<span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 需要传递给目标小程序的数据，目标小程序可在 App.onLaunch，App.onShow 中获取到这份数据。</span>      extraData<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 要打开的小程序版本。仅在当前小程序为开发版或体验版时此参数有效。如果当前小程序是正式版，则打开的小程序必定是正式版。</span>      envVersion<span class="token punctuation">:</span> <span class="token string">'release'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 三个回调函数省略...</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>使用限制：</p><blockquote><ol><li><code>需要用户触发跳转</code>：从 2.3.0 版本开始，若用户未点击小程序页面任意位置，则开发者将无法调用此接口自动跳转至其他小程序。</li><li><code>需要用户确认跳转</code>：从 2.3.0 版本开始，在跳转至其他小程序前，将统一增加弹窗，询问是否跳转，用户确认后才可以跳转其他小程序。如果用户点击取消，则回调 fail cancel。</li><li>每个小程序可跳转的其他小程序数量限制为<code>不超过 10 个</code>：该名单可在发布新版时更新，<code>不支持动态修改</code>。</li><li>需要跳转的小程序 <code>appId</code> 在全局配置的 <code>app.json</code> 中进行定义：这段是：<code>navigateToMiniProgramAppIdList</code></li></ol></blockquote><h4 id="9-获取用户地理位置：wx-getLocation-Object-object"><a href="#9-获取用户地理位置：wx-getLocation-Object-object" class="headerlink" title="9. 获取用户地理位置：wx.getLocation(Object object)"></a>9. 获取用户地理位置：wx.getLocation(Object object)</h4><blockquote><ol><li>使用此接口需要现在 app.json 文件中定义声明，否则无法使用。</li><li>获取当前的地理位置、速度。当用户离开小程序后，此接口无法调用。</li></ol></blockquote><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"permission"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"scope.userLocation"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"放心，我不会拿你的地理位置信息来做坏事的"</span>    <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    latitude<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    longitude<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    wx<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      success<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          latitude<span class="token punctuation">:</span> res<span class="token punctuation">.</span>latitude<span class="token punctuation">,</span>          longitude<span class="token punctuation">:</span> res<span class="token punctuation">.</span>longitude        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      fail<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 授权失败...</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序 - scroll-view组件设置高度设置百分比的问题</title>
      <link href="/2018/12/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20scroll-view%E7%BB%84%E4%BB%B6%E8%AE%BE%E7%BD%AE%E9%AB%98%E5%BA%A6%E8%AE%BE%E7%BD%AE%E7%99%BE%E5%88%86%E6%AF%94%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/12/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20scroll-view%E7%BB%84%E4%BB%B6%E8%AE%BE%E7%BD%AE%E9%AB%98%E5%BA%A6%E8%AE%BE%E7%BD%AE%E7%99%BE%E5%88%86%E6%AF%94%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><code>scroll-view</code>组件是一个可滚动视图区域。使用竖向滚动时，需要给scroll-view一个固定高度，通过 WXSS 设置 height。如果需要组件可以上下滚动，需要设置一个属性 <code>scroll-y</code>,当组件内的内容高度超过组件的规定高度时，组件就可以上下滚动。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scroll-view</span> <span class="token attr-name">scroll-y</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>rpx<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#cccccc</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>Hello World1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>Hello World2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>Hello World3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>Hello World4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>Hello World5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>Hello World6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scroll-view</span><span class="token punctuation">></span></span></code></pre><p><img src="/medias/postimages/17.gif" alt="效果图" title="效果图"><br>一切正常，现在要改变一种方式，给 scroll-view 组件设置一个百分比，scroll-view 组件的高度随着它父元素的高度动态变化，代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scroll-view</span> <span class="token attr-name">scroll-y</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>Hello World1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>Hello World2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>Hello World3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>Hello World4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>Hello World5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>Hello World6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scroll-view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">page </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">scroll-view </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20%</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#cccccc</span><span class="token punctuation">}</span></code></pre><p>设置页面的高度为100%，scroll-view 组件的高度为页面的20%，实测也没有问题。其实这里的高度还是固定的，就是父元素的20%，我们现在要更近一步，要设置一个 max-height，最高的高度，如果小于这个高度，就不需要上下滚动，要是超出了这个高度，就需要上下滚动了。<br>修改 scroll-view 组件的样式：</p><pre class=" language-css"><code class="language-css"><span class="token selector">page </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">scroll-view </span><span class="token punctuation">{</span>  <span class="token property">max-height</span><span class="token punctuation">:</span> <span class="token number">20%</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#cccccc</span><span class="token punctuation">}</span></code></pre><p>效果如下：<br><img src="/medias/postimages/18.gif" alt="效果图" title="效果图"><br>很明显，出问题了，max-height 限制住了组件的最高高度，但是 scroll-view 的 scroll-y 属性并没有生效，没有出现上下的滚动条，我们都知道在 H5 里面可以给需要滚动的元素设置 overflow: auto，元素就会产生滚动条，把这个元素放到这里来试试：</p><pre class=" language-css"><code class="language-css"><span class="token selector">page </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">scroll-view </span><span class="token punctuation">{</span>  <span class="token property">max-height</span><span class="token punctuation">:</span> <span class="token number">20%</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#cccccc</span><span class="token punctuation">;</span>  <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这时，元素又出现了上下滚动条，而且这个时候 scroll-y 属性都可以省略，照样没问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓和IOS一些兼容性的CSS属性详解</title>
      <link href="/2018/12/21/%E5%AE%89%E5%8D%93%E5%92%8CIOS%E4%B8%80%E4%BA%9B%E5%85%BC%E5%AE%B9%E6%80%A7%E7%9A%84CSS%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/12/21/%E5%AE%89%E5%8D%93%E5%92%8CIOS%E4%B8%80%E4%BA%9B%E5%85%BC%E5%AE%B9%E6%80%A7%E7%9A%84CSS%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>博主在做移动端网页开发的时候，经常被安卓和IOS的一些兼容性属性折磨，想想就头痛…，所以我觉得有必要总结一下。</p><h3 id="1-webkit-text-size-adjust"><a href="#1-webkit-text-size-adjust" class="headerlink" title="1. -webkit-text-size-adjust"></a>1. -webkit-text-size-adjust</h3><blockquote><ol><li>这个属性并不是标准。 你必须为每个你想要应用的浏览器加上属性前缀。该属性具有继承性。</li><li>-webkit-text-size-adjust 的本职是用于mobile的。</li><li>iPhone 和 Android 的浏览器纵向和橫向模式皆有自动调整字体大小的功能。控制它的就是 CSS 中的 -webkit-text-size-adjust。-webkit-text-size-adjust 设为 none 或者 100% 关闭字体大小自动调整功能。</li><li>如果不想让iPhone横坚屏切换的时候调节文字，用 -webkit-text-size-adjust: 100%，不要用 none 属性，这会导致支持 none 属性的浏览器无法人为放大文字大小，严重影响可用性。</li><li>移动端浏览器网页的最小字体并没有统一，iPhone 和 Android的表现也不一样，有的对字体没有限制，有的最小只能到 12px，所以在项目中字体不要去设置小于 12px。</li><li>如果确实有需要将字体设置为小于 12px，那么可以用 css3 的属性 — transform；比如：transform: scale(0.8)。</li></ol></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector">html </span><span class="token punctuation">{</span>  <span class="token property">-webkit-text-size-adjust</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 将字体大小设置为小于 12px --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">.85</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h3 id="2-webkit-overflow-scrolling"><a href="#2-webkit-overflow-scrolling" class="headerlink" title="2. -webkit-overflow-scrolling"></a>2. -webkit-overflow-scrolling</h3><blockquote><ol><li>作用：-webkit-overflow-scrolling 属性控制元素在移动设备上是否使用滚动回弹效果.</li><li>属性值：auto 使用普通滚动, 当手指从触摸屏上移开，滚动会立即停止。</li><li>属性值：touch 使用具有回弹效果的滚动, 当手指从触摸屏上移开，内容会继续保持一段时间的滚动效果。继续滚动的速度和持续的时间和滚动手势的强烈程度成正比。同时也会创建一个新的堆栈上下文。</li></ol></blockquote><p>使用场景：在苹果手机上使用overflow-y：scroll/auto，会使该属性的盒子滑动非常不流畅，会有卡顿的现象。在用了 -webkit-overflow-scrolling: touch 之后会解决 IOS 滑动卡顿的问题。<br>使用了 -webkit-overflow-scrolling: touch 属性之后会有一些bug，包括但不限于一下几种：</p><blockquote><ol><li>滚动过程中 scrollTop 属性不会变化，滚动条停下才会变化。</li><li>通过动态添加内容撑开容器，结果根本不能滑动的bug。</li><li>手势可穿过其他元素触发元素滚动。</li><li>会导致使用固定定位的元素，随着页面一起滚动，只有滚动停止时才会恢复原位。</li></ol></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">overflow-y</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span>  <span class="token property">-webkit-overflow-scrolling</span><span class="token punctuation">:</span> touch<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-webkit-appearance"><a href="#3-webkit-appearance" class="headerlink" title="3. -webkit-appearance"></a>3. -webkit-appearance</h3><blockquote><ol><li>-webkit-appearance 是一个 不规范的属性，它没有出现在 CSS 规范草案中。此属性非标准且渲染效果在不同浏览器下不同，有些属性值甚至不支持，要慎用。</li><li>作用：改变按钮和其他控件的外观，使其类似于原生控件。</li><li>在 IOS 浏览器中，一些元素，例如 input，有着默认的按钮样式。无法去修改，这个时候可以使用：-webkit-appearance: none;去掉苹果手机的按钮默认样式。</li></ol></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector">input<span class="token attribute">[type="buttom"]</span>, input<span class="token attribute">[type="reset"]</span>, input<span class="token attribute">[type="submit"]</span>, button </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意：如果在 radio 和 checkbox 中应用 -webkit-appearance: none;会使选择框消失。可以设置 -webkit-appearance: checkbox;进行覆盖。</p><pre class=" language-css"><code class="language-css"><span class="token selector">input<span class="token attribute">[type="checkbox"]</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> checkbox<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">input<span class="token attribute">[type="radio"]</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> radio<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-webkit-tap-highlight-color"><a href="#4-webkit-tap-highlight-color" class="headerlink" title="4. -webkit-tap-highlight-color"></a>4. -webkit-tap-highlight-color</h3><blockquote><ol><li>这个属性只用于iOS (iPhone和iPad)。当你点击一个链接或者通过Javascript定义的可点击元素的时候，它就会出现一个半透明的灰色背景。要重设这个表现，你可以设置-webkit-tap-highlight-color为任何颜色。</li><li>想要禁用这个高亮，设置颜色的alpha值为0即可。也可以设置 transparent(透明的)。</li></ol></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector">a </span><span class="token punctuation">{</span>  <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几种常用的遍历方法</title>
      <link href="/2018/12/18/%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/"/>
      <url>/2018/12/18/%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="1-普通的-for-循环"><a href="#1-普通的-for-循环" class="headerlink" title="1. 普通的 for 循环"></a>1. 普通的 for 循环</h3><p>这个for循环时我们平时用的最多的循环，一般用来遍历数组，非常的方便，性能也不错。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">562</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">243</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'arr'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 0 1 2 3 4</span><span class="token punctuation">}</span></code></pre><p>由上面的例子可以找到 for 循环遍历数组的 key，不会遍历添加的 name 和自带的 length 属性。</p><blockquote><ol><li>可以通过 break 和 continue 终止或者跳出当前循环。</li><li>也可以用来遍历字符串。</li></ol></blockquote><h3 id="2-for…in…循环"><a href="#2-for…in…循环" class="headerlink" title="2. for…in…循环"></a>2. for…in…循环</h3><p>for…in 语句以任意顺序遍历一个对象自有的、继承的、可枚举的、非Symbol的属性。对于每个不同的属性，语句都会被执行。<br>for…in 更多是用来遍历对象，很少用来遍历数组，建议不要用该方法来遍历数组，因为它的效率是最低的。<br>for…in 也可以遍历字符串。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 用来遍历数组</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'arr'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 0 1 2 3 name test</span><span class="token punctuation">}</span></code></pre><p>遍历数组，因为 name 和从原型上继承的 test 属性时可枚举的，所以把 name 属性给遍历出来了，数组的 length 属性是不可枚举的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 用来遍历对象</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'huang'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'长沙市'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// name age address test</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 结合 hasOwnProperty()，可过滤掉原型上可迭代的属性，上同</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// name age address</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>可以通过 break 和 continue 终止或者跳出当前循环。</p></blockquote><h3 id="2-for…of…循环"><a href="#2-for…of…循环" class="headerlink" title="2. for…of…循环"></a>2. for…of…循环</h3><p>for…of语句在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象等等）上创建一个迭代循环，<strong>调用自定义迭代钩子</strong>，并为每个不同属性的值执行语句。</p><blockquote><p>注意：for…of 语句遍历可迭代对象定义要迭代的数据。for…in 语句以原始插入顺序迭代对象的可枚举属性。<br>可以通过 break 和 continue 终止或者跳出当前循环。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 数组，其它类型就省略了。</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'arr'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 10 20 30</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 或者 arr.entries() 返回一个迭代器</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> arr<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// [0, 10] [1, 20] [2, 30]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 或者 arr.values() 返回一个迭代器</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> arr<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 10 20 30</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 或者 arr.keys() 返回一个迭代器</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> arr<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 0 1 2</span><span class="token punctuation">}</span></code></pre><p>一般对象是不能直接使用for…of…循环，要想循环就得加一个迭代方法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'huang'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 直接使用 for...of...循环，报错</span> <span class="token comment" spellcheck="true">// for(let item of obj){</span> <span class="token comment" spellcheck="true">//   console.log(item)     // 报错</span> <span class="token comment" spellcheck="true">// }</span>obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">let</span> num <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">{</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> num<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        value<span class="token punctuation">:</span> num<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        done<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        value<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>        done<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 每次遍历都会调用返回的遍历器对象的 next() 方法，item 的值就是返回的 value 值。</span><span class="token comment" spellcheck="true">// 一旦遇到 done 为 true的时候就停止遍历。</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// huang 24</span><span class="token punctuation">}</span></code></pre><blockquote><p>Symbol.iterator会返回一个对象，这就是一个遍历器对象，而作为遍历器对象，其必须具备的特征就是必须具备next()方法。</p></blockquote><h3 id="3-forEach-、map-、filter-、every-、some"><a href="#3-forEach-、map-、filter-、every-、some" class="headerlink" title="3. forEach()、map()、filter()、every()、some()"></a>3. forEach()、map()、filter()、every()、some()</h3><p>这几个函数都是用来遍历数组的</p><blockquote><ol><li>这些函数都不会改变原来的数组。</li><li>循环体内部使用 break 和 continue 会报错。</li><li>forEach 和 map，循环体内部使用 return 不会终止整个循环，只会终止 return 后面的语句，整体还是会循环完。</li><li>filter(过滤)，返回指定数组中符合条件的所有元素。</li><li>every，检测数组所有元素是否都符合指定条件。都符合就返回 true 否则返回 false。</li><li>some，用于检测数组中的元素是否满足指定条件，只要有一个返回 true，则返回值就是 true。</li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题 - 找出一个字符串中出现最多的一个字符和次数</title>
      <link href="/2018/11/22/%E7%AE%97%E6%B3%95%E9%A2%98%20-%20%E6%89%BE%E5%87%BA%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%92%8C%E6%AC%A1%E6%95%B0/"/>
      <url>/2018/11/22/%E7%AE%97%E6%B3%95%E9%A2%98%20-%20%E6%89%BE%E5%87%BA%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%92%8C%E6%AC%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>这是一个比较简单的算法题（主要是难得我的不会…），要找出一个给定的字符串中出现最多字符和出现的次数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findMaxStr</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 给定的字符串只有一个字符</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      maxString<span class="token punctuation">:</span> str<span class="token punctuation">,</span>      maxValue<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 存储每个字符串出现的次数</span>  <span class="token keyword">let</span> strObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 循环字符串</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果 strObj[str[i]] 还没有存进去那就先存 1，之后累加就行</span>    strObj<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>strObj<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 存储出现最多字符串和出现的次数</span>  <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token punctuation">{</span>    maxString<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    maxValue<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 继续循环</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> strObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果 strObj[key] > max.maxValue，就将 max 里面的字符和次数更新。</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>strObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">.</span>maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      max<span class="token punctuation">.</span>maxValue <span class="token operator">=</span> strObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>      max<span class="token punctuation">.</span>maxString <span class="token operator">=</span> key    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> max<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findMaxStr</span><span class="token punctuation">(</span><span class="token string">'3289huangkuiwei 3ru39 2k32yrkk ryi3ukkr2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// {maxString: "k", maxValue: 6}</span></code></pre><p>这样就可以将出现最多的字符和次数算出来了，不过还有一个不好的地方，如果有多个出现次数相同的而且也是出现最多的字符那就尴尬了，这个函数只能拿到第一个出现最多的字符…，所以还是要进行改进。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findMaxStr</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 给定的字符串只有一个字符</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      maxString<span class="token punctuation">:</span> str<span class="token punctuation">,</span>      maxValue<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 存储每个字符串出现的次数</span>  <span class="token keyword">let</span> strObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 循环字符串</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果 strObj[str[i]] 还没有存进去那就先存 1，之后累加就行</span>    strObj<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>strObj<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 存储出现最多字符串和出现的次数，是个数组，可能有多个</span>  <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>maxString<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> maxValue<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 继续循环</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> strObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果当前字符和之前最多的字符出现的次数一样的话，就 push 进去。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> max<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      max<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>maxString<span class="token punctuation">:</span> key<span class="token punctuation">,</span> maxValue<span class="token punctuation">:</span> strObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果当前字符出现的次数比之前最多的字符出现的次数多的话，就给 max 重新赋值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      max <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>maxString<span class="token punctuation">:</span> key<span class="token punctuation">,</span> maxValue<span class="token punctuation">:</span> strObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> max<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// [{maxString: "h", maxValue: 6}, {maxString: "k", maxValue: 6}]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findMaxStr</span><span class="token punctuation">(</span><span class="token string">'hhhhhhuangkuiwei 2k32yrkk ryi3ukkr2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几个常用运算符</title>
      <link href="/2018/11/05/%E5%87%A0%E4%B8%AA%E5%B8%B8%E7%94%A8%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2018/11/05/%E5%87%A0%E4%B8%AA%E5%B8%B8%E7%94%A8%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="1-instanceof"><a href="#1-instanceof" class="headerlink" title="1. instanceof"></a>1. instanceof</h3><blockquote><ol><li>作用：instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置</li><li>语法：object instanceof constructor</li><li>注意：不能检测原始数据类型的值的属性，会报错。对已经删除了的属性进行检测会返回 false</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token punctuation">}</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ,age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">'huang'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// my name is huang ,age is 24</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">People</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>People <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>People <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// true</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 不要去检测原始数据类型的值，都会返回 false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>使用了Object.create()函数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="2-in"><a href="#2-in" class="headerlink" title="2. in"></a>2. in</h3><blockquote><ol><li>作用：如果指定的<strong>属性</strong>在指定的<strong>对象或其原型链</strong>中，则in 运算符返回true</li><li>语法：prop in object</li><li>注意：in 后面不能是原始类型的值（可以跟包装对象），否则会报错</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 检测对象类型</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'huang'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'huang'</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hasOwnProperty'</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// true</span></code></pre><p>检测原型上的属性返回 true。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 检测数组类型</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'arr'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span> <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false(必须使用索引号,而不是数组元素的值)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'length'</span> <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'slice'</span> <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 时间对象</span><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'getFullYear'</span> <span class="token keyword">in</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 函数对象</span><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'call'</span> <span class="token keyword">in</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 包装对象</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// true</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 原始类型</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'toString'</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 报错</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序 - 重点总结</title>
      <link href="/2018/11/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20%E9%87%8D%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>/2018/11/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20%E9%87%8D%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="1-小程序首页"><a href="#1-小程序首页" class="headerlink" title="1. 小程序首页"></a>1. 小程序首页</h4><p><code>app.json</code>文件定义目录路径如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"pages"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"pages/index/index"</span><span class="token punctuation">,</span>    <span class="token string">"pages/logs/logs"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>写在<code>pages</code>字段的第一个页面就是这个小程序的首页（打开小程序看到的第一个页面）。上面的首页就是<code>index</code>页面。</p><h4 id="2-小程序执行时机和页面执行顺序"><a href="#2-小程序执行时机和页面执行顺序" class="headerlink" title="2. 小程序执行时机和页面执行顺序"></a>2. 小程序执行时机和页面执行顺序</h4><p>以路径<code>pages/index/index</code>为例：</p><blockquote><ol><li>小程序启动之后，在<code>app.js</code>定义的<code>App</code>实例的<code>onLaunch</code>回调会被执行。</li><li>接着会进入<code>index</code>页面，微信客户端会先根据<code>index.json</code>配置生成一个界面，顶部的颜色和文字你都可以在这个 json 文件里边定义好。紧接着客户端就会装载这个页面的<code>WXML</code>结构和<code>WXSS</code>样式。最后客户端会装载<code>index.js</code>。你可以看到<code>index.js</code>的大体内容就是:<pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 参与页面渲染的数据</span>   logs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> onLoad<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 页面渲染后 执行</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><code>Page</code>是一个页面构造器，这个构造器就生成了一个页面。在生成页面的时候，小程序框架会把<code>data</code>数据和<code>index.wxml</code>一起渲染出最终的结构，于是就得到了你看到的小程序的样子。</li><li>在渲染完界面之后，页面实例就会收到一个<code>onLoad</code>的回调，你可以在这个回调处理你的逻辑。之后就是 onShow、onReady。</li></ol></blockquote><h4 id="3-this-setData-方法使用"><a href="#3-this-setData-方法使用" class="headerlink" title="3. this.setData()方法使用"></a>3. this.setData()方法使用</h4><p><code>Page.prototype.setData(Object data, Function callback)</code>：setData 函数用于将数据从逻辑层发送到视图层（异步），同时改变对应的 this.data 的值（同步）。<br>参数有两个：第一个为一个对象，为这次要改变的数据。第二个为引起的界面更新渲染完毕后的回调函数。</p><blockquote><ol><li>Object 以 key: value 的形式表示，将 this.data 中的 key 对应的值改变成 value。</li><li>其中 key 可以以数据路径的形式给出，支持改变数组中的某一项或对象的某个属性，如 array[2].message，a.b.c.d，并且不需要在 this.data 中预先定义。</li><li>直接修改 this.data 而不调用 this.setData 是无法改变页面的状态的，还会造成数据不一致。</li><li>仅支持设置可 JSON 化的数据。单次设置的数据不能超过1024kB，请尽量避免一次设置过多的数据。</li><li>请不要把 data 中任何一项的 value 设为 undefined ，否则这一项将不被设置并可能遗留一些潜在问题。</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    value1<span class="token punctuation">:</span> <span class="token string">'hello world'</span><span class="token punctuation">,</span>    value2<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    info<span class="token punctuation">:</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'huang'</span><span class="token punctuation">,</span>      age<span class="token punctuation">:</span> <span class="token number">24</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'huang'</span><span class="token punctuation">,</span> <span class="token string">'zhang'</span><span class="token punctuation">,</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token string">'wu'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      value1<span class="token punctuation">:</span> <span class="token string">'value1 is changed'</span><span class="token punctuation">,</span>      value2<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>      <span class="token string">'info.age'</span><span class="token punctuation">:</span> <span class="token number">88</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 可通过路径的形式修改某个值</span>      <span class="token string">'list[0]'</span><span class="token punctuation">:</span> <span class="token string">'liu'</span>    <span class="token comment" spellcheck="true">// 同上</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><ol><li>补充1：一般情况下，需要用到的数据都要到<code>data</code>对象中进行初始化定义（要符合 json 的数据要求），不过如果在<code>this.setData</code>中修改了 data 中不存在的数据也是可以在页面上展示的，不过不推荐这样做。</li><li>补充2：页面上使用了 data 中不存在的数据是不会报错的，只是不会展示。</li></ol></blockquote><p>实例：<br>现在有有一个需求，有九张图片，用户点哪张，哪张图片就要变色（其实就是替换成另外一张图片）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    imageList<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        image<span class="token punctuation">:</span> <span class="token string">'/assets/images/prize-bg01.png'</span><span class="token punctuation">,</span>        text<span class="token punctuation">:</span> <span class="token string">'大气'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        image<span class="token punctuation">:</span> <span class="token string">'/assets/images/prize-bg01.png'</span><span class="token punctuation">,</span>        text<span class="token punctuation">:</span> <span class="token string">'硬扎'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        image<span class="token punctuation">:</span> <span class="token string">'/assets/images/prize-bg01.png'</span><span class="token punctuation">,</span>        text<span class="token punctuation">:</span> <span class="token string">'灵泛'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 循环，不要忘记 wx:key --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{prizeList}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 通过 data-* 的方式给方法传值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getPrize<span class="token punctuation">"</span></span> <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.id}}<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.image}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>{{item.text}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>样式就省略了。现在要写的是<code>getPrize</code>方法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">getPrize</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> id <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>id<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 通过 data-* 传给方法的值 id，再通过 e.target.dataset 拿到组件上传来的所有值。</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>prizeList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> currentImage <span class="token operator">=</span> <span class="token template-string"><span class="token string">`prizeList[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">].image`</span></span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 当前 item 的数据路径</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token punctuation">[</span>currentImage<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'/assets/images/prize-bg02.png'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token punctuation">[</span>currentImage<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'/assets/images/prize-bg01.png'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><img src="/medias/postimages/12.gif" alt="效果图" title="效果图"></p><h4 id="4-image组件学习"><a href="#4-image组件学习" class="headerlink" title="4. image组件学习"></a>4. image组件学习</h4><p>image 组件是展示图片的组件，支持<code>JPG、JPEG、PNG、SVG、GIF</code>等常用格式以及<code>链接、云文件ID</code>。<br>相关属性：</p><blockquote><ol><li><code>src</code>: 类型<code>string</code>，图片资源地址</li><li><code>mode</code>: 类型<code>string</code>，默认值<code>scaleToFill</code>,图片裁剪、缩放的模式</li><li><code>lazy-load</code>: 类型<code>boolean</code>，默认值<code>false</code>，图片懒加载，在即将进入一定范围（上下三屏）时才开始加载</li><li><code>show-menu-by-longpress</code>: 类型<code>boolean</code>，默认值<code>false</code>，开启长按图片显示识别小程序码菜单    </li><li><code>binderror</code>: 类型:<code>eventhandle</code>，当加载图片发生错误是触发，<code>event.detail = {errMsg}</code>，<code>errMsg</code>为错误信息</li><li><code>bindload</code>: 类型:<code>eventhandle</code>，当图片载入完毕时触发，<code>event.detail = {height, width}</code>，<code>height, width</code>为图片实际高宽</li></ol></blockquote><p><code>mode</code>的取值：</p><blockquote><ol><li><code>scaleToFill</code>: 缩放模式，不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素。</li><li><code>aspectFit</code>: 缩放模式，保持纵横比缩放图片，使图片的长边能完全显示出来。也就是说，可以完整地将图片显示出来。image 组件还是默认大小。</li><li><code>aspectFill</code>: 缩放模式，保持纵横比缩放图片，只保证图片的短边能完全显示出来。也就是说，图片通常只在水平或垂直方向是完整的，另一个方向将会发生截取。image 组件还是默认大小。</li><li><code>widthFix</code>: 缩放模式，宽度不变，高度自动变化，保持原图宽高比不变，这个模式最常用。image 组件高度自适应。</li><li>其它模式省略…</li></ol></blockquote><p>补充：</p><blockquote><ol><li>image 组件的默认大小为：<code>width: 320px; height: 240px</code>。</li><li>image 组件中二维码/小程序码图片默认不支持长按识别。可添加属性<code>show-menu-by-longpress</code>，或者在<code>wx.previewImage</code>中支持长按识别。</li></ol></blockquote><h4 id="5-wx-previewImage-Object-object"><a href="#5-wx-previewImage-Object-object" class="headerlink" title="5. wx.previewImage(Object object)"></a>5. wx.previewImage(Object object)</h4><p>在新页面中全屏预览图片。预览的过程中用户可以进行保存图片、发送给朋友等操作。如果需要用户全屏观看图片，对图片进行操作或者识辨图片中的小程序码可调用此API。</p><blockquote><ol><li><code>urls</code>: Array.<string>,必填，需要预览的图片链接列表。2.2.3 起支持云文件ID。</string></li><li><code>current</code>: string，非必填，urls 的第一张，当前显示图片的链接，没有此参数则默认显示第一张。</li><li><code>success</code>: function，非必填，接口调用成功的回调函数</li><li><code>fail</code>: function，非必填，接口调用失败的回调函数</li><li><code>complete</code>: function，非必填，接口调用结束的回调函数（调用成功、失败都会执行）</li></ol></blockquote><p>实例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    imageList<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">'http://img9.ph.126.net/6xhfpIcaTzSalcXcBcAZ4Q==/6597438103051957929.jpg'</span><span class="token punctuation">,</span>      <span class="token string">'http://hbimg.b0.upaiyun.com/c077851d578f3a6927a59b8da01c209caecfb1855cd2f-D79rMw_fw658'</span><span class="token punctuation">,</span>      <span class="token string">'http://photocdn.sohu.com/20120103/Img331047726.jpg'</span><span class="token punctuation">,</span>      <span class="token string">'http://img.mp.itc.cn/upload/20170528/2e627839b5fe4d55b04b20d7d893e7a0_th.jpg'</span><span class="token punctuation">,</span>      <span class="token string">'https://res.wx.qq.com/wxdoc/dist/assets/img/demo.ef5c5bef.jpg'</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>previewImage<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{imageList}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{index}}<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item}}<span class="token punctuation">"</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token function">previewImage</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> src <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拿到当前的 url 地址</span>  wx<span class="token punctuation">.</span><span class="token function">previewImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    urls<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>imageList<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 需要全屏显示的图片数字</span>    current<span class="token punctuation">:</span> src                  <span class="token comment" spellcheck="true">// 当前显示的图片（没有此参数，则点击任意一张图片都会显示第一张）</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><img src="/medias/postimages/13.gif" alt="效果图" title="效果图"><br>微信模拟器无法长按弹出菜单，实测真机可以。</p><h4 id="6-动态切换元素class属性"><a href="#6-动态切换元素class属性" class="headerlink" title="6. 动态切换元素class属性"></a>6. 动态切换元素class属性</h4><p>动态切换元素 class 属性是我们经常用到的功能，在小程序中没有了 DOM，所以不能在 js 中直接操作 DOM 来完成这个功能，不过可以通过数据间接操纵 DOM。<br>实现原理的 Vue 框架的思想一样。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{prizeList}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getPrize<span class="token punctuation">"</span></span> <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.id}}<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.image}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.image <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>/assets/images/prize-bg02.png<span class="token punctuation">'</span> ? <span class="token punctuation">'</span>active<span class="token punctuation">'</span> : <span class="token punctuation">'</span><span class="token punctuation">'</span>}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.text}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>其它代码参考 <strong>3. this.setData()方法使用</strong> ，这里的class是根据<code>item.image === &#39;/assets/images/prize-bg02.png&#39;</code>来进行判断的，如果用户点了该图片，就是被添加一个<code>active</code>的 class ，其它的图片就没有这个 class。</p><h4 id="7-数据绑定"><a href="#7-数据绑定" class="headerlink" title="7. 数据绑定"></a>7. 数据绑定</h4><p>WXML 中的动态数据均来自对应 Page 的 data。数据绑定使用 Mustache 语法（双大括号）将变量包起来。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">'Hello World'</span><span class="token punctuation">,</span>    num<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>    bool<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    info<span class="token punctuation">:</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'huang'</span><span class="token punctuation">,</span>      age<span class="token punctuation">:</span> <span class="token number">22</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{num}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{bool}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{list}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item}} => {{index}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{info.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>组件属性：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 绑定的属性要用{{}}语法，{{}}内部可以是`JavaScript表达式（一部分）` --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{message}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!-- id="Hello World" --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa{{message}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>           <span class="token comment" spellcheck="true">&lt;!-- id="aaaHello world" --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{<span class="token punctuation">'</span>aaa<span class="token punctuation">'</span> +  message}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- id="aaaHello World" --></span><span class="token comment" spellcheck="true">&lt;!-- 绑定布尔值 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{bool}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 绑定了布尔值，控制元素是否显示 --></span><span class="token comment" spellcheck="true">&lt;!-- 或者 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{true}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 一下这种写法 hidden 的值会为 true，绑定了字符串 false，Boolean('false') => true --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>非动态绑定（没有绑定 data 中的属性）：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 绑定字符串 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{<span class="token punctuation">'</span>item<span class="token punctuation">'</span>}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 绑定数字，使用{{}} --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{1}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>e.target.dataset.id === 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>e.target.dataset.id === '1'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 绑定布尔值同上 --></span><span class="token comment" spellcheck="true">&lt;!-- 绑定数组 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">data-list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1, 2, 3]}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>e.target.dataset.list === [1, 2, 3]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>绑定对象有点特殊：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 这样直接绑定对象是会报错的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">data-info</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{name: <span class="token punctuation">'</span>huang<span class="token punctuation">'</span>, age: 22}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>报错<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 可以使用 data 对象里面的属性进行绑定 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">data-info</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{info}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>正常<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 如果确实需要传不止一个属性到方法上，可以使用下面这个方法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">data-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>huang<span class="token punctuation">"</span></span> <span class="token attr-name">data-age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{22}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>e.target.dataset === {{name: 'huang', age: 22}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>可以在 WXML 模板（template）上的 data 属性上绑定对象。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{name: <span class="token punctuation">'</span>huang<span class="token punctuation">'</span>, age: 24}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 或者：info 在 data 中已经定义 => {name: 'huang', age: 24} --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{info}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>组合绑定：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- zero 在 data 中定义 => 0 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[zero, 1, 2, 3]}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{index}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><blockquote><p>在<code>template</code>模板中同样可以使用组合模式进行数据绑定，如果有相同的属性。后面的属性值会替换前面的属性值。</p></blockquote><blockquote><p>注意： 花括号和引号之间如果有空格，将最终被解析成为字符串</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1, 2, 3]}} <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 等同于 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1, 2, 3] + <span class="token punctuation">'</span> <span class="token punctuation">'</span>}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><h4 id="8-背景图片：background-问题"><a href="#8-背景图片：background-问题" class="headerlink" title="8. 背景图片：background 问题"></a>8. 背景图片：background 问题</h4><p>在小程序中，使用本地的图片设置元素的背景图片是编译不过了，会报错，可以使用网络图片，或者<code>base64</code>，或者使用<code>image</code>标签。</p><h4 id="9-页面滚动条滚到指定位置"><a href="#9-页面滚动条滚到指定位置" class="headerlink" title="9. 页面滚动条滚到指定位置"></a>9. 页面滚动条滚到指定位置</h4><p>我们平时开发的时候需要页面一进入就自动滚动到指定位置，或者点击某个按钮然后滚动到指定位置。这个时候我们可以用<code>&lt;scroll-view&gt;</code>组件。在首页使用<code>&lt;scroll-view&gt;</code>组件作为根组件的话会有些问题，在滚动 scroll-view 时会阻止页面回弹，所以在 scroll-view 中滚动，是无法触发 onPullDownRefresh。所以我们需要换一种思路。<br><code>先用</code><scroll-view><code>组件实现：</code></scroll-view></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scroll-view</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- ...代码省略 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>滚动到 id 为 box 的位置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- ...代码省略 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- ...代码省略 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scroll-view</span><span class="token punctuation">></span></span></code></pre><p>这里我们需要点击按钮，首页就会滚动到 id=”box” 的地方。根据<code>&lt;scroll-view&gt;</code>的用法，要先给<code>&lt;scroll-view&gt;</code>设置一个高度，然后设置属性<code>scroll-x</code>或者<code>scroll-y</code>。</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* page 元素为当前页面根元素 */</span><span class="token selector">page </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* scroll-view 的高度就是当前页面的可见高度 */</span><span class="token selector">scroll-view </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scroll-view</span> <span class="token attr-name">scroll-x</span> <span class="token attr-name">scroll-into-view</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{scrollPosition}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- ...代码省略 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scrollToBox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>滚动到 id 为 box 的位置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- ...代码省略 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- ...代码省略 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scroll-view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    scrollPosition<span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">scrollToBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      scrollPosition<span class="token punctuation">:</span> <span class="token string">'box'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>另外一种方法，不需要使用<code>scroll-view</code>组件</strong>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">scrollToBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  wx<span class="token punctuation">.</span><span class="token function">createSelectorQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boundingClientRect</span><span class="token punctuation">(</span>rect <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    wx<span class="token punctuation">.</span><span class="token function">pageScrollTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      scrollTop<span class="token punctuation">:</span> rect<span class="token punctuation">.</span>top    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="10-wx-createSelectorQuery"><a href="#10-wx-createSelectorQuery" class="headerlink" title="10. wx.createSelectorQuery()"></a>10. wx.createSelectorQuery()</h4><p>返回一个 SelectorQuery 对象实例。在自定义组件或包含自定义组件的页面中，应使用 this.createSelectorQuery() 来代替。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> query <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createSelectorQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 创建节点查询器 query</span>query<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 选择id=the-id的节点，获取节点位置信息的查询请求</span>query<span class="token punctuation">.</span><span class="token function">selectViewport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取页面滑动位置的查询请求</span>query<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 第一个请求结果</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 第二个请求结果</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：<code>exec</code>方法执行所有的请求。请求结果按请求次序构成数组，在callback的第一个参数中返回。如果没有执行这个方法，则 boundingClientRect() 等方法的回调函数函数不会执行。</p></blockquote><h4 id="11-wx-pageScrollTo-Object-object"><a href="#11-wx-pageScrollTo-Object-object" class="headerlink" title="11. wx.pageScrollTo(Object object)"></a>11. wx.pageScrollTo(Object object)</h4><p>将页面滚动到目标位置。</p><blockquote><ol><li><code>scrollTop</code>，number，必填，滚动到页面的目标位置，单位 px</li><li><code>duration</code>，number，默认300mm，非必填，滚动动画的时长，单位 ms</li><li><code>success</code>，function，非必填，接口调用成功的回调函数</li><li><code>fail</code>，function，非必填    接口调用失败的回调函数</li><li><code>complete</code>，function，非必填，接口调用结束的回调函数（调用成功、失败都会执行）</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript">wx<span class="token punctuation">.</span><span class="token function">pageScrollTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  scrollTop<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  duration<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="12-支持的css选择器"><a href="#12-支持的css选择器" class="headerlink" title="12. 支持的css选择器"></a>12. 支持的css选择器</h4><table><thead><tr><th>选择器</th><th>是否支持</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td><code>.class</code></td><td>支持</td><td>.box</td><td>选择所有拥有 class=”box” 的组件</td></tr><tr><td><code>#id</code></td><td>支持</td><td>#box</td><td>选择拥有 id=”box” 的组件</td></tr><tr><td><code>element</code></td><td>支持</td><td>view</td><td>选择所有 view 组件</td></tr><tr><td><code>element, element</code></td><td>支持</td><td>view, checkbox</td><td>选择所有文档的 view 组件和所有的 checkbox 组件</td></tr><tr><td><code>::before</code></td><td>支持</td><td>view::before</td><td>在 view 组件前边插入内容</td></tr><tr><td><code>::after</code></td><td>支持</td><td>view::after</td><td>在 view 组件后边插入内容</td></tr><tr><td><code>element &gt; element</code></td><td>只支持 view 组件</td><td>view &gt; text</td><td>子元素选择器（view &gt; text）只能用于 view 组件与其子节点之间（view &gt; scroll-view &gt; text 是无效的），用于其他组件可能导致非预期的情况。</td></tr><tr><td><code>element element</code></td><td>支持</td><td>view scroll-view text</td><td>后代选择器</td></tr><tr><td><code>element + element</code></td><td>支持</td><td>view + text</td><td>相邻兄弟选择器</td></tr><tr><td><code>element1~element2</code></td><td>支持</td><td>view ~ text</td><td>选择 view 组件后面所有的 text 组件</td></tr><tr><td><code>[attribute]</code></td><td>支持</td><td>scroll-view[scroll-view-into]</td><td>选择的属性是在该组件能够起作用的组件，用户自己定义的属性选择不到，也不能选择定义方法的属性，如果属性的值是 false，也无法选择到</td></tr><tr><td><code>:link</code></td><td>-</td><td>-</td><td>没有 a 标签</td></tr><tr><td><code>:visited</code></td><td>-</td><td>-</td><td>没有 a 标签</td></tr><tr><td><code>:active</code></td><td>支持</td><td>view:active</td><td>与<code>&lt;view hover-class=&quot;xxx&quot;&gt;</code>属性一致（只测试了view标签与text标签）</td></tr><tr><td><code>:hover</code></td><td>支持</td><td>view:hover</td><td>表现基本同:active，但是要取消该状态，要点击其他标签(让hover转移到其他标签上)</td></tr><tr><td><code>:focus</code></td><td>不支持</td><td>-</td><td>不支持此选择器</td></tr><tr><td><code>:first-letter</code></td><td>支持</td><td>view:first-letter</td><td>选择每个 view 组件的首字母</td></tr><tr><td><code>:first-line</code></td><td>支持</td><td>view:first-line</td><td>选择每个 view 组件的首行</td></tr><tr><td><code>:first-child</code></td><td>支持</td><td>view &gt; text:first-child</td><td>-</td></tr><tr><td><code>:last-child</code></td><td>支持</td><td>text:last-child</td><td>-</td></tr><tr><td><code>:only-child</code></td><td>支持</td><td>text:only-child</td><td>-</td></tr><tr><td><code>:first-of-type</code></td><td>支持</td><td>text:first-of-type</td><td>-</td></tr><tr><td><code>:last-of-type</code></td><td>支持</td><td>text:last-of-type</td><td>-</td></tr><tr><td><code>:only-of-type</code></td><td>支持</td><td>text:only-of-type</td><td>-</td></tr><tr><td><code>:nth-child(n)</code></td><td>支持</td><td>text:nth-child(2)</td><td>-</td></tr><tr><td><code>:nth-last-child(n)</code></td><td>支持</td><td>text:nth-last-child</td><td>-</td></tr><tr><td><code>:nth-of-type(n)</code></td><td>支持</td><td>text:nth-of-type</td><td>-</td></tr><tr><td><code>:nth-last-of-type(n)</code></td><td>支持</td><td>text:nth-last-of</td><td>-</td></tr><tr><td><code>:not(selector)</code></td><td>支持</td><td>text:not(:first-child)</td><td>-</td></tr><tr><td><code>:root</code></td><td>不支持</td><td>-</td><td>-</td></tr><tr><td><code>:empty</code></td><td>支持</td><td>text:empty</td><td>- </td></tr><tr><td><code>:target</code></td><td>不支持</td><td>-</td><td>小程序没有锚点</td></tr><tr><td><code>:enabled</code></td><td>不支持</td><td>-</td><td>-</td></tr><tr><td><code>:disabled</code></td><td>不支持</td><td>-</td><td></td></tr><tr><td><code>:checked</code></td><td>不支持</td><td>-</td><td>- </td></tr><tr><td><code>::selection</code></td><td>不支持</td><td>—————————</td><td>-</td></tr></tbody></table><p><strong>一般情况下，推荐使用<code>class</code>选择器</strong><br><strong>组件样式：</strong> 组件对应 wxss 文件的样式，只对组件wxml内的节点生效。编写组件样式时，需要注意以下几点：</p><blockquote><ol><li>组件和引用组件的页面不能使用id选择器（#a）、属性选择器（[a]）和标签名选择器，请改用class选择器。</li><li>组件和引用组件的页面中使用后代选择器（.a .b）在一些极端情况下会有非预期的表现，如遇，请避免使用。</li><li>子元素选择器（.a&gt;.b）只能用于 view 组件与其子节点之间，用于其他组件可能导致非预期的情况。</li><li>继承样式，如 font 、 color ，会从组件外继承到组件内。</li><li>除继承样式外， app.wxss 中的样式、组件所在页面的的样式对自定义组件无效（除非更改组件样式隔离选项）。</li></ol></blockquote><p><strong>补充：</strong><br>为什么组件和引用组件的页面不能使用id选择器（#a）、属性选择器（[a]）和标签名选择器？</p><blockquote><p>因为id选择器（#a）、属性选择器（[a]）和标签名选择器会影响组件，比如：页面和子组件都有 id=”box” 的元素，在页面使用 #box 来写样式，这样会影响到其子组件的样式，属性选择器和标签名选择器同样存在这个问题。（不得不说对比于 Vue，小程序真的是太垃圾了）</p></blockquote><p>关于子选择器的一个注意点：</p><blockquote><p>子选择器用于 view 组件和它的直接子代组件之间，例如：<code>view &gt; text</code>，<code>view &gt; .box</code>，<code>.a &gt; .b(.a 是 view 组件)</code>，下面几种情况是无效的：</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 没有用于 view 和 它的直接子代 */</span><span class="token selector">view > scroll-view > text </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 子代使用了 id 选择器，编译错误 */</span><span class="token selector">view > <span class="token id">#box</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 不知道为啥，这种情况是有效的，#box 是 view 组件 */</span><span class="token selector"><span class="token id">#box</span> > <span class="token class">.pox</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>总结：id 选择器能不用就不用，尽量使用 class 选择器，后代选择器和子选择器用的时候要小心，其它选择器参考上文酌情使用（会有坑）。</p><h4 id="13-require"><a href="#13-require" class="headerlink" title="13. require"></a>13. require</h4><p>require必须写相对路径，写绝对路径会找不到。（一脸懵逼）</p><h4 id="14-swiper组件的一个妙用"><a href="#14-swiper组件的一个妙用" class="headerlink" title="14. swiper组件的一个妙用"></a>14. swiper组件的一个妙用</h4><p>swipe 组件：我平时一般都用来做轮播图，今天业务上有一个需求，要做文字上下滚动的效果，要知道在微信小程序里不能直接操作 DOM，做动画比较麻烦（可能是我比较菜吧），于是就找啊找，就找到了 swiper 组件，发现它可以实现这个效果。<br>先通过接口拿到要在页面上展示的效果，这里就直接在 data 中定义了：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    prizeList<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>phn<span class="token punctuation">:</span> <span class="token string">'186****6763'</span><span class="token punctuation">,</span> prizeName<span class="token punctuation">:</span> <span class="token string">'玛莎拉蒂5元代金券'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>phn<span class="token punctuation">:</span> <span class="token string">'156****6753'</span><span class="token punctuation">,</span> prizeName<span class="token punctuation">:</span> <span class="token string">'现金红包0.01元'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>phn<span class="token punctuation">:</span> <span class="token string">'159****0951'</span><span class="token punctuation">,</span> prizeName<span class="token punctuation">:</span> <span class="token string">'团体观影券'</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper</span> <span class="token attr-name">autoplay</span> <span class="token attr-name">interval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{3000}}<span class="token punctuation">"</span></span> <span class="token attr-name">circular</span> <span class="token attr-name">vertical</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{recodeList.length <span class="token punctuation">></span> 0}}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>drwan-pirze<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{recodeList}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{index}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    恭喜{{item.phn}}获得{{item.prizeName}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.drwan-pirze</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">3.5%</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">65%</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">24</span>rpx<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>rpx<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>rpx<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.drwan-pirze</span> swiper-item </span><span class="token punctuation">{</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意点：</p><blockquote><ol><li>swiper 组件的默认高度是150px，高度要自己重新设置。</li><li>上下滚动，要设置属性 vertical，其它看需求来。</li></ol></blockquote><h4 id="15-text组件绑定事件"><a href="#15-text组件绑定事件" class="headerlink" title="15. text组件绑定事件"></a>15. text组件绑定事件</h4><p>text 组件里面只能套 text 组件，有一个有趣的现象，不知道是 bug 还是特意这样子设计的，在 text 组件里面套的 text 组件绑定的事件是无效的！要是想继续绑定事件，就不能使用 text 套 text 的写法。</p><h4 id="16-事件对象e"><a href="#16-事件对象e" class="headerlink" title="16. 事件对象e"></a>16. 事件对象e</h4><p>在小程序中，即使绑定事件的组件和触发事件的组件时同一个时：<code>e.target !== e.currentTarget</code>，这个逻辑和 H5 是不一样的。</p><h4 id="17-尺寸单位vh"><a href="#17-尺寸单位vh" class="headerlink" title="17. 尺寸单位vh"></a>17. 尺寸单位vh</h4><p>尺寸单位vh并不是小程序里面的专有单位，只是我在开发小程序中发现这个单位也时常用得上，所以记录一下：</p><blockquote><p>vh 是 css3 新单位，view height的简写，是指可视窗口的高度。假如高度是 1200px 的话。那 10vh 就是 120px，也就是说把设备的高度分成了 100 等份，每一份就是 1vh。</p></blockquote><h4 id="18-使用定位得元素配合使用-z-index"><a href="#18-使用定位得元素配合使用-z-index" class="headerlink" title="18. 使用定位得元素配合使用 z-index"></a>18. 使用定位得元素配合使用 z-index</h4><p>微信小程序中元素使用了固定定位和绝对定位，可以配合使用 <code>z-index</code> 属性。如果没有使用 z-index 属性把元素的层级提高的话，固定定位和绝对定位的元素绑定的点击事件可能就不生效（准确来讲就像是用了定位的元素的层级还是0，并没有真正”浮起来”）。</p><h4 id="19-textarea-组件注意事项"><a href="#19-textarea-组件注意事项" class="headerlink" title="19. textarea 组件注意事项"></a>19. textarea 组件注意事项</h4><p>textarea 组件如果用在一个使用了 <code>position: fixed</code> 的区域，一定要加上 <code>fixed</code> 属性，我是被这个坑的一愣一愣的…</p><h4 id="20-获取-input，-textarea-等表单组件输入框的值"><a href="#20-获取-input，-textarea-等表单组件输入框的值" class="headerlink" title="20. 获取 input， textarea 等表单组件输入框的值"></a>20. 获取 input， textarea 等表单组件输入框的值</h4><p>有两种办法，一种是使用 <code>form</code> 组件，另外一种是使用 <code>bindinput</code> 事件将元素的 value 值同步绑定到 data 中。<br>如果用 form 来获取参数，元素标签需要加属性 name 才可以获取到，没有 name 属性，那么在提交的时候，e.detail.value 就不会包含该值。</p><h4 id="21-充分利用-globalData-和微信本地存储能力"><a href="#21-充分利用-globalData-和微信本地存储能力" class="headerlink" title="21. 充分利用 globalData 和微信本地存储能力"></a>21. 充分利用 globalData 和微信本地存储能力</h4><p>如果数据需要在多个页面中应用，可以将数据放在 <code>globalData</code> 中或者使用微信本地存储能力。</p><h4 id="22-app-wxss"><a href="#22-app-wxss" class="headerlink" title="22. app.wxss"></a>22. app.wxss</h4><p><code>app.wxss</code>是一个全局的样式，一般情况下也是要影响所有的 wxml 文件，在默认情况下，app.wxss 使用标签名选择器（或一些其他特殊选择器）会对所有页面和自定义组件产生影响，使用 class 选择器会对所有页面产生影响，对自定义组件不产生影响。可以修改组件样式隔离选项<code>styleIsolation</code>来自定义影响范围。</p><h4 id="23-wxs"><a href="#23-wxs" class="headerlink" title="23. wxs"></a>23. wxs</h4><p>wxs 有两种表现形式，一种直接是写 <code>.wxs</code> 文件，另外一种是 <code>&lt;wxs&gt;</code> 标签，可以实现类似 Vue 中过滤器的功能。<br>在小程序中，双括号里面默认时不能使用方法的，要想使用方法，那就需要定义 <code>&lt;wxs&gt;</code> 模块。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'huang kui wei'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>wxs</span> <span class="token attr-name">module</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  function myName(name) {    var nameArray = name.split(' ');    for(var i = 0; i &lt; nameArray.length; i++) {      nameArray[i] = nameArray[i][0].toUpperCase() + nameArray[i].slice(1)    }    return nameArray.join(' ')  }  module.exports.myName = myName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>wxs</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{myDate.myName(name)}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>这里页面上呈现的就是 Huang Kui Wei。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    someText<span class="token punctuation">:</span> <span class="token string">'welcome to here!'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 没有任何效果，不能直接使用方法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{someText.slice(1, 2)}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>如果你要对字符串使用 slice 方法对字符串进行截取，可以在 js 页面中在给 someText 进行赋值后操作，也可以定义 <code>wxs</code> 模块进行操作：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>wxs</span> <span class="token attr-name">module</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myOptions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  function slice(string, start, end) {    return string.slice(start, end)  }  module.exports.slice = slice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>wxs</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{myOptions.slice(someText, 1, 5)}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><blockquote><p>注意：在使用 wxs 语法的时候，要注意它的限制，不支持 ES6 语法。</p></blockquote><h4 id="24-模板-template-复用"><a href="#24-模板-template-复用" class="headerlink" title="24. 模板 template 复用"></a>24. 模板 template 复用</h4><p>在复用模板的时候，如果模板在文件外部，要先使用 <code>import</code> 组件将模板加载进来</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- my-template.wxml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-template<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{userInfo.username}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- index.wxml --></span><span class="token comment" spellcheck="true">&lt;!-- 先将模板引进 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../template/my-template.wxml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-template<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{userInfo}}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* index.wxss */</span><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">100</span>rpx<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><ol><li>import 可以在该文件中使用目标文件定义的template。</li><li>import 有作用域的概念，即只会 import 目标文件中定义的 template，而不会 import 目标文件 import 的 template。如果目标文件里面要引用的 template 有使用另外的模板，是可以正常显示的。</li><li>可以在当前文件对引进的模板 template 的样式进行定义和修改，这样写的样式就不能影响其它文件引入的同样的模板。当然也可以在全局样式 app.wxss 中进行定义，这样会影响所有引入的模板样式。如果两个地方样式都写，那么引进模板的地方写的样式将会覆盖全局样式 app.wxss。同样模板内定义的事件也是在相应的页面内进行维护，互不影响。</li><li>模板只能使用用过 data 属性传递过去的数据。</li><li>推荐将 import 组件放置在文件的顶部统一将模板引进。</li></ol></blockquote><h4 id="25-include-组件和-import-组件的区别"><a href="#25-include-组件和-import-组件的区别" class="headerlink" title="25. include 组件和 import 组件的区别"></a>25. include 组件和 import 组件的区别</h4><p>include 可以将目标文件除了 <code>&lt;template/&gt; &lt;wxs/&gt;</code> 外的整个代码引入，相当于是拷贝到 include 位置。<br>import 可以在该文件中使用目标文件定义的 <code>template</code>。</p><h4 id="26-去掉或自定义-button-组件边框"><a href="#26-去掉或自定义-button-组件边框" class="headerlink" title="26. 去掉或自定义 button 组件边框"></a>26. 去掉或自定义 button 组件边框</h4><pre class=" language-css"><code class="language-css"><span class="token selector">button<span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*border: 0;*/</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">3</span>px solid <span class="token hexcode">#ccc</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>button 组件的边框默认卸载选择器 button:after 上面，所以去掉也要写这个属性。</p><h4 id="27-写在-Page-上面的代码"><a href="#27-写在-Page-上面的代码" class="headerlink" title="27. 写在 Page({}) 上面的代码"></a>27. 写在 Page({}) 上面的代码</h4><p>先看示例：首页时 index，tab 有两个，index 和 logs，默认打开首页 index。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// app.js</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">onLaunch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'app-launch'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">onShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'app-show'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// index</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'index-load'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// logs</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'logs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'logs-load'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>打印出来的结果：<br><code>app =&gt; app-launch =&gt; app-show =&gt; index &gt; logs =&gt; index-load</code><br>从上面的输出结果可以得出结论</p><blockquote><ol><li>写在 Page({}) 上面的代码一定会执行，即使当前页面并没有加载。</li><li>加载顺序：先加载 app.js 中 App({}) 之前的代码，再加载 App 中的生命周期函数(<code>onLaunch(), onShow()</code>)，然后再加载其它页面 Page({}) 之前的代码，再加载当前要打开的页面的生命周期函数(<code>onLoad(). onShow(), onReady()</code>)。</li></ol></blockquote><h4 id="28-scroll-view组件的一个bug？"><a href="#28-scroll-view组件的一个bug？" class="headerlink" title="28. scroll-view组件的一个bug？"></a>28. scroll-view组件的一个bug？</h4><p>scroll-view 组件必须显示的设置一个高度，否则组件的事件：bindscroll、bindscrolltolower等无法生效…..</p><h4 id="29-组件的几个重要生命周期注意事项"><a href="#29-组件的几个重要生命周期注意事项" class="headerlink" title="29. 组件的几个重要生命周期注意事项"></a>29. 组件的几个重要生命周期注意事项</h4><blockquote><ol><li>组件实例刚刚被创建好时， created 生命周期被触发。此时，组件数据 this.data 就是在 Component 构造器中定义的数据 data 。 <code>此时还不能调用 setData</code> 。 通常情况下，这个生命周期只应该用于给组件 this 添加一些自定义属性字段。</li><li>在组件完全初始化完毕、进入页面节点树后， attached 生命周期被触发。此时， this.data 已被初始化为组件的当前值。这个生命周期很有用，绝大多数初始化工作可以在这个时机进行</li><li>在组件离开页面节点树后， detached 生命周期被触发。退出一个页面时，如果组件还在页面节点树中，则 detached 会被触发。定义生命周期方法</li></ol></blockquote><p>简而言之：</p><blockquote><ol><li><code>created 组件实例化，但节点树还未导入，因此这时不能用setData</code></li><li><code>attached 节点树完成，可以用setData渲染节点，但无法操作节点</code></li><li><code>ready(不是onReady) 组件布局完成，这时可以获取节点信息，也可以操作节点</code></li></ol></blockquote><h4 id="30-getCurrentPages-一个妙用"><a href="#30-getCurrentPages-一个妙用" class="headerlink" title="30. getCurrentPages() 一个妙用"></a>30. getCurrentPages() 一个妙用</h4><blockquote><p>作用：获取当前页面栈。数组中第一个元素为首页，最后一个元素为当前页面。</p></blockquote><p>在写有自定义组件的页面，自定义组件经常要与页面进行交互，比如自定义组件执行某个操作之后要调用页面的方法，此时可以用 <code>this.triggerEvent(&#39;my-event&#39;, args, options)</code>的方式触发事件，还有就是使用 <code>getCurrentPages()</code> 获取到当前页面的实例，然后直接调用相应的方法即可。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 自定义组件.wxml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scroll-view</span> <span class="token attr-name">scroll-y</span> <span class="token attr-name">bindscrolltolower</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scrolltolower<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scroll-view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 自定义组件.js </span><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">scrolltolower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">getCurrentPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">scrolltolower</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 页面.js</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">scrolltolower</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 操作</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="31-scroll-view标签对display-flex无效"><a href="#31-scroll-view标签对display-flex无效" class="headerlink" title="31. scroll-view标签对display: flex无效"></a>31. scroll-view标签对display: flex无效</h4><p>scroll-view标签对display: flex无效，所以在开发过程中，最好不要对 <code>scroll-view</code>元素使用 display: flex 属性。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scroll-view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">scroll-x</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1,2,3,4,5,6,7,8]}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{index}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scroll-view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">page </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> antiquewhite<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>rpx<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>rpx<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#0ba360</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/medias/postimages/19.png" alt="效果图" title="效果图"><br>看效果图就知道，flex-direction: row; 属性并没有起作用，按常理这些数字应该是横着排，那一个怎么解决这个问题呢？很简单，只要在 .item 外面再包一层元素就可以，比如 view：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scroll-view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">scroll-x</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1,2,3,4,5,6,7,8]}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{index}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scroll-view</span><span class="token punctuation">></span></span></code></pre><p>然后 display: flex 的属性就不给 scroll-view 组件了，一个给 .content，view 组件时正常的。</p><pre class=" language-css"><code class="language-css"><span class="token selector">page </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> antiquewhite<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>rpx<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>rpx<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#0ba360</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/medias/postimages/20.png" alt="效果图" title="效果图"></p><h4 id="32-小程序不支持通配符（-）选择器"><a href="#32-小程序不支持通配符（-）选择器" class="headerlink" title="32. 小程序不支持通配符（*）选择器"></a>32. 小程序不支持通配符（*）选择器</h4><p>会引发编译错误。</p><h4 id="33-小程序样式文件支持关键字-important"><a href="#33-小程序样式文件支持关键字-important" class="headerlink" title="33. 小程序样式文件支持关键字 !important"></a>33. 小程序样式文件支持关键字 !important</h4><p>在写自定义组件时比较有用，将自定义组件加上属性：addGlobalClass: true</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 等同于：styleIsolation: 'apply-shared'</span>    <span class="token comment" spellcheck="true">// 表示页面 wxss 样式将影响到自定义组件，但自定义组件 wxss 中指定的样式不会影响页面</span>    addGlobalClass<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>此时，你可以在页面上写相应的样式来影响自定义组件，如果有冲突，可以用 !important 来提高优先级。</p><h4 id="34-外部样式类"><a href="#34-外部样式类" class="headerlink" title="34. 外部样式类"></a>34. 外部样式类</h4><p>外部样式类是写自定义组件的时候经常用到的功能，它可以让你在不改变自定义组件的情况下去影响组件内部的样式。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 自定义组件 js</span><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这里的数组接收的是使用组件的页面的属性名，类似于 hover-class</span>  externalClasses<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'custom-class'</span><span class="token punctuation">,</span> <span class="token string">'text-class'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 自定义组件 my-com.wxml --></span><span class="token comment" spellcheck="true">&lt;!-- 将 custom-class、button-class 添加到相应的位置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>custom-class<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-class<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本内容...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 引用组件的页面 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span> <span class="token attr-name">custom-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-com<span class="token punctuation">"</span></span> <span class="token attr-name">text-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-class<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 引用组件的页面的样式文件 */</span><span class="token selector"><span class="token class">.my-com</span> </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">100</span>rpx<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.text-class</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="35-自定义组件内部使用自定义组件"><a href="#35-自定义组件内部使用自定义组件" class="headerlink" title="35. 自定义组件内部使用自定义组件"></a>35. 自定义组件内部使用自定义组件</h4><p>腾讯的文档是真的出了奇的“简洁”，很多坑根本就没提过，需要开发者自己去踩，一个比一个雷，要不是腾讯现在是个垄断的大公司，掌握着绝大多数的用户，否则我相信小程序的开发者至少得跑一半。<br>给自定义组件内部得自定义组件传入外部样式类，index 为页面，child-com 和child-child-com 是自定义组件，代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- index.wxml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-com</span> <span class="token attr-name">custom-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-com</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- child-com.wxml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-child-com</span> <span class="token attr-name">custom-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-child-com</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>custom-class<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>child-com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- child-child-com.wxml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>custom-class<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>child-child-com1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>child-child-com2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>在上面得自定义组件中都设有：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  externalClasses<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'custom-class'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>    addGlobalClass<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>组件内部得样式受到外部样式得影响，而且都有接收一个叫 <code>custom-class</code> 的样式类。<br>这个时候，你要想在 index 页面或者 app.wxss 中设置自定义组件的样式，比如：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实测之后没有什么问题。<br><img src="/medias/postimages/21.png" alt="效果图" title="效果图"><br>接着修改 child-child-com.wxml 中，box3 的样式：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box3</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实测之后没有什么问题。<br><img src="/medias/postimages/22.png" alt="效果图" title="效果图"><br>接下来修改 box2 的样式：box2 是 child-child-com.wxml 的外部样式类。</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box2</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>你会发现并没有产生效果，你只能使用这个 class 在 child-com.wxss 中进行修改。然后打开控制台发现一个有趣的问题：<br><img src="/medias/postimages/23.png" alt="效果图" title="效果图"><br>这个 class 的名字竟然变成了 com-child-com–box2，这是为什么？文档里面根本就没有这些鬼东西好吧，好吧，我想了想，可能是怕开发者在写样式的时候无意影响到了这些内部的自定义组件，所以才给他加上这个前缀的吧…，真是良苦用心，但是你好歹也要说出来啊…<br>所以我们如果还是执意要在外部页面影响这个组件的样式，就只能这样写了：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.com-child-com--box2</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/medias/postimages/24.png" alt="效果图" title="效果图"><br>想到这里，我就想：child-child-com.wxml 文件里面一个 box3 的 class 也会有什么问题呢？从上面可以知道，通过外部页面 .box3 是可以修改这个样式的，那小程序会不会也会自动添加一个加有前缀的 class 名字呢？<br><img src="/medias/postimages/25.png" alt="效果图" title="效果图"><br>没错，又出现了…所以这个时候也可以在外面页面写 .child-child-com–box3 来影响这个组件的样式：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.child-child-com--box3</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实测确实可以，不过我觉得没必要，而且我觉得腾讯也不鼓励开发者这么做，至于我为什么会发现这个问题呢，因为我在用 vant-weapp 这个 UI 库开发的时候碰到这种组件里面套组件，就看了源代码发现了，这个时候我想在 app.wxss 中修改这个库中的某些样式，发现不能生效，结果一看，是样式名变了，在页面内影响不到，所以就只能看结构里面的 class 名，然后用这个名字去写样式。真的是曲折啊…</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关键字new到底做了什么？</title>
      <link href="/2018/10/02/%E5%85%B3%E9%94%AE%E5%AD%97new%E5%88%B0%E5%BA%95%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/2018/10/02/%E5%85%B3%E9%94%AE%E5%AD%97new%E5%88%B0%E5%BA%95%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><strong>通过关键字 new 创建新对象会经历下面四个步骤</strong></p><blockquote><ol><li>创建一个新对象：let o = {}</li><li>将构造函数的作用域赋给新对象（因此this指向了这个新对象）：Person.call(o, arg1, agg2, …) （Person原来的this指向的是window）</li><li>执行构造函数中的代码(为这个新对象添加属性)</li><li>返回新对象</li></ol></blockquote><p>常规代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span>People<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我的名字是'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'，今年'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">'岁了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">'huang'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 我的名字是huang，今年24岁了</span><span class="token comment" spellcheck="true">// p 的 __proto__ 指向 p 的构造函数 People 的 prototype 属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> People<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// People 的原型的 constructor 构造函数指向它本身（People本身就是构造函数）</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> People<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>constructor <span class="token operator">===</span> People<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// true</span></code></pre><p>自己封装一个和 new 有相同效果的函数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span>People<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">'huang'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">New</span><span class="token punctuation">(</span>Fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 定义一个空对象</span>  <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 拿到实参数组，交给 apply</span>  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> Fn<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  Fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 改变 Fn 中 this 的指向并执行 Fn 函数</span>  <span class="token keyword">return</span> obj<span class="token punctuation">}</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token function">New</span><span class="token punctuation">(</span>People<span class="token punctuation">,</span> <span class="token string">'huang'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span></code></pre><p><img src="/medias/postimages/07.png" alt="效果图" title="效果图"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 - 用class类实现菜单切换</title>
      <link href="/2018/09/28/ES6%20-%20%E7%94%A8class%E7%B1%BB%E5%AE%9E%E7%8E%B0%E8%8F%9C%E5%8D%95%E5%88%87%E6%8D%A2/"/>
      <url>/2018/09/28/ES6%20-%20%E7%94%A8class%E7%B1%BB%E5%AE%9E%E7%8E%B0%E8%8F%9C%E5%8D%95%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>下面是用 ES6 新特性 class 类写的一个简单易懂的切换菜单功能。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>选项一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>选项二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>选项三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项一内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项二内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项三内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* css */</span><span class="token selector">* </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ccc</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// JavaScript</span><span class="token keyword">class</span> <span class="token class-name">Menu</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 在实例化新对象的时候，constructor 构造函数会自动运行。</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>menu <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>btn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>menu<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>div <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>menu<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>colorList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 初始化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>btn<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 添加事件</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>btn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>div<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>div<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>div<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>div<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>colorList<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>btn<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>colorList<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>div<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>div<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>btn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>div<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>div<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>colorList<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>btn<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>colorList<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">'menu'</span><span class="token punctuation">)</span></code></pre><p><img src="/medias/postimages/08.gif" alt="效果图" title="效果图"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的奇淫技巧（持续更新）</title>
      <link href="/2018/09/22/JavaScript%E4%B8%AD%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2018/09/22/JavaScript%E4%B8%AD%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>在这篇文章中，我会记录一些在我平时工作中遇到的一些有趣的JavaScript写法和技巧，这些写法有的很实用，有的很装逼，反正看起来很酷就是了。</p><h3 id="1-数组快速去重"><a href="#1-数组快速去重" class="headerlink" title="1. 数组快速去重"></a>1. 数组快速去重</h3><p>现在有一个数组：[4, 7, 2, 6, 2, 4, 7, 4, 8, 3, 5, 2, 6]</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">set</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// [4, 7, 2, 6, 8, 3, 5]</span></code></pre><blockquote><p>分析：实例化新 Set 对象时，可以接收一个可迭代对象，由于 Set 对象中的值具有唯一性，所有无法重复添加值，重复添加的值会被过滤掉，最后利用解构赋值就可以将 Set 对象中的值赋给新数组，这个新数组就是过滤掉重复值的数组了。<br>此技巧适用于包含基本类型的数组：undefined，null，boolean，string和number。 （如果你有一个包含对象，函数或其他数组的数组，你需要一个不同的方法！）</p></blockquote><h3 id="2-交换两个变量的值"><a href="#2-交换两个变量的值" class="headerlink" title="2. 交换两个变量的值"></a>2. 交换两个变量的值</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 以前的写法，利用第三个变量作为中转站</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">let</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 2 1</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 利用解构赋值</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 2 1</span></code></pre><blockquote><p>分析：利用解构赋值，[a, b] = [b, a] 相当于 [a, b] = [2, 1]，此时 a 的值就变为了2，同理 b 的值就变成了1。</p></blockquote><h3 id="3-快速获取一个数组中的最大值或者最小值"><a href="#3-快速获取一个数组中的最大值或者最小值" class="headerlink" title="3. 快速获取一个数组中的最大值或者最小值"></a>3. 快速获取一个数组中的最大值或者最小值</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第一种方法，利用剩余参数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 9</span><span class="token comment" spellcheck="true">// 第二种方法，这里第一个参数是什么都无所谓，不需要用到 this</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 9</span></code></pre><blockquote><p>解释见注释，获取最小值同理，Math.min()</p></blockquote><h3 id="4-确保用到原型上的方法是准确的"><a href="#4-确保用到原型上的方法是准确的" class="headerlink" title="4. 确保用到原型上的方法是准确的"></a>4. 确保用到原型上的方法是准确的</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>slice <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这个数组的slice方法被修改了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 要截取数组 arr 前三位。发现 slice 方法不管用了。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 这个数组的slice方法被覆盖了</span><span class="token comment" spellcheck="true">// 直接使用原型上的方法</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// [1, 4, 5]</span></code></pre><blockquote><p>分析：对象原型上的方法可以会被对象本身定义的方法覆盖，如果你不确定方法被覆盖，而此时要用到原型上的方法，就可以采取这种方式，方法后面使用 call 或者 apply 方法，使函数的 this 指向你要使用的对象，后面再接参数。</p></blockquote><h3 id="5-快速将变量转换位数字或者字符串"><a href="#5-快速将变量转换位数字或者字符串" class="headerlink" title="5. 快速将变量转换位数字或者字符串"></a>5. 快速将变量转换位数字或者字符串</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 转换为数字类型</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'22'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'12'</span><span class="token punctuation">,</span> <span class="token string">'32'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>a<span class="token punctuation">,</span> <span class="token operator">+</span>arr1<span class="token punctuation">,</span> <span class="token operator">+</span>arr2<span class="token punctuation">,</span> <span class="token operator">+</span>obj<span class="token punctuation">,</span> <span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 123 22 NaN NaN 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token operator">+</span>a<span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token operator">+</span>arr1<span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token operator">+</span>arr2<span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token operator">+</span>obj<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// number number number number</span></code></pre><blockquote><p>通过一元运算符 + 或者 - 将其它类型转换为数字类型。会自动调用函数 Number()。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 转换为字符串类型类型</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'huang'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">,</span> b <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">,</span> d <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 123 123 1,2,3 [object Object] true</span></code></pre><blockquote><p>通过在变量后面加一个空字符串将其它类型转换为字符串类型。会自动调用函数 String()。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中官方指令总结</title>
      <link href="/2018/09/15/Vue%E4%B8%AD%E5%AE%98%E6%96%B9%E6%8C%87%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
      <url>/2018/09/15/Vue%E4%B8%AD%E5%AE%98%E6%96%B9%E6%8C%87%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="1-v-html"><a href="#1-v-html" class="headerlink" title="1. v-html"></a>1. v-html</h3><blockquote><ol><li><code>v-html</code>可以将元素的内容渲染成该元素绑定的属性值，直接作为HTML，因此使用了该指令的元素之间的内容会被忽略，而且该指令会忽略解析属性值中的数据绑定。</li><li><code>v-html</code>后面可以跟任意 JavaScript 表达式。不过最后渲染时都会将表达式的返回值转换为字符串，展现在视图上，所以你可以写<code>&lt;div v-html=&quot;myHtml+{}&quot;&gt;&lt;/div&gt;</code>也不会报错，他会将对象转换为字符串格式。</li><li>可以通过 <code>&gt;&gt;&gt;</code> 符号来选择到属性值的根元素，进而也可以选择修改更深的元素。</li></ol></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myHtml+{}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myHtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myOtherHtml()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        myHtml<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div style="color: #f00">&lt;span>hello world&lt;/span>&lt;/div>`</span></span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">myOtherHtml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;p>这是一个函数返回值&lt;/p>`</span></span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.app</span> >>> div </span><span class="token punctuation">{</span>    <span class="token selector">font-size: 20px;    > span </span><span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> darkblue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p><img src="/medias/postimages/10.png" alt="效果图" title="效果图"></p><blockquote><p>注意：你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 XSS 攻击。请只对可信内容使用 HTML 插值，绝不要对用户提供的内容使用插值。</p></blockquote><h3 id="2-v-bind"><a href="#2-v-bind" class="headerlink" title="2. v-bind"></a>2. v-bind</h3><p>Mustache 语法不能作用在 HTML 特性上，遇到这种情况应该使用 <code>v-bind</code> 指令：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>对于布尔特性 (它们只要存在就意味着值为 true)，v-bind 工作起来略有不同，在这个例子中：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isButtonDisabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>如果 isButtonDisabled 的值是 null、undefined 或 false，则 disabled 特性甚至不会被包含在渲染出来的 button 元素中。</p><blockquote><p>同样，<code>v-bind</code>指令后面同样可以跟任意 JavaScript 表达式</p></blockquote><h3 id="3-v-if"><a href="#3-v-if" class="headerlink" title="3. v-if"></a>3. v-if</h3><blockquote><ol><li><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 <code>truthy</code> 值的时候被渲染</li><li>也可以用 <code>v-else</code> 添加一个“else 块”</li><li><code>v-else-if</code>，顾名思义，充当 v-if 的“else-if 块”，可以连续使用</li><li>可以在 <code>&lt;template&gt;</code> 元素上使用 v-if 条件渲染分组</li><li>用 <code>key</code> 管理可复用的元素，如果没有添加 <code>key</code> 属性，那么切换的时候会高效复用相同的元素</li><li><code>key</code> 表示：这两个元素是完全独立的，不要复用它们</li><li><code>v-if</code> 后面可以跟任意表达式，根据表达式返回的值是否是 <code>truthy</code>，来确定是否确定是否要渲染。（可以理解为表达式最后的值都会通过函数 <code>Boolean()</code> 来转换为布尔值，为 <code>true</code> 就渲染，反之就不渲染）</li></ol></blockquote><h3 id="4-v-show"><a href="#4-v-show" class="headerlink" title="4. v-show"></a>4. v-show</h3><p>另一个用于根据条件展示元素的选项是 v-show 指令。用法大致一样，不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。</p><blockquote><ol><li>注意，v-show 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。</li></ol></blockquote><p>v-if vs v-show 的对比：</p><blockquote><ol><li><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</li><li><code>v-if</code> 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</li><li>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</li><li>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</li></ol></blockquote><h3 id="5-v-for"><a href="#5-v-for" class="headerlink" title="5. v-for"></a>5. v-for</h3><p>我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。v-for 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的别名。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      my name is {{item.name}},age is {{item.age}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        list<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'huang'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'zhang'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="/medias/postimages/11.png" alt="效果图" title="效果图"><br>在 <code>v-for</code> 块中，我们可以访问所有父作用域的属性。v-for 还支持一个可选的第二个参数，即当前项的索引。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, index) in list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      my name is {{item.name}},age is {{item.age}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        list<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'huang'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'zhang'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>你也可以用 <code>of</code> 替代 <code>in</code> 作为分隔符，因为它更接近 JavaScript 迭代器的语法。<br><code>v-for</code> 语法同样可以应用在对象中：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(value, name, index) in object<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{ index }}. {{ name }}: {{ value }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><blockquote><ol><li>注意：<code>v-for</code>的表达式特殊，必须是<code>item in items</code>的格式，不能随便写了。</li><li>建议尽可能在使用 <code>v-for</code> 时提供 key attribute，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。</li><li>不推荐在同一元素上使用 <code>v-if 和 v-for</code>。</li><li>当 <code>v-if 和 v-for</code> 处于同一节点，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。</li><li>在自定义组件上，你可以像在任何普通元素上一样使用 v-for 。</li><li>当在组件上使用 v-for 时，key 现在是必须的。</li></ol></blockquote><h3 id="6-v-on"><a href="#6-v-on" class="headerlink" title="6. v-on"></a>6. v-on</h3><p>可以用 <code>v-on</code> 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。<br>需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warn(<span class="token punctuation">'</span>Form cannot be submitted yet.<span class="token punctuation">'</span>, $event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   Submit <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    warn<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>message<span class="token punctuation">,</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 现在我们可以访问原生事件对象</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序 - 对请求接口进行二次封装</title>
      <link href="/2018/09/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20%E5%AF%B9%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/"/>
      <url>/2018/09/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20%E5%AF%B9%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>在微信小程序中，我们用微信提供的数据请求接口 wx.request() 来接收数据，如果不进行二次封装，那每次请求数据的时候会比较麻烦，所以一般情况下会对这个接口进行二次封装。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 请求接口统一路径</span><span class="token keyword">const</span> baseURL <span class="token operator">=</span> <span class="token string">'http://localhost:8080/'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 完整路径</span>  url <span class="token operator">=</span> baseURL <span class="token operator">+</span> url<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 请求接口时是否加载 loading 动画</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>     wx<span class="token punctuation">.</span><span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'加载中'</span><span class="token punctuation">,</span>      mask<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      method<span class="token punctuation">,</span>      url<span class="token punctuation">,</span>      data<span class="token punctuation">,</span>      header<span class="token punctuation">:</span> options<span class="token punctuation">.</span>header<span class="token punctuation">,</span>      success<span class="token punctuation">:</span> res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// code 为 0 时返回的数据是目标数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>datas<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token function">handleError</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      fail<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token function">handleError</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          code<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>          message<span class="token punctuation">:</span> <span class="token string">'接口请求失败'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      complete<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 接口请求完成之后取消 loading 动画</span>        wx<span class="token punctuation">.</span><span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 统一的请求错误处理函数</span><span class="token keyword">function</span> <span class="token function">handleError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">.</span>handled<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 默认弹出错误信息</span>      wx<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        title<span class="token punctuation">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">,</span>        icon<span class="token punctuation">:</span> <span class="token string">'none'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> error<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 对 post 请求进行处理</span><span class="token keyword">function</span> <span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 对 get 请求进行处理</span><span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将接口导出</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  post<span class="token punctuation">,</span>  <span class="token keyword">get</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>在接下来的页面中，我们就可以使用 request 函数来请求数据了。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 封装的接口路径</span><span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../util/request.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    someData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    request<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'path1XXX/path2XXX'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>lock<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        someData<span class="token punctuation">:</span> data      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>$attrs和$listeners</title>
      <link href="/2018/09/07/$attrs%E5%92%8C$listeners/"/>
      <url>/2018/09/07/$attrs%E5%92%8C$listeners/</url>
      
        <content type="html"><![CDATA[<h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h2><p>$attrs和$listeners是我们平时在封装自己的Vue组件的时候经常用到的两个属性，他们的用处很大，我们今天就说一说这两个属性的用法。</p><h2 id="二-attrs"><a href="#二-attrs" class="headerlink" title="二. $attrs"></a>二. $attrs</h2><p>定义：包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件——在创建高级别的组件时非常有用。</p><h3 id="1-非-Prop-的特性"><a href="#1-非-Prop-的特性" class="headerlink" title="1.非 Prop 的特性"></a>1.非 Prop 的特性</h3><p>在讲 $attrs 之前，要说一下非 props 的特性。</p><blockquote><p>一个非 prop 特性是指传向一个组件，但是该组件并没有相应 prop 定义的特性。因为显式定义的 prop 适用于向一个子组件传入信息，然而组件库的作者并不总能预见组件会被用于怎样的场景。这也是为什么组件可以接受任意的特性，而这些特性会被添加到这个组件的根元素上。</p></blockquote><p>也就是说在默认情况下，父组件定义的一些子组件没有接收的特性会有子组件的根组件继承。<br>对于绝大多数特性来说，从外部提供给组件的值会替换掉组件内部设置好的值。所以如果传入 type=”text” 就会替换掉 type=”date” 并把它破坏！庆幸的是，class 和 style 特性会稍微智能一些，即两边的值会被合并起来。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>base-input<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入...<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ffff00</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-input</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 子组件模板 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>在上面这个例子中，父组件中有 type、class、style 和 placeholder 四个未被子组件接收的特性，这时，子组件的根元素将会继承父组件的这四个特性，其中 class 和 style 比较智能，会将父组件的 class 和 style 的属性值和子组件的根元素本身的 class 和 style 进行合并，不过另外两个会简单的继承，其中 type 的属性值会被替换成父组件的 date，会破环原有的属性值。</p><h3 id="2-inheritAttrs"><a href="#2-inheritAttrs" class="headerlink" title="2. inheritAttrs"></a>2. inheritAttrs</h3><p>从上面的例子中我们知道父组件中的非 props 特性会被子组件的根组件继承，有时会产生负作用，此时我们的 inheritAttrs 就派上用场了。</p><blockquote><p>如果你不希望组件的根元素继承特性，你可以在组件的选项中设置 inheritAttrs: false。<br>注意：注意 inheritAttrs: false 选项不会影响 style 和 class 的绑定。</p></blockquote><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'base-input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  inheritAttrs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这尤其适合配合实例的 $attrs 属性使用，该属性包含了传递给一个组件的特性名和特性值。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-input</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'base-input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  inheritAttrs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;label for="name">&lt;input type="text" id="name" v-bind="$attrs">&lt;/label>`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这个时候 placeholder 属性就没有继承在子组件的根元素 label 上了，而是在 input 元素上，从而达到了我们的目的。</p><h2 id="三-listeners"><a href="#三-listeners" class="headerlink" title="三. $listeners"></a>三. $listeners</h2><p>定义：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件——在创建更高层次的组件时非常有用。</p><h3 id="1-native修饰符"><a href="#1-native修饰符" class="headerlink" title="1.native修饰符"></a>1.native修饰符</h3><p>你可能有很多次想要在一个组件的根元素上直接监听一个原生事件。这时，你可以使用 v-on 的 .native 修饰符：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-input</span> <span class="token attr-name">@focus.native</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-input</span><span class="token punctuation">></span></span></code></pre><p>在有的时候这是很有用的，不过在你尝试监听一个类似 input 的非常特定的元素时，这并不是个好主意。比如上述 base-input 组件可能做了如下重构，所以根元素实际上是一个 label 元素：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>  {{ label }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$emit(<span class="token punctuation">'</span>input<span class="token punctuation">'</span>, $event.target.value)<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></code></pre><p>这时，父级的 .native 监听器将静默失败。它不会产生任何报错，但是 doSomething 处理函数不会如你预期地被调用。<br>为了解决这个问题，Vue 提供了一个 $listeners 属性，它是一个对象，里面包含了作用在这个组件上的所有监听器：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  focus<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>  input<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>有了这个 $listeners 属性，你就可以配合 v-on=”$listeners” 将所有的事件监听器指向这个组件的某个特定的子元素。对于类似 input 的你希望它也可以配合 v-model 工作的组件来说，为这些监听器创建一个类似下述 inputListeners 的计算属性通常是非常有用的。</p><blockquote><p>父组件的事件添加 .native 修饰符后， $listeners 对象中就不会包含该事件，这个时候该事件被子组件的根元素捕获，无法再指向别的特定子元素。所以如果想让父组件的事件绑定到特定的子元素上，那么就不要加 .native 修饰符。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-model使用总结</title>
      <link href="/2018/08/20/v-model%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2018/08/20/v-model%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h2><p>你可以用 v-model 指令在表单 input、textarea 及 select 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p><blockquote><p>v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p></blockquote><p>v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p><ol><li>text 和 textarea 元素使用 value 属性和 input 事件。</li><li>checkbox 和 radio 使用 checked 属性和 change 事件。</li><li>select 字段将 value 作为 prop 并将 change 作为事件。</li></ol><p>v-model语法糖：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>// 等价于<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">:vlaue</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">=</span>$event.target.value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>应用在组件上：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-input</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 注册组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'base-input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> String  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;input type="text" :value="value" @input="$emit('input', $event.target.value)"/>`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">'hello world'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>为了让它正常工作，这个组件内的 input 必须：</p><ol><li>将其 value 特性绑定到一个名叫 value 的 prop 上</li><li>在其 input 事件被触发时，将新的值通过自定义的 input 事件抛出</li></ol></blockquote><h2 id="二-文本"><a href="#二-文本" class="headerlink" title="二. 文本"></a>二. 文本</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>当 input 输入框中的内容改变时，p 元素的内容也会随之更改。</p><h2 id="三-多行文本"><a href="#三-多行文本" class="headerlink" title="三. 多行文本"></a>三. 多行文本</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>同上。</p><blockquote><p>在文本区域插值并不会生效，应用 v-model 来代替。</p></blockquote><h2 id="四-复选框"><a href="#四-复选框" class="headerlink" title="四. 复选框"></a>四. 复选框</h2><p>1.单个复选框，绑定到布尔值：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{checkbox}}</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    checkbox<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>当选择框被选择时，checkbox 的值为 true，反之为 false。</p><p>2.多个复选框，绑定到同一个数组：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>篮球<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>足球<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>足球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>乒乓球<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>乒乓球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{checkbox}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    checkbox<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'足球'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="五-单选按钮"><a href="#五-单选按钮" class="headerlink" title="五. 单选按钮"></a>五. 单选按钮</h2><p>1.单选时通常绑定到字符串：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>篮球<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>足球<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>足球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>乒乓球<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>乒乓球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>橄榄球<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>橄榄球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{radio}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    radio<span class="token punctuation">:</span> <span class="token string">'篮球'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="六-选择框"><a href="#六-选择框" class="headerlink" title="六. 选择框"></a>六. 选择框</h2><p>1.单选时 (通常绑定到一个字符串)：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">disabled</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{select}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    select<span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><ol><li>如果 v-model 表达式的初始值未能匹配任何选项，select 元素将被渲染为“未选中”状态。在 iOS 中，这会使用户无法选择第一个选项。因为这样的情况下，iOS 不会触发 change 事件。因此，更推荐像上面这样提供一个值为空的禁用选项。</li><li>如果 option 选项中没有 value 属性，那么 v-model 的值将会为 option 元素之间的文本值，比如上例中的’选项一’、’选项二’等。</li></ol></blockquote><p>2.多选时 (绑定到一个数组)：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{select}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    select<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="七-值绑定"><a href="#七-值绑定" class="headerlink" title="七. 值绑定"></a>七. 值绑定</h2><p>我们可能想把值绑定到 Vue 实例的一个动态属性上，这时可以用 v-bind 实现，<strong>并且这个属性的值可以不是字符串（可以是Object类型）</strong>。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">disabled</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{select}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    list<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'huang'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'长沙市'</span><span class="token punctuation">,</span> <span class="token string">'湘潭市'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'zhang'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'湘潭市'</span><span class="token punctuation">,</span> <span class="token string">'株洲市'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">44</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'株洲市'</span><span class="token punctuation">,</span> <span class="token string">'长沙市'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'tang'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">55</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'娄底市'</span><span class="token punctuation">,</span> <span class="token string">'湘潭市'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    select<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'长沙市'</span><span class="token punctuation">,</span> <span class="token string">'湘潭市'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>上面这个例子中，默认就选择了第一项 ‘huang’，此时 v-model 的值绑定到了一个数组，这也是可行的。</p><h2 id="八-修饰符"><a href="#八-修饰符" class="headerlink" title="八. 修饰符"></a>八. 修饰符</h2><h3 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a>.lazy</h3><blockquote><p>在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步 (除了上述输入法组合文字时)。你可以添加 lazy 修饰符，从而转变为使用 change 事件进行同步。</p></blockquote><h3 id="number"><a href="#number" class="headerlink" title=".number"></a>.number</h3><blockquote><p>如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符。这通常很有用，因为即使在 type=”number” 时，HTML 输入元素的值也总会返回字符串。如果这个值无法被 parseFloat() 解析，则会返回原始的值。</p></blockquote><h3 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h3><blockquote><p>如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue框架重点总结（持续更新）</title>
      <link href="/2018/08/15/Vue%E6%A1%86%E6%9E%B6%E9%87%8D%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2018/08/15/Vue%E6%A1%86%E6%9E%B6%E9%87%8D%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>在这篇文章中，我会总结一些我在学习Vue中觉得很重要而且易错的知识点，方便以后查阅。</p><ol><li><p>Vue响应式系统：当属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。</p></li><li><p>在Vue实例中，只有当实例被创建时 data 中存在的属性才是响应式的。如果视图中使用到了 data 中未定义的数据时，当此数据改变，视图不会同步更新。<strong>（如果数据不需要应用在视图中，也可以选择不在 data 选项中进行定义）</strong>,如果你知道你会在晚些时候视图需要一个属性，但是一开始它为空或不存在，那么你仅需要设置一些初始值。例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>   newTodoText<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>   visitCount<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>   hideCompletedTodos<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>   todos<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   error<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>Vue 实例暴露了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来。例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> el<span class="token punctuation">:</span> <span class="token string">'#example'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vm<span class="token punctuation">.</span>$data <span class="token operator">===</span> data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => true</span>vm<span class="token punctuation">.</span>$el <span class="token operator">===</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => true</span><span class="token comment" spellcheck="true">// $watch 是一个实例方法</span>vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 这个回调将在 `vm.a` 改变后调用</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>指令 (Directives) 是带有 v- 前缀的特殊特性。指令特性的值预期是单个 JavaScript 表达式 (v-for 是例外情况)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p></li><li><p>动态参数（2.6.0新增）</p><pre class=" language-html"><code class="language-html">&lt;a v-bind:[attrHref] = "href"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>   attrHref<span class="token punctuation">:</span> <span class="token string">'href'</span><span class="token punctuation">,</span>   href<span class="token punctuation">:</span> <span class="token string">'https://www.baidu.com'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这里的 attrHref 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。<br>例如，如果你的 Vue 实例有一个 data 属性 attrHref，其值为 “href”，那么这个绑定将等价于 v-bind:href。<br><br>同样地，你可以使用动态参数为一个动态的事件名绑定处理函数：</p><pre class=" language-html"><code class="language-html">&lt;input v-on:[eventName] = "doSomething" type="text"></code></pre><p>当 eventName 的值为 “focus” 时，v-on:[eventName] 将等价于 v-on:focus。</p><blockquote><ol><li>注意：动态参数预期会求出一个字符串，异常情况下值为 null。这个特殊的 null 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</li><li>动态参数表达式有一些语法约束，因为某些字符，例如空格和引号，放在 HTML 特性名里是无效的。同样，在 DOM 中使用模板时你需要回避大写键名。</li></ol></blockquote><pre class=" language-html"><code class="language-html"> &lt;a v-bind:['foo' + bar] = "url">链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>上面的代码是无效的：变通的办法是使用没有空格或引号的表达式，或用计算属性替代这种复杂表达式。</p></li><li><p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。<strong>相比之下，每当触发重新渲染时，调用方法将总会再次执行函数。</strong></p></li><li><p>计算属性默认只有 getter ，不过在需要时你也可以提供一个 setter：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 默认情况只有getter</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>   firstName<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>   lastName<span class="token punctuation">:</span> <span class="token string">'world'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>   <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>此时 fullName 会随着 firstName 和 lastName 的值改变而改变，而且无法直接修改 fullName 的值，会报错。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 设置setter</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>   firstName<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>   lastName<span class="token punctuation">:</span> <span class="token string">'world'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>   fullName<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName     <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">let</span> name <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>现在再运行 app.fullName = ‘John Doe’ 时，setter 会被调用，vm.firstName 和 vm.lastName 也会相应地被更新。</p></li><li><p>v-if 和 v-show 对比：<br>v-if 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。</p><blockquote><ol><li>v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</li><li>v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</li><li>相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</li><li>一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</li></ol></blockquote></li><li><p>建议尽可能在使用 v-for 时提供 key attribute，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。</p><blockquote><p>不要使用对象或数组之类的非原始类型值作为 v-for 的 key。用字符串或数类型的值取而代之。</p></blockquote></li><li><p>Vue 包含一组观察数组的变异方法，所以它们也将会触发视图更新。这些方法如下：</p><blockquote><ol><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ol></blockquote></li><li><p>关于数组变动的注意事项：<br>由于 JavaScript 的限制，Vue 不能检测以下变动的数组：</p><blockquote><ol><li>当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue</li><li>当你修改数组的长度时，例如：vm.items.length = newLength</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    items<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'x'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不是响应性的</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">2</span>   <span class="token comment" spellcheck="true">// 不是响应性的</span></code></pre><p>对于上面的例子中的两个问题，我们可以用下面的方式解决。</p><pre class=" language-javascript"><code class="language-javascript">vm<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre></li><li><p>由于 JavaScript 的限制，Vue 不能检测对象属性的添加或删除：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span>   <span class="token comment" spellcheck="true">// 不是响应式的</span></code></pre><p>对于已经创建的实例，Vue 不能动态添加根级别的响应式属性。</p></li><li><p>使用 Vue.set 方法添加或者修改响应式属性：</p><blockquote><ol><li>数组：Vue.set(target, index, value)。</li><li>对象：Vue.set(target, propertyName, value)。</li></ol></blockquote><p>你也可以使用 vm.$set 实例方法，该方法是全局方法 Vue.set 的一个别名。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modifyList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{item.name}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    list<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token string">'22'</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'长沙市'</span><span class="token punctuation">,</span> <span class="token string">'娄底市'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token string">'33'</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'株洲市'</span><span class="token punctuation">,</span> <span class="token string">'湘潭市'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">modifyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 第一种修改方式</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'王五'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token string">'33'</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'株洲市'</span><span class="token punctuation">,</span> <span class="token string">'湘潭市'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 第二种修改方式（直接定位到要修改的值的上一级）</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>有时你可能需要为已有对象赋予多个新属性，比如使用 Object.assign() 或 _.extend()。在这种情况下，你应该用两个对象的属性创建一个新的对象。所以，如果你想添加新的响应式属性，不要像这样：</p><pre class=" language-javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>userProfile<span class="token punctuation">,</span> <span class="token punctuation">{</span>  age<span class="token punctuation">:</span> <span class="token number">27</span><span class="token punctuation">,</span>  favoriteColor<span class="token punctuation">:</span> <span class="token string">'Vue Green'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>你应该这样做：</p><pre class=" language-javascript"><code class="language-javascript">vm<span class="token punctuation">.</span>userProfile <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>userProfile<span class="token punctuation">,</span> <span class="token punctuation">{</span>  age<span class="token punctuation">:</span> <span class="token number">27</span><span class="token punctuation">,</span>  favoriteColor<span class="token punctuation">:</span> <span class="token string">'Vue Green'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>不推荐同时使用 v-if 和 v-for。<br>当它们处于同一节点，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 如果 list 不存在或者为空数组的时候，后面紧跟的 v-else 没有起作用 --></span>  <span class="token comment" spellcheck="true">&lt;!-- 因为当它们处于同一节点，v-for 的优先级比 v-if 更高，没有循环，所以后面的 v-if 也就相当于没有 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list &amp;&amp; list.length <span class="token punctuation">></span> 0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--&lt;li v-else>选项为空&lt;/li>--></span>  <span class="token comment" spellcheck="true">&lt;!-- 替代方法 --></span>  &lt;li v-if="list &amp;&amp; !list.length>选项为空<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre></li><li><p>2.2.0+ 的版本里，当在组件中使用 v-for 时，key 现在是必须的。</p></li><li><p>事件修饰符：</p><blockquote><ol><li>stop    // 阻止事件冒泡</li><li>prevent // 阻止默认事件</li><li>capture // 采用事件捕获模式</li><li>self    // 当e.currentTarget === e.target时触发</li><li>once    // 事件只触发一次</li><li>passive // addEventListener 中的 passive 选项</li></ol></blockquote><p>不要把 .passive 和 .prevent 一起使用，因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，.passive 会告诉浏览器你不想阻止事件的默认行为。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 阻止单击事件继续传播 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 提交事件不再重载页面 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 修饰符可以串联 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 只有修饰符 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 添加事件监听器时使用事件捕获模式 --></span><span class="token comment" spellcheck="true">&lt;!-- 即元素自身触发的事件先在此处理，然后才交由内部元素进行处理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.capture</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --></span><span class="token comment" spellcheck="true">&lt;!-- 即事件不是从内部元素触发的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.self</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 点击事件将只会触发一次 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.once</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li><li><p>关于Vue响应式的一点实践总结：</p><ol><li>Vue 不能检测对象属性的添加或删除（修改已经存在的属性是可以检测的）。<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 给 info 对象添加 age 属性，页面不是响应式的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info.age<span class="token punctuation">=</span>22<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{info.age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 删除 info 对象的 name 属性后，页面的 'huang' 还是会存在，不是响应式的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteInfoName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{info.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 修改 info 对象的 name 属性，页面会跟着变化，是响应式的。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info.name<span class="token punctuation">=</span><span class="token punctuation">'</span>zhang<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{info.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>   info<span class="token punctuation">:</span> <span class="token punctuation">{</span>     name<span class="token punctuation">:</span> <span class="token string">'huang'</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>   <span class="token function">deleteInfoName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>info<span class="token punctuation">.</span>name   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li>对于已经创建的实例，Vue 不能动态添加根级别的响应式属性。<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>   a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// `vm.a` 现在是响应式的</span>vm<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">// `vm.b` 不是响应式的</span></code></pre></li><li><p>使用 v-model 绑定属性问题，见实例： </p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 会报错，因为 message 没有在 Vue 实例中进行定义 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 虽然 info 中没有 name 属性，不过并不会报错，而且 info.name 是响应式的。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{info.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>   info<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>根据上面的例子我们可以知道，如果 v-model 绑定了未在 Vue 实例中定义的根属性，会报错，但是如果绑定了根属性下一级的对象里面的属性是不会报错的，而且该属性也会响应式。</p></li><li><p>其它例子：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 是响应式的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info.list <span class="token punctuation">=</span> [<span class="token punctuation">'</span>1<span class="token punctuation">'</span>, <span class="token punctuation">'</span>2<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{info.list}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 不是响应式的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info.list[2] <span class="token punctuation">=</span> <span class="token punctuation">'</span>王五<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{info.list}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>   info<span class="token punctuation">:</span> <span class="token punctuation">{</span>     list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">]</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><ol><li>直接修改某个值（不能是数组的某个索引），使它变为另外一个原始值或者指向另外一个指针，此时是响应式的。</li><li>修改或者添加数组某个索引的值不能使用：vm.items[indexOfItem] = newValue。要使用 Vue.set()。</li><li>新增或者删除对象的值也要使用 Vue.set()。</li></ol></blockquote></li></ol></li><li><p>$refs 只会在组件渲染完成之后生效，并且它们不是响应式的。这仅作为一个用于直接操作子组件的“逃生舱”——你应该避免在模板或计算属性中访问 $refs。</p></li><li>当 ref 和 v-for 一起使用的时候，你得到的引用将会是一个包含了对应数据源的这些子组件的数组。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于函数返回值的一个注意点</title>
      <link href="/2018/08/12/%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E4%B8%80%E4%B8%AA%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
      <url>/2018/08/12/%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E4%B8%80%E4%B8%AA%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>之前自己无聊在写demo的时候突然就发现了，虽然很基础，不过有时候还是会犯这个错误。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'Hello World'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这里控制台打印出来的是 undefined，之前一直觉得应该是 hello world，其实这里的 Hello World 是 setTimeout 参数里面的匿名函数的返回值，并不是 fn1 函数的返回值。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS定位之position属性详解</title>
      <link href="/2018/08/05/CSS%E5%AE%9A%E4%BD%8D%E4%B9%8Bposition%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/08/05/CSS%E5%AE%9A%E4%BD%8D%E4%B9%8Bposition%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h2><p>position属性规定元素的定位类型。这个属性定义建立元素布局所用的定位机制。任何元素都可以定位，不过绝对或固定元素会生成一个块级框，而不论该元素本身是什么类型。相对定位元素会相对于它在正常流中的默认位置偏移。　　<br>position属性有4个常用的属性值，分别是absolute、fixed、relative、static。</p><blockquote><ol><li>absolute：生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位。元素的位置和大小通过left、top、right以及bottom属性进行确定。</li><li>fixed：生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置和大小通过left、top、right以及bottom属性进行确定。</li><li>relative：生成相对定位的元素，相对于其正常位置进行定位。</li><li>static：默认值。没有定位，元素出现在正常的流中（<strong>忽略 top, bottom, left, right 或者 z-index 声明</strong>）。</li></ol></blockquote><h2 id="二-属性详解"><a href="#二-属性详解" class="headerlink" title="二. 属性详解"></a>二. 属性详解</h2><h3 id="1-relative"><a href="#1-relative" class="headerlink" title="1. relative"></a>1. relative</h3><blockquote><p>relative：是相对于其正常文本流中的位置进行偏移。</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.app</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> sienna<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> aqua</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> aqua</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/medias/postimages/04.png" alt="效果图" title="效果图"><br>总结：relative是相对正常文档流的位置进行偏移，原先占据的位置依然存在，也就是说它不会影响后面元素的位置。left表示相对原先位置右边进行偏移，top表示相对原先位置下边进行偏移。<strong>当left和right同时存在，仅left有效，当top和bottom同时存在仅top有效</strong>。relative的偏移是基于对象的margin左上侧的。</p><h3 id="2-absolute"><a href="#2-absolute" class="headerlink" title="2. absolute"></a>2. absolute</h3><blockquote><p>absolute：元素绝对定位，相对于static定位以外(relative/absolute/fixed)的第一个父元素，如果没有找到则相对于html元素进行定位，元素脱离文档流。</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.app</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> sienna<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> aqua</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> burlywood</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/medias/postimages/05.png" alt="效果图" title="效果图"></p><h3 id="3-fixed"><a href="#3-fixed" class="headerlink" title="3. fixed"></a>3. fixed</h3><blockquote><p>fixed：生成固定定位的元素，相对于浏览器窗口定位，即浏览器窗口滚动也不会影响元素位置，元素的位置与文档流无关，因此不占据空间，可能会和其他元素发生重叠。</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.app</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> sienna<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> aqua</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> burlywood</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/medias/postimages/06.png" alt="效果图" title="效果图"><br>窗口滚动不会影响.app元素位置。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM - Element 节点</title>
      <link href="/2018/08/05/DOM%20-%20Element%20%E8%8A%82%E7%82%B9/"/>
      <url>/2018/08/05/DOM%20-%20Element%20%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>Element节点对象对应网页的 HTML 元素。每一个 HTML 元素，在 DOM 树上都会转化成一个Element节点对象（以下简称元素节点）。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>nodeType<span class="token punctuation">,</span> div<span class="token punctuation">.</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 1 DIV</span></code></pre><blockquote><p>注意：元素节点的 nodeType 都是1，元素节点的 nodeName 都是大写。</p></blockquote><p>Element 对象继承了 Node 接口，因此 Node 的属性和方法在 Element 对象都存在。此外，不同的 HTML 元素对应的元素节点是不一样的，浏览器使用不同的构造函数，生成不同的元素节点，比如 a 元素的节点对象由 HTMLAnchorElement 构造函数生成，button 元素的节点对象由 HTMLButtonElement 构造函数生成。因此，元素节点不是一种对象，而是一组对象，这些对象除了继承 Element 的属性和方法，还有各自构造函数的属性和方法。</p><h3 id="一-实例属性"><a href="#一-实例属性" class="headerlink" title="(一) 实例属性"></a>(一) 实例属性</h3><h4 id="1-1-元素特性的相关属性"><a href="#1-1-元素特性的相关属性" class="headerlink" title="1.1 元素特性的相关属性"></a>1.1 元素特性的相关属性</h4><h5 id="1-Element-id"><a href="#1-Element-id" class="headerlink" title="(1) Element.id"></a>(1) Element.id</h5><blockquote><p>Element.id属性返回指定元素的id属性，该属性可读写。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 注意，id属性的值是大小写敏感，即浏览器能正确识别&lt;div id="app">和&lt;div id="APP">这两个元素的id属性，但是最好不要这样命名。</span><span class="token keyword">let</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>id<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// app</span></code></pre><h5 id="2-Element-tagName"><a href="#2-Element-tagName" class="headerlink" title="(2) Element.tagName"></a>(2) Element.tagName</h5><blockquote><p>Element.tagName属性返回指定元素的大写标签名，与nodeName属性的值相等。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// DIV</span></code></pre><h5 id="3-Element-lang"><a href="#3-Element-lang" class="headerlink" title="(3) Element.lang"></a>(3) Element.lang</h5><blockquote><p>Element.lang属性返回当前元素的语言设置。该属性可读写。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// HTML 如下</span><span class="token comment" spellcheck="true">// &lt;html lang="en"></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>lang<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// en</span></code></pre><h5 id="4-Element-title"><a href="#4-Element-title" class="headerlink" title="(4) Element.title"></a>(4) Element.title</h5><blockquote><p>Element.title属性用来读写当前元素的 HTML 属性title。该属性通常用来指定，鼠标悬浮时弹出的文字提示框。</p></blockquote><h4 id="1-2-元素状态的相关属性"><a href="#1-2-元素状态的相关属性" class="headerlink" title="1.2 元素状态的相关属性"></a>1.2 元素状态的相关属性</h4><h5 id="1-Element-contentEditable，Element-isContentEditable"><a href="#1-Element-contentEditable，Element-isContentEditable" class="headerlink" title="(1) Element.contentEditable，Element.isContentEditable"></a>(1) Element.contentEditable，Element.isContentEditable</h5><blockquote><p>HTML 元素可以设置contentEditable属性，使得元素的内容可以编辑。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// HTML</span><span class="token comment" spellcheck="true">// &lt;div contenteditable>hello world&lt;/div></span><span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>contentEditable<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// true</span></code></pre><p>上面代码中，div 元素有 contenteditable 属性，因此用户可以在网页上编辑这个区块的内容。<br>Element.contentEditable 属性返回一个字符串，表示是否设置了 contenteditable 属性，有三种可能的值。该属性可写。</p><ol><li>“true”：元素内容可编辑</li><li>“false”：元素内容不可编辑</li><li>“inherit”：元素是否可编辑，继承了父元素的设置</li></ol><p>Element.isContentEditable属性返回一个布尔值，同样表示是否设置了contenteditable属性。该属性只读。</p><h4 id="1-3-Element-attributes"><a href="#1-3-Element-attributes" class="headerlink" title="1.3 Element.attributes"></a>1.3 Element.attributes</h4><blockquote><p>Element.attributes属性返回一个类似数组的对象，成员是当前元素节点的所有属性节点。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// HTML</span><span class="token comment" spellcheck="true">// &lt;div id="app">&lt;/div></span><span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> attrs <span class="token operator">=</span> div<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> attrs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'->'</span> <span class="token operator">+</span> attrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// id->app</span><span class="token punctuation">}</span></code></pre><p>上面代码遍历 div 元素的所有属性。</p><h4 id="1-4-Element-className，Element-classList"><a href="#1-4-Element-className，Element-classList" class="headerlink" title="1.4 Element.className，Element.classList"></a>1.4 Element.className，Element.classList</h4><blockquote><ol><li>className属性用来读写当前元素节点的class属性。它的值是一个字符串，每个class之间用空格分割。</li><li>classList属性返回一个类似数组的对象，当前元素节点的每个class就是这个对象的一个成员。</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// HTML</span><span class="token comment" spellcheck="true">// &lt;div class="div1 div2 div3">&lt;/div></span><span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// div1 div2 div3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// {0: 'div1', 1: 'div2', 2: 'div3', length: 3}</span></code></pre><p>上面代码中，className属性返回一个空格分隔的字符串，而classList属性指向一个类似数组的对象，该对象的length属性（只读）返回当前元素的class数量。<br>classList对象有下列方法。</p><blockquote><ol><li>add()：增加一个 class。</li><li>remove()：移除一个 class。</li><li>contains()：检查当前元素是否包含某个 class。</li><li>toggle()：将某个 class 移入或移出当前元素。</li><li>item()：返回指定索引位置的 class。</li><li>toString()：将 class 的列表转为字符串。</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript">div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'div4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'div4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contain</span><span class="token punctuation">(</span><span class="token string">'div4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// false</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">'div4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// div4</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// div1 div2 div3 div4</span></code></pre><p>下面比较一下，className和classList在添加和删除某个 class 时的写法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加class</span>app<span class="token punctuation">.</span>className <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'bold'</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'bold'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除class</span>app<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'bold'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>className <span class="token operator">=</span> foo<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^bold$/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>toggle方法可以接受一个布尔值，作为第二个参数。如果为true，则添加该属性；如果为false，则去除该属性。</p></blockquote><h4 id="1-5-Element-dataset"><a href="#1-5-Element-dataset" class="headerlink" title="1.5 Element.dataset"></a>1.5 Element.dataset</h4><p>网页元素可以自定义data-属性，用来添加数据。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-timestamp</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1522907809292<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>上面代码中，div 元素有一个自定义的 data-timestamp 属性，用来为该元素添加一个时间戳。<br>Element.dataset 属性返回一个对象，可以从这个对象读写 data- 属性。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// HTML</span><span class="token comment" spellcheck="true">// &lt;div id="app" data-timestamp="1522907809292" data-index-number="123">&lt;/div></span><span class="token keyword">let</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// {indexNumber: '123', timestamp: '1522907809292'}</span></code></pre><blockquote><ol><li>dataset上面的各个属性返回都是字符串。</li><li>开头的data-会省略。</li><li>如果连词线后面跟了一个英文字母，那么连词线会取消，该字母变成大写。</li><li>其他字符不变。</li></ol></blockquote><p>因此，data-abc-def 对应 dataset.abcDef ，data-abc-1 对应 dataset[“abc-1”]。<br>除了使用 dataset 读写 data- 属性，也可以使用 Element.getAttribute() 和 Element.setAttribute()，通过完整的属性名读写这些属性。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> myDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'mydiv'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myDiv<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span>myDiv<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-foo'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// bar</span></code></pre><h4 id="1-6-Element-innerHTML"><a href="#1-6-Element-innerHTML" class="headerlink" title="1.6 Element.innerHTML"></a>1.6 Element.innerHTML</h4><p>Element.innerHTML 属性返回一个字符串，等同于该元素包含的所有 HTML 代码。该属性可读写，常用来设置某个节点的内容。它能改写所有元素节点的内容，包括 HTML 和 body 元素。<br>如果将innerHTML属性设为空，等于删除所有它包含的所有节点。</p><pre class=" language-javascript"><code class="language-javascript">el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span></code></pre><p>上面代码等于将el节点变成了一个空节点，el原来包含的节点被全部删除。<br>注意，读取属性值的时候，如果文本节点包含&amp;、小于号（&lt;）和大于号（&gt;），innerHTML属性会将它们转为实体形式&amp;、&lt;、&gt;。如果想得到原文，建议使用element.textContent属性。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// HTML</span><span class="token comment" spellcheck="true">// &lt;div>5 > 3&lt;/div></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 5 &amp;gt; 3</span></code></pre><p>写入的时候，如果插入的文本包含 HTML 标签，会被解析成为节点对象插入 DOM。注意，如果文本之中含有 script 标签，虽然可以生成 script 节点，但是插入的代码不会执行。</p><h4 id="1-7-Element-outerHTML"><a href="#1-7-Element-outerHTML" class="headerlink" title="1.7 Element.outerHTML"></a>1.7 Element.outerHTML</h4><p>Element.outerHTML属性返回一个字符串，表示当前元素节点的所有 HTML 代码，包括该元素本身和所有子元素。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// HTML</span><span class="token comment" spellcheck="true">// &lt;div id="app">&lt;p>Hello&lt;/p>&lt;/div></span><span class="token keyword">let</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>outerHTML<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// '&lt;div id="app">&lt;p>Hello&lt;/p>&lt;/div>'</span></code></pre><p>outerHTML属性是可读写的，对它进行赋值，等于替换掉当前元素。<br>注意，如果一个节点没有父节点，设置outerHTML属性会报错。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// div 是刚刚创建出来的元素，还没有插入到 DOM 中</span><span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>outerHTML <span class="token operator">=</span> <span class="token string">'&lt;div>Hello World&lt;/div>'</span>    <span class="token comment" spellcheck="true">// DOMException: This element has no parent node.</span></code></pre><h4 id="1-8-Element-clientHeight，Element-clientWidth"><a href="#1-8-Element-clientHeight，Element-clientWidth" class="headerlink" title="1.8 Element.clientHeight，Element.clientWidth"></a>1.8 Element.clientHeight，Element.clientWidth</h4><blockquote><ol><li>Element.clientHeight 属性返回一个整数值，表示元素节点的 CSS 高度（单位像素），只对块级元素生效，对于行内元素返回0。如果块级元素没有设置 CSS 高度，则返回实际高度。</li><li>除了元素本身的高度，它还包括padding部分，但是不包括 border、margin。如果有水平滚动条，还要减去水平滚动条的高度。注意，这个值始终是整数，如果是小数会被四舍五入。</li><li>Element.clientWidth属性返回元素节点的 CSS 宽度，同样只对块级元素有效，也是只包括元素本身的宽度和padding，如果有垂直滚动条，还要减去垂直滚动条的宽度。</li><li>document.documentElement 的 clientHeight 属性，返回当前视口的高度（即浏览器窗口的高度），等同于 window.innerHeight 属性减去水平滚动条的高度（如果有的话）。</li><li>document.documentElement 的 clientHeight 属性，返回当前视口的高度（即浏览器窗口的高度），等同于 window.innerHeight 属性减去水平滚动条的高度（如果有的话）。document.body 的高度则是网页的实际高度。一般来说，document.body.clientHeight 大于 document.documentElement.clientHeight。</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 视口高度</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 网页总高度</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight</code></pre><h4 id="1-9-Element-clientLeft，Element-clientTop"><a href="#1-9-Element-clientLeft，Element-clientTop" class="headerlink" title="1.9 Element.clientLeft，Element.clientTop"></a>1.9 Element.clientLeft，Element.clientTop</h4><p>Element.clientLeft属性等于元素节点左边框（left border）的宽度（单位像素），不包括左侧的padding和margin。如果没有设置左边框，或者是行内元素（display: inline），该属性返回0。该属性总是返回整数值，如果是小数，会四舍五入。</p><h4 id="1-10-Element-scrollHeight，Element-scrollWidth"><a href="#1-10-Element-scrollHeight，Element-scrollWidth" class="headerlink" title="1.10 Element.scrollHeight，Element.scrollWidth"></a>1.10 Element.scrollHeight，Element.scrollWidth</h4><p>Element.scrollHeight属性返回一个整数值（小数会四舍五入），表示当前元素的总高度（单位像素），包括溢出容器、当前不可见的部分。它包括padding，但是不包括border、margin以及水平滚动条的高度（如果有水平滚动条的话），还包括伪元素（::before或::after）的高度。<br>Element.scrollWidth属性表示当前元素的总宽度（单位像素），其他地方都与scrollHeight属性类似。这两个属性只读。<br>整张网页的总高度可以从document.documentElement或document.body上读取。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 返回网页的总高度</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight</code></pre><p>注意，如果元素节点的内容出现溢出，即使溢出的内容是隐藏的，scrollHeight属性仍然返回元素的总高度。</p><h4 id="1-11-Element-scrollLeft，Element-scrollTop"><a href="#1-11-Element-scrollLeft，Element-scrollTop" class="headerlink" title="1.11 Element.scrollLeft，Element.scrollTop"></a>1.11 Element.scrollLeft，Element.scrollTop</h4><p>Element.scrollLeft属性表示当前元素的水平滚动条向右侧滚动的像素数量，Element.scrollTop属性表示当前元素的垂直滚动条向下滚动的像素数量。对于那些没有滚动条的网页元素，这两个属性总是等于0。<br>如果要查看整张网页的水平的和垂直的滚动距离，要从document.documentElement元素上读取。</p><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">;</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop</code></pre><p>这两个属性都可读写，设置该属性的值，会导致浏览器将当前元素自动滚动到相应的位置。</p><h4 id="1-12-Element-offsetParent"><a href="#1-12-Element-offsetParent" class="headerlink" title="1.12 Element.offsetParent"></a>1.12 Element.offsetParent</h4><p>Element.offsetParent属性返回最靠近当前元素的、并且 CSS 的position属性不等于static的上层元素。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>上面代码中，span元素的offsetParent属性就是div元素。<br>该属性主要用于确定子元素位置偏移的计算基准，Element.offsetTop和Element.offsetLeft就是offsetParent元素计算的。<br>如果该元素是不可见的（display属性为none），或者位置是固定的（position属性为fixed），则offsetParent属性返回null。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>上面代码中，span元素的offsetParent属性是null。<br>如果某个元素的所有上层节点的position属性都是static，则Element.offsetParent属性指向<body>元素。</body></p><h4 id="1-13-Element-offsetHeight，Element-offsetWidth"><a href="#1-13-Element-offsetHeight，Element-offsetWidth" class="headerlink" title="1.13 Element.offsetHeight，Element.offsetWidth"></a>1.13 Element.offsetHeight，Element.offsetWidth</h4><p>Element.offsetHeight属性返回一个整数，表示元素的 CSS 垂直高度（单位像素），包括元素本身的高度、padding 和 border，以及水平滚动条的高度（如果存在滚动条）。<br>Element.offsetWidth属性表示元素的 CSS 水平宽度（单位像素），其他都与Element.offsetHeight一致。<br>这两个属性都是只读属性，只比Element.clientHeight和Element.clientWidth多了边框的高度或宽度。如果元素的 CSS 设为不可见（比如display: none;），则返回0。</p><h4 id="1-14-Element-offsetLeft，Element-offsetTop"><a href="#1-14-Element-offsetLeft，Element-offsetTop" class="headerlink" title="1.14 Element.offsetLeft，Element.offsetTop"></a>1.14 Element.offsetLeft，Element.offsetTop</h4><p>Element.offsetLeft返回当前元素左上角相对于Element.offsetParent节点的水平位移，Element.offsetTop返回垂直位移，单位为像素。通常，这两个值是指相对于父节点的位移。<br>下面的代码可以算出元素左上角相对于整张网页的坐标。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getElementPosition</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// document.body.offsetParent 为 null</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>e <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    x <span class="token operator">+</span><span class="token operator">=</span> e<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>    y <span class="token operator">+</span><span class="token operator">=</span> e<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>    e <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetParent  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="1-15-Element-style"><a href="#1-15-Element-style" class="headerlink" title="1.15 Element.style"></a>1.15 Element.style</h4><p>每个元素节点都有style用来读写该元素的行内样式信息。</p><h4 id="1-16-Element-children，Element-childElementCount"><a href="#1-16-Element-children，Element-childElementCount" class="headerlink" title="1.16 Element.children，Element.childElementCount"></a>1.16 Element.children，Element.childElementCount</h4><p>Element.children属性返回一个类似数组的对象（HTMLCollection实例），包括当前元素节点的所有子元素。如果当前元素没有子元素，则返回的对象包含零个成员。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>para<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> children <span class="token operator">=</span> para<span class="token punctuation">.</span>children<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面代码遍历了para元素的所有子元素。<br>Element.childElementCount属性返回当前元素节点包含的子元素节点的个数，与Element.children.length的值相同。</p><h4 id="1-17-Element-firstElementChild，Element-lastElementChild"><a href="#1-17-Element-firstElementChild，Element-lastElementChild" class="headerlink" title="1.17 Element.firstElementChild，Element.lastElementChild"></a>1.17 Element.firstElementChild，Element.lastElementChild</h4><p>Element.firstElementChild属性返回当前元素的第一个元素子节点，Element.lastElementChild返回最后一个元素子节点。</p><h4 id="1-18-Element-nextElementSibling，Element-previousElementSibling"><a href="#1-18-Element-nextElementSibling，Element-previousElementSibling" class="headerlink" title="1.18 Element.nextElementSibling，Element.previousElementSibling"></a>1.18 Element.nextElementSibling，Element.previousElementSibling</h4><p>Element.nextElementSibling属性返回当前元素节点的后一个同级元素节点，如果没有则返回null。<br>Element.previousElementSibling属性返回当前元素节点的前一个同级元素节点，如果没有则返回null。</p><h3 id="二-实例方法"><a href="#二-实例方法" class="headerlink" title="(二) 实例方法"></a>(二) 实例方法</h3><h4 id="2-1-属性相关方法"><a href="#2-1-属性相关方法" class="headerlink" title="2.1 属性相关方法"></a>2.1 属性相关方法</h4><p>元素节点提供六个方法，用来操作属性。</p><blockquote><ol><li>getAttribute()：读取某个属性的值，返回字符串</li><li>getAttributeNames()：返回当前元素的所有属性名，返回数组</li><li>setAttribute()：写入属性值，传入要设置的属性和属性值，无返回值</li><li>hasAttribute()：某个属性是否存在，传入要检测的属性，返回 true 或 false</li><li>hasAttributes()：当前元素是否有属性，不需要传参，返回 true 或 false</li><li>removeAttribute()：删除属性，无返回值</li></ol></blockquote><h4 id="2-2-Element-querySelector"><a href="#2-2-Element-querySelector" class="headerlink" title="2.2 Element.querySelector()"></a>2.2 Element.querySelector()</h4><p>Element.querySelector方法接受<strong>CSS 选择器</strong>作为参数，返回父元素的<strong>第一个匹配的子元素</strong>。如果没有找到匹配的子元素，就返回null。</p><blockquote><ol><li>Element.querySelector方法可以接受任何复杂的 CSS 选择器。</li><li>这个方法无法选中伪元素。</li><li>它可以接受多个选择器，它们之间使用逗号分隔。</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> el1 <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> el2 <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> el3 <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 返回第一个div或p元素。（注意：选择多个也只返回一个）</span><span class="token keyword">let</span> el4 <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div, p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> el5 <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"style[type='text/css'], style:not([type])"</span><span class="token punctuation">)</span></code></pre><h4 id="2-3-Element-querySelectorAll"><a href="#2-3-Element-querySelectorAll" class="headerlink" title="2.3 Element.querySelectorAll()"></a>2.3 Element.querySelectorAll()</h4><p>Element.querySelectorAll方法接受 CSS 选择器作为参数，返回一个NodeList实例，包含所有匹配的子元素。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> matches <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'div.highlighted > p'</span><span class="token punctuation">)</span></code></pre><p>该方法的执行机制与querySelector方法相同，也是先在全局范围内查找，再过滤出当前元素的子元素。因此，选择器实际上针对整个文档的。<br>它也可以接受多个 CSS 选择器，它们之间使用逗号分隔。如果选择器里面有伪元素的选择器，则总是返回一个空的NodeList实例。</p><h4 id="2-4-Element-getElementsByClassName"><a href="#2-4-Element-getElementsByClassName" class="headerlink" title="2.4 Element.getElementsByClassName()"></a>2.4 Element.getElementsByClassName()</h4><p>Element.getElementsByClassName方法返回一个HTMLCollection实例，成员是当前元素节点的所有具有指定 class 的子元素节点。该方法与document.getElementsByClassName方法的用法类似，只是搜索范围不是整个文档，而是当前元素节点。</p><pre class=" language-javascript"><code class="language-javascript">element<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'red test'</span><span class="token punctuation">)</span></code></pre><p>注意，该方法的参数大小写敏感。</p><h4 id="2-5-Element-getElementsByTagName"><a href="#2-5-Element-getElementsByTagName" class="headerlink" title="2.5 Element.getElementsByTagName()"></a>2.5 Element.getElementsByTagName()</h4><p>Element.getElementsByTagName方法返回一个HTMLCollection实例，成员是当前节点的所有匹配指定标签名的子元素节点。该方法与document.getElementsByClassName方法的用法类似，只是搜索范围不是整个文档，而是当前元素节点。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> table <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'forecast-table'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> cells <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'td'</span><span class="token punctuation">)</span></code></pre><h4 id="2-6-事件相关方法"><a href="#2-6-事件相关方法" class="headerlink" title="2.6 事件相关方法"></a>2.6 事件相关方法</h4><p>以下三个方法与Element节点的事件相关。这些方法都继承自EventTarget接口。</p><blockquote><ol><li>Element.addEventListener()：添加事件的回调函数</li><li>Element.removeEventListener()：移除事件监听函数</li><li>Element.dispatchEvent()：触发事件</li></ol></blockquote><h4 id="2-7-Element-getBoundingClientRect"><a href="#2-7-Element-getBoundingClientRect" class="headerlink" title="2.7 Element.getBoundingClientRect()"></a>2.7 Element.getBoundingClientRect()</h4><p>Element.getBoundingClientRect方法返回一个对象，提供当前元素节点的大小、位置等信息，基本上就是 CSS 盒状模型的所有信息。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> rect <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码中，getBoundingClientRect方法返回的rect对象，具有以下属性（全部为只读）。</p><blockquote><ol><li>x：元素左上角相对于视口的横坐标</li><li>y：元素左上角相对于视口的纵坐标</li><li>height：元素高度</li><li>width：元素宽度</li><li>left：元素左上角相对于视口的横坐标，与x属性相等</li><li>right：元素右边界相对于视口的横坐标（等于x + width）</li><li>top：元素顶部相对于视口的纵坐标，与y属性相等</li><li>bottom：元素底部相对于视口的纵坐标（等于y + height）</li></ol></blockquote><p>由于元素相对于视口（viewport）的位置，会随着页面滚动变化，因此表示位置的四个属性值，都不是固定不变的。如果想得到绝对位置，可以将left属性加上window.scrollX，top属性加上window.scrollY。<br>注意，getBoundingClientRect方法的所有属性，都把边框（border属性）算作元素的一部分。也就是说，都是从边框外缘的各个点来计算。因此，width和height包括了元素本身 + padding + border。<br>另外，上面的这些属性，都是继承自原型的属性，Object.keys会返回一个空数组，这一点也需要注意。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> rect <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// []</span></code></pre><p>上面代码中，rect对象没有自身属性，而Object.keys方法只返回对象自身的属性，所以返回了一个空数组。</p><h4 id="2-8-Element-remove"><a href="#2-8-Element-remove" class="headerlink" title="2.8 Element.remove()"></a>2.8 Element.remove()</h4><p>Element.remove方法继承自 ChildNode 接口，用于将当前元素节点从它的父节点移除。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'mydiv'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>el<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-9-Element-focus-，Element-blur"><a href="#2-9-Element-focus-，Element-blur" class="headerlink" title="2.9 Element.focus()，Element.blur()"></a>2.9 Element.focus()，Element.blur()</h4><p>Element.focus方法用于将当前页面的焦点，转移到指定元素上。<br>Element.blur方法用于将焦点从当前元素移除。</p><h4 id="2-10-Element-click"><a href="#2-10-Element-click" class="headerlink" title="2.10 Element.click()"></a>2.10 Element.click()</h4><p>Element.click方法用于在当前元素上模拟一次鼠标点击，相当于触发了click事件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript类型转换总结</title>
      <link href="/2018/08/01/JavaScript%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%80%BB%E7%BB%93/"/>
      <url>/2018/08/01/JavaScript%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一-数据类型转换"><a href="#一-数据类型转换" class="headerlink" title="一. 数据类型转换"></a>一. 数据类型转换</h2><h3 id="1-强制转换"><a href="#1-强制转换" class="headerlink" title="1. 强制转换"></a>1. 强制转换</h3><p>强制转换主要指使用Number()、String()和Boolean()三个函数，手动将各种类型的值，分别转换成数字、字符串或者布尔值。</p><h4 id="1-1-Number"><a href="#1-1-Number" class="headerlink" title="1.1 Number()"></a>1.1 Number()</h4><p>使用Number函数，可以将任意类型的值转化成数值。<br>下面分成两种情况讨论，一种是参数是原始类型的值，另一种是参数是对象。<br>① 原始类型的值转换：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 数值：转换后还是原来的值</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">324</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 324</span><span class="token comment" spellcheck="true">// 字符串：如果可以被解析为数值，则转换为相应的数值</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'324'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 324</span><span class="token comment" spellcheck="true">// 字符串：如果不可以被解析为数值，返回 NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'324abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// NaN</span><span class="token comment" spellcheck="true">// 空字符串转为0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">// 布尔值：true 转成 1，false 转成 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 1</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">// undefined：转成 NaN</span><span class="token function">Number</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// NaN</span><span class="token comment" spellcheck="true">// null：转成0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 0</span></code></pre><blockquote><p>Number函数将字符串转为数值，要比parseInt函数严格很多。基本上，只要有一个字符无法转成数值，整个字符串就会被转为NaN。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'42 cats'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 42</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'42 cats'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// NaN</span></code></pre><p>上面代码中，parseInt逐个解析字符，而Number函数整体转换字符串的类型。</p><blockquote><p>另外，parseInt和Number函数都会自动过滤一个字符串前导和后缀的空格。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'\t\v\r12.34\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 12</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'\t\v\r12.34\n'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 12.34</span></code></pre><p>② 对象类型的值转换：</p><blockquote><p>简单的规则是，Number方法的参数是对象时，将返回NaN，除非是包含单个数值的数组。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">// 5</span></code></pre><p>之所以会这样，是因为Number背后的转换规则比较复杂。</p><ol><li>第一步，调用对象自身的valueOf方法。如果返回原始类型的值，则直接对该值使用Number函数，不再进行后续步骤。</li><li>第二步，如果valueOf方法返回的还是对象，则改为调用对象自身的toString方法。如果toString方法返回原始类型的值，则对该值使用Number函数，不再进行后续步骤。</li><li>第三步，如果toString方法返回的是对象，就报错。</li></ol><p>Number函数将obj对象转为数值。背后发生了一连串的操作，首先调用obj.valueOf方法, 结果返回对象本身；于是，继续调用obj.toString方法，这时返回字符串[object Object]，对这个字符串使用Number函数，得到NaN。<br>默认情况下，对象的valueOf方法返回对象本身，所以一般总是会调用toString方法，而toString方法返回对象的类型字符串（比如[object Object]）。所以，会有下面的结果。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// NaN</span></code></pre><h4 id="1-2-String"><a href="#1-2-String" class="headerlink" title="1.2 String()"></a>1.2 String()</h4><p>① 原始类型的值转换：</p><ol><li>数值：转为相应的字符串。</li><li>字符串：转换后还是原来的值。</li><li>布尔值：true转为字符串”true”，false转为字符串”false”。</li><li>undefined：转为字符串”undefined”。</li><li>null：转为字符串”null”。</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// "123"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "abc"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// "true"</span><span class="token function">String</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// "undefined"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// "null"</span></code></pre><p>String方法背后的转换规则，与Number方法基本相同，只是互换了valueOf方法和toString方法的执行顺序。</p><ol><li>先调用对象自身的toString方法。如果返回原始类型的值，则对该值使用String函数，不再进行以下步骤。</li><li>如果toString方法返回的是对象，再调用原对象的valueOf方法。如果valueOf方法返回原始类型的值，则对该值使用String函数，不再进行以下步骤。</li><li>如果valueOf方法返回的是对象，就报错。</li></ol><h4 id="1-3-Boolean"><a href="#1-3-Boolean" class="headerlink" title="1.3 Boolean()"></a>1.3 Boolean()</h4><p>Boolean()函数可以将任意类型的值转为布尔值。<br>它的转换规则相对简单：除了以下五个值的转换结果为false，其他的值全部为true。</p><ol><li>undefined</li><li>null</li><li>0（包含-0和+0）</li><li>NaN</li><li>‘’（空字符串）</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Boolean</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">// false</span></code></pre><blockquote><p>注意，所有对象（包括空对象）的转换结果都是true，包括false对应的布尔对象new Boolean(false)也是true。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// true</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// true</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="2-自动转换"><a href="#2-自动转换" class="headerlink" title="2. 自动转换"></a>2. 自动转换</h3><p>下面介绍自动转换，它是以强制转换为基础的。<br>遇到以下三种情况时，JavaScript 会自动转换数据类型，即转换是自动完成的，用户不可见。<br>第一种情况，不同类型的数据互相运算。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">123</span> <span class="token operator">+</span> <span class="token string">'abc'</span>   <span class="token comment" spellcheck="true">// "123abc"</span></code></pre><p>第二种情况，对非布尔值类型的数据求布尔值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// "hello"</span></code></pre><p>第三种情况，对非数值类型的值使用一元运算符（即+和-）。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">+</span> <span class="token punctuation">{</span>foo<span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// NaN</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true">// NaN</span></code></pre><blockquote><p>自动转换的规则是这样的：预期什么类型的值，就调用该类型的转换函数。比如，某个位置预期为字符串，就调用String函数进行转换。如果该位置即可以是字符串，也可能是数值，那么默认转为数值。</p></blockquote><p>由于自动转换具有不确定性，而且不易除错，建议在预期为布尔值、数值、字符串的地方，全部使用Boolean、Number和String函数进行显式转换。</p><h4 id="2-1-自动转换为布尔值"><a href="#2-1-自动转换为布尔值" class="headerlink" title="2.1 自动转换为布尔值"></a>2.1 自动转换为布尔值</h4><p>JavaScript 遇到预期为布尔值的地方（比如if语句的条件部分），就会将非布尔值的参数自动转换为布尔值。系统内部会自动调用Boolean函数。<br>因此除了以下五个值，其他都是自动转为true。</p><ol><li>undefined</li><li>null</li><li>+0或-0</li><li>NaN</li><li>‘’（空字符串）</li></ol><p>下面两种写法，有时也用于将一个表达式转为布尔值。它们内部调用的也是Boolean函数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 写法一</span>expression <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">// 写法二</span><span class="token operator">!</span><span class="token operator">!</span> expression</code></pre><h4 id="2-2-自动转换为字符串"><a href="#2-2-自动转换为字符串" class="headerlink" title="2.2 自动转换为字符串"></a>2.2 自动转换为字符串</h4><p>JavaScript 遇到预期为字符串的地方，就会将非字符串的值自动转为字符串。具体规则是，先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串。<br>字符串的自动转换，主要发生在字符串的加法运算时。当一个值为字符串，另一个值为非字符串，则后者转为字符串。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'5'</span> <span class="token operator">+</span> <span class="token number">1</span>                 <span class="token comment" spellcheck="true">// '51'</span><span class="token string">'5'</span> <span class="token operator">+</span> <span class="token boolean">true</span>              <span class="token comment" spellcheck="true">// "5true"</span><span class="token string">'5'</span> <span class="token operator">+</span> <span class="token boolean">false</span>             <span class="token comment" spellcheck="true">// "5false"</span><span class="token string">'5'</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// "5[object Object]"</span><span class="token string">'5'</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token comment" spellcheck="true">// "5"</span><span class="token string">'5'</span> <span class="token operator">+</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// "5function (){}"</span><span class="token string">'5'</span> <span class="token operator">+</span> undefined         <span class="token comment" spellcheck="true">// "5undefined"</span><span class="token string">'5'</span> <span class="token operator">+</span> <span class="token keyword">null</span>              <span class="token comment" spellcheck="true">// "5null"</span></code></pre><h4 id="2-3-自动转换为数值"><a href="#2-3-自动转换为数值" class="headerlink" title="2.3 自动转换为数值"></a>2.3 自动转换为数值</h4><p>JavaScript 遇到预期为数值的地方，就会将参数值自动转换为数值。系统内部会自动调用Number函数。<br>除了加法运算符（+）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'5'</span> <span class="token operator">-</span> <span class="token string">'2'</span>          <span class="token comment" spellcheck="true">// 3</span><span class="token string">'5'</span> <span class="token operator">*</span> <span class="token string">'2'</span>          <span class="token comment" spellcheck="true">// 10</span><span class="token boolean">true</span> <span class="token operator">-</span> <span class="token number">1</span>           <span class="token comment" spellcheck="true">// 0</span><span class="token boolean">false</span> <span class="token operator">-</span> <span class="token number">1</span>          <span class="token comment" spellcheck="true">// -1</span><span class="token string">'1'</span> <span class="token operator">-</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true">// 0</span><span class="token string">'5'</span> <span class="token operator">*</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>           <span class="token comment" spellcheck="true">// 0</span><span class="token boolean">false</span> <span class="token operator">/</span> <span class="token string">'5'</span>        <span class="token comment" spellcheck="true">// 0</span><span class="token string">'abc'</span> <span class="token operator">-</span> <span class="token number">1</span>          <span class="token comment" spellcheck="true">// NaN</span><span class="token keyword">null</span> <span class="token operator">+</span> <span class="token number">1</span>           <span class="token comment" spellcheck="true">// 1</span>undefined <span class="token operator">+</span> <span class="token number">1</span>      <span class="token comment" spellcheck="true">// NaN</span></code></pre><blockquote><p>注意：null转为数值时为0，而undefined转为数值时为NaN。</p></blockquote><p>一元运算符也会把运算子转成数值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">+</span><span class="token string">'abc'</span>    <span class="token comment" spellcheck="true">// NaN</span><span class="token operator">-</span><span class="token string">'abc'</span>    <span class="token comment" spellcheck="true">// NaN</span><span class="token operator">+</span><span class="token boolean">true</span>     <span class="token comment" spellcheck="true">// 1</span><span class="token operator">-</span><span class="token boolean">false</span>    <span class="token comment" spellcheck="true">// 0</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清除浮动的几种方法</title>
      <link href="/2018/07/25/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2018/07/25/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>这篇文字总结了清除浮动的几种方法。</p><h3 id="1-给有浮动的元素父级设置-overflow-hidden或者auto"><a href="#1-给有浮动的元素父级设置-overflow-hidden或者auto" class="headerlink" title="1. 给有浮动的元素父级设置 overflow:hidden或者auto"></a>1. 给有浮动的元素父级设置 overflow:hidden或者auto</h3><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* css */</span><span class="token selector">* </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.app</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*overflow: auto;*/</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div1</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> darkblue<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div2</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> darkkhaki<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-给有浮动的元素父级设置-伪类元素-after，再设置样式"><a href="#2-给有浮动的元素父级设置-伪类元素-after，再设置样式" class="headerlink" title="2. 给有浮动的元素父级设置 伪类元素 :after，再设置样式"></a>2. 给有浮动的元素父级设置 伪类元素 :after，再设置样式</h3><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* css */</span><span class="token selector">* </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.app</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div1</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> darkblue<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div2</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> darkkhaki<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-给有浮动的元素父级设置一个高度"><a href="#3-给有浮动的元素父级设置一个高度" class="headerlink" title="3. 给有浮动的元素父级设置一个高度"></a>3. 给有浮动的元素父级设置一个高度</h3><p>很好理解，不写代码了。</p><h3 id="4-给有浮动的元素的最后加一个空的-div，再设置样式"><a href="#4-给有浮动的元素的最后加一个空的-div，再设置样式" class="headerlink" title="4. 给有浮动的元素的最后加一个空的 div，再设置样式"></a>4. 给有浮动的元素的最后加一个空的 div，再设置样式</h3><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* css */</span><span class="token selector">* </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div1</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> darkblue<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div2</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> darkkhaki<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div3</span> </span><span class="token punctuation">{</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript预编译过程</title>
      <link href="/2018/07/18/JavaScript%E9%A2%84%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/"/>
      <url>/2018/07/18/JavaScript%E9%A2%84%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在一个js代码执行过程中，一般认为会存在三个步骤，也就是所谓的js三部曲，分别是：</p><ol><li>语法分析</li><li>预编译</li><li>解释执行</li></ol></blockquote><p>本文会以预编译为重点对js的代码执行进行分析。</p><h2 id="一-语法分析"><a href="#一-语法分析" class="headerlink" title="一. 语法分析"></a>一. 语法分析</h2><p>js代码的执行是读一行代码执行一行，但在执行之前系统会先对js进行全面扫描检查是否存在低级的语法错误，并不会立即执行语句。</p><h2 id="二-预编译"><a href="#二-预编译" class="headerlink" title="二. 预编译"></a>二. 预编译</h2><h3 id="1-函数声明整体提升"><a href="#1-函数声明整体提升" class="headerlink" title="1. 函数声明整体提升"></a>1. 函数声明整体提升</h3><p>我们写一个函数，我们先执行这个函数，然后再写函数体查看它是否能执行：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 'hello world'</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>执行结果并没有让我们失望，控制台上打印出了’hello world’，只是为什么呢？<br><strong>这是因为js的预编译将函数体放在了js的最前头，也就是将函数声明整体优先提升，变成下面的代码顺序。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 'hello world'</span></code></pre><h3 id="2-变量声明提升"><a href="#2-变量声明提升" class="headerlink" title="2. 变量声明提升"></a>2. 变量声明提升</h3><p>我们用var声明一个变量，但是我们把输出这个变量的命令写在声明的前面。</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span></code></pre><p>这里显示的是undefined，而不是1。<br><strong>这是因为js预编译将变量的声明提升到了js最前面而不是将它的变量的值提升，也就是将var a提升，而a=1还是在它原来的位置，所以也就是说只是声明了a并没有赋值，从而变成下面的一段代码。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">100</span></code></pre><h3 id="3-解释执行"><a href="#3-解释执行" class="headerlink" title="3. 解释执行"></a>3. 解释执行</h3><p>对代码进行解释执行，在执行代码之前js会先进行一个预编译。</p><blockquote><ol><li>js会创建一个AO对象（活动对象，一般时指函数的上下文对象）</li><li>找形参和变量声明，将变量和形参名作为AO对象的属性名，并给它们付一个初始值undefined</li><li>将实参值和形参统一</li><li>在函数体里面找函数声明，值赋予函数体</li></ol></blockquote><p>实例</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p><img src="/medias/postimages/03.png" alt="效果图" title="效果图"><br>一步步来推算：<br>1.系统自动创建对象AO={}。<br>2.找形参和变量声明，将变量和形参名作为AO对象的属性名，并给它们付一个初始值undefined。</p><blockquote><p>形参：a<br>变量声明：a和b    //形参里有a了但是变量声明也有a这时只写一个a就行<br>找到之后将这a和b当作AO对象的属性名写进去并且赋值为undefined。</p></blockquote><pre class=" language-javascript"><code class="language-javascript">AO <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>  b<span class="token punctuation">:</span> undefined<span class="token punctuation">}</span></code></pre><p>3.将实参值和形参统一，也就是将实参的值赋给形参。</p><pre class=" language-javascript"><code class="language-javascript">AO <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span>undefined<span class="token punctuation">}</span></code></pre><p>4.在函数体里面找函数声明，值赋予函数体。</p><pre class=" language-javascript"><code class="language-javascript">AO<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  d<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>预编译提前帮我们整理了js的执行顺序，根据函数声明整体提升，变量声明提升这两句就可以得到。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> a<span class="token punctuation">;</span>  <span class="token keyword">var</span> b<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  b<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样看就更加显而易见。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地存储localStorage、sessionStorage的用法</title>
      <link href="/2018/07/12/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8localStorage%E3%80%81sessionStorage%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2018/07/12/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8localStorage%E3%80%81sessionStorage%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一. 介绍"></a>一. 介绍</h2><p>在HTML5中，新加入了一个localStorage特性，这个特性主要是用来作为本地存储来使用的，解决了cookie存储空间不足的问题(cookie中每条cookie的存储空间为4k)，localStorage中一般浏览器支持的是5M大小，这个在不同的浏览器中localStorage会有所不同。</p><h2 id="二-优势与局限"><a href="#二-优势与局限" class="headerlink" title="二. 优势与局限"></a>二. 优势与局限</h2><p>localStorage的优势</p><ol><li>localStorage拓展了cookie的4K限制</li><li>localStorage会可以将第一次请求的数据直接存储到本地，这个相当于一个5M大小的针对于前端页面的数据库，相比于cookie可以节约带宽，但是这个却是只有在高版本的浏览器中才支持的</li></ol><p>localStorage的局限</p><ol><li>浏览器的大小不统一，并且在IE8以上的IE版本才支持localStorage这个属性</li><li>目前所有的浏览器中都会把localStorage的值类型限定为string类型，这个在对我们日常比较常见的JSON对象类型需要一些转换</li><li>localStorage在浏览器的隐私模式下面是不可读取的</li><li>localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡</li><li>localStorage不能被爬虫抓取到<blockquote><p>localStorage与sessionStorage的唯一一点区别就是localStorage属于永久性存储，而sessionStorage属于当会话结束的时候，sessionStorage中的键值对会被清空</p></blockquote></li></ol><p>所以我们以localStorage来分析</p><h2 id="三-使用"><a href="#三-使用" class="headerlink" title="三. 使用"></a>三. 使用</h2><h3 id="1-localStorage的写入"><a href="#1-localStorage的写入" class="headerlink" title="1. localStorage的写入"></a>1. localStorage的写入</h3><pre class=" language-javascript"><code class="language-javascript">localStorage<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'huang'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者</span>localStorage<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者（推荐）</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'address'</span><span class="token punctuation">,</span> <span class="token string">'长沙市'</span><span class="token punctuation">)</span></code></pre><p><img src="/medias/postimages/02.png" alt="localStorage" title="localStorage"></p><blockquote><p>注意：localStorage/sessionStorage储存的值都是字符串格式，typeof的类型都是’string’,所以有时需要JSON.stringify()和JSON.parse()进行处理。</p></blockquote><h3 id="2-localStorage的读取"><a href="#2-localStorage的读取" class="headerlink" title="2. localStorage的读取"></a>2. localStorage的读取</h3><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 'huang'</span><span class="token comment" spellcheck="true">// 或者</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// '22'</span><span class="token comment" spellcheck="true">// 或者（推荐）</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'address'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// '长沙市'</span></code></pre><h3 id="2-localStorage的删除"><a href="#2-localStorage的删除" class="headerlink" title="2. localStorage的删除"></a>2. localStorage的删除</h3><p>localStorage的删除主要有两个方法：</p><blockquote><ol><li>localStorage.clean()        // 把所有的键值对删除</li><li>localStorage.removeItem()   // 只删除某一个键值对<pre class=" language-javascript"><code class="language-javascript">localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'address'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'address'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// undefined</span>localStorage<span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// undefined</span></code></pre></li></ol></blockquote><h2 id="四-localStorage其他注意事项"><a href="#四-localStorage其他注意事项" class="headerlink" title="四. localStorage其他注意事项"></a>四. localStorage其他注意事项</h2><p> 一般我们会将对象存入localStorage中，但是在localStorage会自动将localStorage转换成为字符串形式，这个时候我们可以使用JSON.stringify()这个方法，来将对象转换成为JSON字符串。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'huang'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>  address<span class="token punctuation">:</span> <span class="token string">'长沙市'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// '{"name":"huang","age":22,"address":"长沙市"}'   </span></code></pre><p>读取之后要将JSON字符串转换成为JSON对象，使用JSON.parse()方法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> jsonObj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// {"name":"huang","age":22,"address":"长沙市"}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中通过props向子组件传值时加不加v-bind的问题</title>
      <link href="/2018/07/10/Vue%E4%B8%AD%E9%80%9A%E8%BF%87props%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%E6%97%B6%E5%8A%A0%E4%B8%8D%E5%8A%A0v-bind%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/07/10/Vue%E4%B8%AD%E9%80%9A%E8%BF%87props%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%E6%97%B6%E5%8A%A0%E4%B8%8D%E5%8A%A0v-bind%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h2><p>我在刚开始学vue的时候，有关Vue中父组件通过prop传值给子组件时，是否加v-bind的问题，没弄清楚时感觉很乱，弄清楚之后很简单。由于结果记起来很容易，所以先给出结果：</p><blockquote><p>只有传递字符串常量时，不采用v-bind形式，其余情况均采用v-bind形式传递。</p></blockquote><h2 id="二-实例"><a href="#二-实例" class="headerlink" title="二. 实例"></a>二. 实例</h2><h3 id="1-String"><a href="#1-String" class="headerlink" title="1. String"></a>1. String</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello World<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span></code></pre><p>如果传入的值是字符串变量：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- stringValue为Vue示例中已经绑定的字符串变量 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stringValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span></code></pre><h3 id="2-Number"><a href="#2-Number" class="headerlink" title="2. Number"></a>2. Number</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">:num</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span></code></pre><p>如果传入的值是数值变量：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- numValue为Vue示例中已经绑定的数值变量 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">:num</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>numValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span></code></pre><h3 id="3-Boolean"><a href="#3-Boolean" class="headerlink" title="3. Boolean"></a>3. Boolean</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">:bool</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span></code></pre><p>如果传入的值是布尔值变量：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- BooleanValue为Vue示例中已经绑定的布尔值变量 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">:bool</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BooleanValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span></code></pre><h3 id="4-Object-Array"><a href="#4-Object-Array" class="headerlink" title="4. Object/Array"></a>4. Object/Array</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">:obj</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name: <span class="token punctuation">'</span>huang<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 或者 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">:arr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>huang<span class="token punctuation">'</span>, <span class="token punctuation">'</span>liu<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span></code></pre><p>如果传入的值是对象/数组变量：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- objValue为Vue示例中已经绑定的对象变量 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">:obj</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>objValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 或者 --></span><span class="token comment" spellcheck="true">&lt;!-- arrValue为Vue示例中已经绑定的数组变量 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">:obj</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arrValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给行内元素设置padding、margin有用吗？</title>
      <link href="/2018/06/29/%E7%BB%99%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E8%AE%BE%E7%BD%AEpadding%E3%80%81margin%E6%9C%89%E7%94%A8%E5%90%97%EF%BC%9F/"/>
      <url>/2018/06/29/%E7%BB%99%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E8%AE%BE%E7%BD%AEpadding%E3%80%81margin%E6%9C%89%E7%94%A8%E5%90%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;我们都知道行内元素是不能设置width和height的，想要试着width和height就需要把行内元素的display属性设置成block、inline-block等属性，那么要是直接给行内元素设置padding和margin会产生效果吗？</p><h3 id="一-行内元素有盒子模型吗？"><a href="#一-行内元素有盒子模型吗？" class="headerlink" title="一. 行内元素有盒子模型吗？"></a>一. 行内元素有盒子模型吗？</h3><p>行内元素和其它元素一样有盒子模型。</p><h3 id="二-先说结论"><a href="#二-先说结论" class="headerlink" title="二. 先说结论"></a>二. 先说结论</h3><ol><li>行内元素的padding-top、padding-bottom、margin-top、margin-bottom属性设置是无效的。</li><li>行内元素的padding-left、padding-right、margin-left、margin-right属性设置是有效的。</li><li>行内元素的padding-top、padding-bottom从显示的效果上是增加的，但其实设置的是无效的。并不会对他周围的元素产生任何影响。</li></ol><h3 id="三-实例"><a href="#三-实例" class="headerlink" title="三.实例"></a>三.实例</h3><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是p元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是span元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是span元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* css */</span><span class="token selector">* </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p </span><span class="token punctuation">{</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#cccccc</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">span </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/medias/postimages/01.png" alt="效果图" title="效果图"><br>从效果图可以看到，padding-left、padding-right、margin-left、margin-right是有效的，margin-top、margin-bottom是无效的，padding-top、padding-bottom有点奇怪，效果上好像是有了，因为好像行内元素padding部分的背景生效了，不过这只是表面上的效果，其实并没有产生作用，因为它并没有真正产生外边距效果，所以事实上是无效的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中var与let、const的区别</title>
      <link href="/2018/06/22/JavaScript%E4%B8%ADvar%E4%B8%8Elet%E3%80%81const%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/06/22/JavaScript%E4%B8%ADvar%E4%B8%8Elet%E3%80%81const%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h2><p>&emsp;&emsp;在JavaScript中，有三个声明变量的中关键词，ES5中var以及ES6中新增的let、const，他们都可以用来声明变量，不过在用法上又有些区别，我今天就整理了一下，主要是介绍他们三者常见的用法和区别。</p><h2 id="二-区别"><a href="#二-区别" class="headerlink" title="二. 区别"></a>二. 区别</h2><h3 id="1-var声明的全局变量会挂载在window上，而let和const声明的变量不会"><a href="#1-var声明的全局变量会挂载在window上，而let和const声明的变量不会" class="headerlink" title="1. var声明的全局变量会挂载在window上，而let和const声明的变量不会"></a>1. var声明的全局变量会挂载在window上，而let和const声明的变量不会</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// var</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> window<span class="token punctuation">.</span>a<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 100 100</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// let </span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> window<span class="token punctuation">.</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 100 undefined</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// const</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> window<span class="token punctuation">.</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 100 undefined</span></code></pre><h3 id="2-var声明变量存在变量提升，let和const不存在变量提升"><a href="#2-var声明变量存在变量提升，let和const不存在变量提升" class="headerlink" title="2. var声明变量存在变量提升，let和const不存在变量提升"></a>2. var声明变量存在变量提升，let和const不存在变量提升</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// var</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// let</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// const</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">100</span></code></pre><h3 id="3-let和const声明形成块作用域"><a href="#3-let和const声明形成块作用域" class="headerlink" title="3. let和const声明形成块作用域"></a>3. let和const声明形成块作用域</h3><blockquote><p>块作用域一般是指{}内的区域，在这个块作用域内用let和const定义的变量，在外部是无法访问到的。<strong>值得注意的一点是，if/for循环中()内使用let或者const声明的变量属于后面的{}，而不是{}外部。</strong></p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 报错</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 报错</span></code></pre><h3 id="4-同一作用域下let和const不能声明同名变量，而var可以"><a href="#4-同一作用域下let和const不能声明同名变量，而var可以" class="headerlink" title="4. 同一作用域下let和const不能声明同名变量，而var可以"></a>4. 同一作用域下let和const不能声明同名变量，而var可以</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// var</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// let</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span>   <span class="token comment" spellcheck="true">// 报错 Identifier 'a' has already been declared</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// const</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">2</span>   <span class="token comment" spellcheck="true">// 报错 Identifier 'a' has already been declared</span></code></pre><h3 id="5-暂存性死区"><a href="#5-暂存性死区" class="headerlink" title="5.暂存性死区"></a>5.暂存性死区</h3><blockquote><p>在相同的函数或块作用域内重新声明同一个变量会引发SyntaxError；在声明变量或常量之前使用它，会引发ReferenceError，这就是暂存性死区。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 在当前块作用域中存在a使用let/const声明的情况下，给a赋值10时，只会在当前作用域找变量a</span>  <span class="token comment" spellcheck="true">// 而这时，还未到声明时候，所以控制台Error:a is not defined</span>  a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span>foo <span class="token operator">+</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// ReferenceError</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在上面例子中，if语句中使用了let声明了foo，因此在(foo+55)中引用的是if块级作用域中的foo，而不是test函数中的foo。但是由于if中的foo还没有声明完，因此它仍处于暂存死区。</p><h3 id="6-const"><a href="#6-const" class="headerlink" title="6. const"></a>6. const</h3><p>注意事项：<br>① 一旦声明必须赋值。<br>② 声明后不能再修改。<br>③ 如果声明的是复合类型数据可以修改其属性。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Missing initializer in const declaration</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">200</span>   <span class="token comment" spellcheck="true">// Assignment to constant variable</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ['hello']</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端web通过HTML5打电话、发邮件、发短信等操作</title>
      <link href="/2018/06/09/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb%E9%80%9A%E8%BF%87HTML5%E6%89%93%E7%94%B5%E8%AF%9D%E3%80%81%E5%8F%91%E9%82%AE%E4%BB%B6%E3%80%81%E5%8F%91%E7%9F%AD%E4%BF%A1%E7%AD%89%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/06/09/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb%E9%80%9A%E8%BF%87HTML5%E6%89%93%E7%94%B5%E8%AF%9D%E3%80%81%E5%8F%91%E9%82%AE%E4%BB%B6%E3%80%81%E5%8F%91%E7%9F%AD%E4%BF%A1%E7%AD%89%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h2><p>如果需要在移动浏览器中实现拨打电话，调用sms发短信，发送email等功能，移动手机WEB页面(HTML5)Javascript提供的接口是一个好办法。通过url的href链接的方式，实现在各种主流手机浏览器，进行拨打电话等功能。</p><h2 id="二-拨打电话"><a href="#二-拨打电话" class="headerlink" title="二. 拨打电话"></a>二. 拨打电话</h2><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 最常用的方法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel:10010<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>联系我们<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 使用wtai协议进行拨打电话 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wtai://wp/mc;10010<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>联系我们<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><blockquote><p>在电话号码前面可以加上 + （加号）表示国际号码。</p></blockquote><h2 id="三-发送短信"><a href="#三-发送短信" class="headerlink" title="三. 发送短信"></a>三. 发送短信</h2><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 格式：sms:&lt;phone_number>[,&lt;phone-number>]*[?body=&lt;message_body>] --></span><span class="token comment" spellcheck="true">&lt;!-- 给10010发短信 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sms:10010<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 给10010发送内容为"1234"的短信 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sms:10010?body<span class="token punctuation">=</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 给10010和10086发送内容为"1234"的短信 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sms:10010,10086?body<span class="token punctuation">=</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><blockquote><p>给多个联系人发送短信时，联系人之间用逗号分隔。</p></blockquote><h2 id="四-发送邮件"><a href="#四-发送邮件" class="headerlink" title="四. 发送邮件"></a>四. 发送邮件</h2><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 给hello@163.com发送邮件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mailto:hello@163.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送邮件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 给hello@163.com和world@126.com发送邮件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mailto:hello@163.com,world@163.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送邮件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 给hello@163.com发送主题为“testing”的邮件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mailto:hello@163.com?subject<span class="token punctuation">=</span>testing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送邮件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 给hello@163.com发送主题为“testing”的邮件，并抄送给world@163.com --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mailto:hello@163.com?subject<span class="token punctuation">=</span>testing mailto&amp;cc<span class="token punctuation">=</span>world@163.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送邮件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h2 id="五-GPS定位"><a href="#五-GPS定位" class="headerlink" title="五. GPS定位"></a>五. GPS定位</h2><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 格式：geopoint:[经度],[纬度] --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>geopoint:108.954823,34.275891<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的位置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue实例之$mount和el的异同</title>
      <link href="/2018/06/02/Vue%E5%AE%9E%E4%BE%8B%E4%B9%8B$mount%E5%92%8Cel%E7%9A%84%E5%BC%82%E5%90%8C/"/>
      <url>/2018/06/02/Vue%E5%AE%9E%E4%BE%8B%E4%B9%8B$mount%E5%92%8Cel%E7%9A%84%E5%BC%82%E5%90%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="一-用法异同"><a href="#一-用法异同" class="headerlink" title="一. 用法异同"></a>一. 用法异同</h2><p>1.两者在使用效果上没有任何区别，都是为了将实例化后的vue挂载到指定的dom元素中。<br>2.如果在实例化vue的时候指定el，则该vue将会渲染在此el对应的dom中，反之，若没有指定el，则vue实例会处于一种“未挂载”的状态，此时可以通过$mount来手动执行挂载。</p><blockquote><p>注意：如果$mount没有提供参数，模板将被渲染为文档之外的的元素，并且你必须使用原生DOM API把它插入文档中，否则没什么意义。</p></blockquote><h2 id="二-实例"><a href="#二-实例" class="headerlink" title="二. 实例"></a>二. 实例</h2><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// javascript</span><span class="token keyword">let</span> MyComponent <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>Hello World!&lt;/div>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建并挂载到 #app (会替换 #app)</span><span class="token keyword">new</span> <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 同上</span><span class="token keyword">new</span> <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> el<span class="token punctuation">:</span> <span class="token string">'#app'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者，在文档之外渲染并且随后挂载</span><span class="token keyword">let</span> component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span>$el<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue实例属性之el、template、render渲染优先级</title>
      <link href="/2018/06/01/Vue%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E4%B9%8Bel%E3%80%81template%E3%80%81render%E6%B8%B2%E6%9F%93%E4%BC%98%E5%85%88%E7%BA%A7/"/>
      <url>/2018/06/01/Vue%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E4%B9%8Bel%E3%80%81template%E3%80%81render%E6%B8%B2%E6%9F%93%E4%BC%98%E5%85%88%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="一-优先级"><a href="#一-优先级" class="headerlink" title="一. 优先级"></a>一. 优先级</h2><p>1.当Vue选项对象中有render渲染函数时，Vue构造函数将直接使用渲染函数渲染DOM树。<br>2.当选项对象中没有render渲染函数时，Vue构造函数首先通过将template模板编译生成渲染函数，然后再渲染DOM树。<br>3.当Vue选项对象中既没有render渲染函数，也没有template模板时，会通过el属性获取挂载元素的outerHTML来作为模板，并编译生成渲染函数。</p><blockquote><p>换言之，在进行DOM树的渲染时，render渲染函数的优先级最高，template次之且需编译成渲染函数。如果挂载点el属性对应的元素存在，而且前两者均不存在时，其outerHTML才会用于编译与渲染。</p></blockquote><h2 id="二-实例"><a href="#二-实例" class="headerlink" title="二. 实例"></a>二. 实例</h2><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ info }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ info }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ info }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// javascript</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'.app-1'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    info<span class="token punctuation">:</span> <span class="token string">'这是通过el属性获取挂载元素的outerHTML方式渲染。'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>这是template属性模板渲染。&lt;/div>'</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'这是render属性方式渲染。'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'.app-2'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    info<span class="token punctuation">:</span> <span class="token string">'这是通过el属性获取挂载元素的outerHTML方式渲染。'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>这是template属性模板渲染。&lt;/div>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'.app-3'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    info<span class="token punctuation">:</span> <span class="token string">'这是通过el属性获取挂载元素的outerHTML方式渲染。'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>三种方式渲染结果：<br>1.这是render属性方式渲染。<br>2.这是template属性模板渲染。<br>3.这是通过el属性获取挂载元素的outerHTML方式渲染。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串截取函数slice()、substr()、substring()的用法和区别</title>
      <link href="/2018/05/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96%E5%87%BD%E6%95%B0slice()%E3%80%81substr()%E3%80%81substring()%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/05/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96%E5%87%BD%E6%95%B0slice()%E3%80%81substr()%E3%80%81substring()%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h2><blockquote><p>在JavaScript中有三个很常用的字符串截取函数：slice()、substr()、substring()，这三个函数经常混在一起用，老是会记糊涂，所以我今天特别整理了一下这三个函数的用法。</p></blockquote><h2 id="二-用法"><a href="#二-用法" class="headerlink" title="二. 用法"></a>二. 用法</h2><h3 id="1-slice"><a href="#1-slice" class="headerlink" title="1. slice()"></a>1. slice()</h3><p>① slice方法用于从原字符串取出子字符串并返回，不改变原字符串。它的第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'JavaScript'</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// "Java"</span></code></pre><p>② 如果省略第二个参数，则表示子字符串一直到原字符串结束。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'JavaScript'</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// "Script"</span></code></pre><p>③ 如果参数是负值，表示从结尾开始倒数计算的位置，即该负值加上字符串长度。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'JavaScript'</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// "Script"</span><span class="token string">'JavaScript'</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// "Java"</span><span class="token string">'JavaScript'</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// "p"</span></code></pre><p>④ 如果第一个参数大于第二个参数，slice方法返回一个空字符串。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'JavaScript'</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ""</span></code></pre><h3 id="2-substr"><a href="#2-substr" class="headerlink" title="2. substr()"></a>2. substr()</h3><p>① substr方法用于从原字符串取出子字符串并返回，不改变原字符串，跟slice和substring方法的作用相同。substr方法的第一个参数是子字符串的开始位置（从0开始计算），第二个参数是子字符串的长度。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'JavaScript'</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// "Script"</span></code></pre><p>② 如果省略第二个参数，则表示子字符串一直到原字符串的结束。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'JavaScript'</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// "Script"</span></code></pre><p>③ 如果第一个参数是负数，表示倒数计算的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'JavaScript'</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// "Script"</span><span class="token string">'JavaScript'</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ""</span></code></pre><p>上面代码中，第二个例子的参数-1自动转为0，表示子字符串长度为0，所以返回空字符串。</p><h3 id="3-substring"><a href="#3-substring" class="headerlink" title="3. substring()"></a>3. substring()</h3><p>① substring方法用于从原字符串取出子字符串并返回，不改变原字符串，跟slice方法很相像。它的第一个参数表示子字符串的开始位置，第二个位置表示结束位置（返回结果不含该位置）。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'JavaScript'</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// "Java"</span></code></pre><p>② 如果省略第二个参数，则表示子字符串一直到原字符串的结束。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'JavaScript'</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// "Script"</span></code></pre><p>③ 如果第一个参数大于第二个参数，substring方法会自动更换两个参数的位置。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'JavaScript'</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// "Script"</span> <span class="token comment" spellcheck="true">// 等同于</span><span class="token string">'JavaScript'</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// "Script"</span></code></pre><p>上面代码中，调换substring方法的两个参数，都得到同样的结果。<br>④ 如果参数是负数，substring方法会自动将负数转为0。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'JavaScript'</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// "JavaScript"</span><span class="token string">'JavaScript'</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// "Java"</span></code></pre><p>上面代码中，第二个例子的参数-3会自动变成0，等同于’JavaScript’.substring(4, 0)。由于第二个参数小于第一个参数，会自动互换位置，所以返回Java。<br>由于这些规则违反直觉，因此不建议使用substring方法，应该优先使用slice。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总算是把个人博客搭建起来了</title>
      <link href="/2018/05/07/%E6%80%BB%E7%AE%97%E6%98%AF%E6%8A%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%B5%B7%E6%9D%A5%E4%BA%86/"/>
      <url>/2018/05/07/%E6%80%BB%E7%AE%97%E6%98%AF%E6%8A%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%B5%B7%E6%9D%A5%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;作为一个处女座的程序猿，我感觉自己做什么事情都有点完美主义和选择困难症，决定搭建网站之前就在纠结是自己从零开始建站还是用别人已经建好的轮子呢，想来想去还是决定用hexo搭建一个，毕竟大神写的东西比自己的要完善，而且搭建起来也简单，不费时间。<br>&emsp;&emsp;接下来我会在我的个人博客上分享自己的所见所得，当然主要是技术类的文章（谁叫我文笔不好呢？不会写心灵鸡汤），一方面优秀的东西值得我记载，另一方面还是觉得自己在学习的路上总是学了新的，忘了旧的，而且前端技术发展太快，很多新的东西需要去不断学习，所以好记性不然烂笔头，把他们都记下来，方便自己以后去查阅。<br>&emsp;&emsp;就这样。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
